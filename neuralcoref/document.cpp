/* Generated by Cython 0.28.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "neuralcoref.document",
        "sources": [
            "neuralcoref/document.pyx"
        ]
    },
    "module_name": "neuralcoref.document"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_1"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__neuralcoref__document
#define __PYX_HAVE_API__neuralcoref__document
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <set>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "neuralcoref/document.pyx",
  "stringsource",
  "neuralcoref/document.pxd",
  "__init__.pxd",
  "cymem.pxd",
  "type.pxd",
  "maps.pxd",
  "counter.pxd",
  "strings.pxd",
  "morphology.pxd",
  "vocab.pxd",
  "doc.pxd",
  "span.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":730
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":744
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":745
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":767
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "maps.pxd":5
 * 
 * 
 * ctypedef uint64_t key_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef uint64_t __pyx_t_7preshed_4maps_key_t;

/* "preshed/counter.pxd":10
 * 
 * 
 * ctypedef int64_t count_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef int64_t __pyx_t_7preshed_7counter_count_t;

/* "typedefs.pxd":5
 * 
 * 
 * ctypedef uint64_t hash_t             # <<<<<<<<<<<<<<
 * ctypedef char* utf8_t
 * ctypedef uint64_t attr_t
 */
typedef uint64_t __pyx_t_5spacy_8typedefs_hash_t;

/* "typedefs.pxd":7
 * ctypedef uint64_t hash_t
 * ctypedef char* utf8_t
 * ctypedef uint64_t attr_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t
 */
typedef uint64_t __pyx_t_5spacy_8typedefs_attr_t;

/* "typedefs.pxd":8
 * ctypedef char* utf8_t
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t             # <<<<<<<<<<<<<<
 * ctypedef uint16_t len_t
 * ctypedef uint16_t tag_t
 */
typedef uint64_t __pyx_t_5spacy_8typedefs_flags_t;

/* "typedefs.pxd":9
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t             # <<<<<<<<<<<<<<
 * ctypedef uint16_t tag_t
 */
typedef uint16_t __pyx_t_5spacy_8typedefs_len_t;

/* "typedefs.pxd":10
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t
 * ctypedef uint16_t tag_t             # <<<<<<<<<<<<<<
 */
typedef uint16_t __pyx_t_5spacy_8typedefs_tag_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_5cymem_5cymem_Pool;
struct __pyx_obj_5cymem_5cymem_Address;
struct __pyx_obj_7preshed_4maps_PreshMap;
struct __pyx_obj_7preshed_4maps_PreshMapArray;
struct __pyx_obj_7preshed_7counter_PreshCounter;
struct __pyx_obj_5spacy_7strings_StringStore;
struct __pyx_obj_5spacy_10morphology_Morphology;
struct __pyx_obj_5spacy_5vocab_Vocab;
struct __pyx_obj_5spacy_6tokens_3doc_Doc;
struct __pyx_obj_5spacy_6tokens_4span_Span;
struct __pyx_obj_11neuralcoref_8document_Mention;
struct __pyx_obj_11neuralcoref_8document_Document;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features;
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":773
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_7preshed_4maps_Cell;
struct __pyx_t_7preshed_4maps_MapStruct;

/* "maps.pxd":8
 * 
 * 
 * cdef struct Cell:             # <<<<<<<<<<<<<<
 *     key_t key
 *     void* value
 */
struct __pyx_t_7preshed_4maps_Cell {
  __pyx_t_7preshed_4maps_key_t key;
  void *value;
};

/* "maps.pxd":13
 * 
 * 
 * cdef struct MapStruct:             # <<<<<<<<<<<<<<
 *     Cell* cells
 *     void* value_for_empty_key
 */
struct __pyx_t_7preshed_4maps_MapStruct {
  struct __pyx_t_7preshed_4maps_Cell *cells;
  void *value_for_empty_key;
  void *value_for_del_key;
  __pyx_t_7preshed_4maps_key_t length;
  __pyx_t_7preshed_4maps_key_t filled;
  int is_empty_key_set;
  int is_del_key_set;
};

/* "typedefs.pxd":6
 * 
 * ctypedef uint64_t hash_t
 * ctypedef char* utf8_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t
 */
typedef char *__pyx_t_5spacy_8typedefs_utf8_t;

/* "symbols.pxd":1
 * cdef enum symbol_t:             # <<<<<<<<<<<<<<
 *     NIL
 *     IS_ALPHA
 */
enum __pyx_t_5spacy_7symbols_symbol_t {
  __pyx_e_5spacy_7symbols_NIL,
  __pyx_e_5spacy_7symbols_IS_ALPHA,
  __pyx_e_5spacy_7symbols_IS_ASCII,
  __pyx_e_5spacy_7symbols_IS_DIGIT,
  __pyx_e_5spacy_7symbols_IS_LOWER,
  __pyx_e_5spacy_7symbols_IS_PUNCT,
  __pyx_e_5spacy_7symbols_IS_SPACE,
  __pyx_e_5spacy_7symbols_IS_TITLE,
  __pyx_e_5spacy_7symbols_IS_UPPER,
  __pyx_e_5spacy_7symbols_LIKE_URL,
  __pyx_e_5spacy_7symbols_LIKE_NUM,
  __pyx_e_5spacy_7symbols_LIKE_EMAIL,
  __pyx_e_5spacy_7symbols_IS_STOP,
  __pyx_e_5spacy_7symbols_IS_OOV,
  __pyx_e_5spacy_7symbols_IS_BRACKET,
  __pyx_e_5spacy_7symbols_IS_QUOTE,
  __pyx_e_5spacy_7symbols_IS_LEFT_PUNCT,
  __pyx_e_5spacy_7symbols_IS_RIGHT_PUNCT,
  __pyx_e_5spacy_7symbols_IS_CURRENCY,
  __pyx_e_5spacy_7symbols_FLAG19 = 19,
  __pyx_e_5spacy_7symbols_FLAG20,
  __pyx_e_5spacy_7symbols_FLAG21,
  __pyx_e_5spacy_7symbols_FLAG22,
  __pyx_e_5spacy_7symbols_FLAG23,
  __pyx_e_5spacy_7symbols_FLAG24,
  __pyx_e_5spacy_7symbols_FLAG25,
  __pyx_e_5spacy_7symbols_FLAG26,
  __pyx_e_5spacy_7symbols_FLAG27,
  __pyx_e_5spacy_7symbols_FLAG28,
  __pyx_e_5spacy_7symbols_FLAG29,
  __pyx_e_5spacy_7symbols_FLAG30,
  __pyx_e_5spacy_7symbols_FLAG31,
  __pyx_e_5spacy_7symbols_FLAG32,
  __pyx_e_5spacy_7symbols_FLAG33,
  __pyx_e_5spacy_7symbols_FLAG34,
  __pyx_e_5spacy_7symbols_FLAG35,
  __pyx_e_5spacy_7symbols_FLAG36,
  __pyx_e_5spacy_7symbols_FLAG37,
  __pyx_e_5spacy_7symbols_FLAG38,
  __pyx_e_5spacy_7symbols_FLAG39,
  __pyx_e_5spacy_7symbols_FLAG40,
  __pyx_e_5spacy_7symbols_FLAG41,
  __pyx_e_5spacy_7symbols_FLAG42,
  __pyx_e_5spacy_7symbols_FLAG43,
  __pyx_e_5spacy_7symbols_FLAG44,
  __pyx_e_5spacy_7symbols_FLAG45,
  __pyx_e_5spacy_7symbols_FLAG46,
  __pyx_e_5spacy_7symbols_FLAG47,
  __pyx_e_5spacy_7symbols_FLAG48,
  __pyx_e_5spacy_7symbols_FLAG49,
  __pyx_e_5spacy_7symbols_FLAG50,
  __pyx_e_5spacy_7symbols_FLAG51,
  __pyx_e_5spacy_7symbols_FLAG52,
  __pyx_e_5spacy_7symbols_FLAG53,
  __pyx_e_5spacy_7symbols_FLAG54,
  __pyx_e_5spacy_7symbols_FLAG55,
  __pyx_e_5spacy_7symbols_FLAG56,
  __pyx_e_5spacy_7symbols_FLAG57,
  __pyx_e_5spacy_7symbols_FLAG58,
  __pyx_e_5spacy_7symbols_FLAG59,
  __pyx_e_5spacy_7symbols_FLAG60,
  __pyx_e_5spacy_7symbols_FLAG61,
  __pyx_e_5spacy_7symbols_FLAG62,
  __pyx_e_5spacy_7symbols_FLAG63,
  __pyx_e_5spacy_7symbols_ID,
  __pyx_e_5spacy_7symbols_ORTH,
  __pyx_e_5spacy_7symbols_LOWER,
  __pyx_e_5spacy_7symbols_NORM,
  __pyx_e_5spacy_7symbols_SHAPE,
  __pyx_e_5spacy_7symbols_PREFIX,
  __pyx_e_5spacy_7symbols_SUFFIX,
  __pyx_e_5spacy_7symbols_LENGTH,
  __pyx_e_5spacy_7symbols_CLUSTER,
  __pyx_e_5spacy_7symbols_LEMMA,
  __pyx_e_5spacy_7symbols_POS,
  __pyx_e_5spacy_7symbols_TAG,
  __pyx_e_5spacy_7symbols_DEP,
  __pyx_e_5spacy_7symbols_ENT_IOB,
  __pyx_e_5spacy_7symbols_ENT_TYPE,
  __pyx_e_5spacy_7symbols_HEAD,
  __pyx_e_5spacy_7symbols_SENT_START,
  __pyx_e_5spacy_7symbols_SPACY,
  __pyx_e_5spacy_7symbols_PROB,
  __pyx_e_5spacy_7symbols_ADJ,
  __pyx_e_5spacy_7symbols_ADP,
  __pyx_e_5spacy_7symbols_ADV,
  __pyx_e_5spacy_7symbols_AUX,
  __pyx_e_5spacy_7symbols_CONJ,
  __pyx_e_5spacy_7symbols_CCONJ,
  __pyx_e_5spacy_7symbols_DET,
  __pyx_e_5spacy_7symbols_INTJ,
  __pyx_e_5spacy_7symbols_NOUN,
  __pyx_e_5spacy_7symbols_NUM,
  __pyx_e_5spacy_7symbols_PART,
  __pyx_e_5spacy_7symbols_PRON,
  __pyx_e_5spacy_7symbols_PROPN,
  __pyx_e_5spacy_7symbols_PUNCT,
  __pyx_e_5spacy_7symbols_SCONJ,
  __pyx_e_5spacy_7symbols_SYM,
  __pyx_e_5spacy_7symbols_VERB,
  __pyx_e_5spacy_7symbols_X,
  __pyx_e_5spacy_7symbols_EOL,
  __pyx_e_5spacy_7symbols_SPACE,
  __pyx_e_5spacy_7symbols_Animacy_anim,
  __pyx_e_5spacy_7symbols_Animacy_inam,
  __pyx_e_5spacy_7symbols_Animacy_hum,
  __pyx_e_5spacy_7symbols_Aspect_freq,
  __pyx_e_5spacy_7symbols_Aspect_imp,
  __pyx_e_5spacy_7symbols_Aspect_mod,
  __pyx_e_5spacy_7symbols_Aspect_none,
  __pyx_e_5spacy_7symbols_Aspect_perf,
  __pyx_e_5spacy_7symbols_Aspect_iter,
  __pyx_e_5spacy_7symbols_Aspect_hab,
  __pyx_e_5spacy_7symbols_Case_abe,
  __pyx_e_5spacy_7symbols_Case_abl,
  __pyx_e_5spacy_7symbols_Case_abs,
  __pyx_e_5spacy_7symbols_Case_acc,
  __pyx_e_5spacy_7symbols_Case_ade,
  __pyx_e_5spacy_7symbols_Case_all,
  __pyx_e_5spacy_7symbols_Case_cau,
  __pyx_e_5spacy_7symbols_Case_com,
  __pyx_e_5spacy_7symbols_Case_cmp,
  __pyx_e_5spacy_7symbols_Case_dat,
  __pyx_e_5spacy_7symbols_Case_del,
  __pyx_e_5spacy_7symbols_Case_dis,
  __pyx_e_5spacy_7symbols_Case_ela,
  __pyx_e_5spacy_7symbols_Case_equ,
  __pyx_e_5spacy_7symbols_Case_ess,
  __pyx_e_5spacy_7symbols_Case_gen,
  __pyx_e_5spacy_7symbols_Case_ill,
  __pyx_e_5spacy_7symbols_Case_ine,
  __pyx_e_5spacy_7symbols_Case_ins,
  __pyx_e_5spacy_7symbols_Case_loc,
  __pyx_e_5spacy_7symbols_Case_lat,
  __pyx_e_5spacy_7symbols_Case_nom,
  __pyx_e_5spacy_7symbols_Case_par,
  __pyx_e_5spacy_7symbols_Case_sub,
  __pyx_e_5spacy_7symbols_Case_sup,
  __pyx_e_5spacy_7symbols_Case_tem,
  __pyx_e_5spacy_7symbols_Case_ter,
  __pyx_e_5spacy_7symbols_Case_tra,
  __pyx_e_5spacy_7symbols_Case_voc,
  __pyx_e_5spacy_7symbols_Definite_two,
  __pyx_e_5spacy_7symbols_Definite_def,
  __pyx_e_5spacy_7symbols_Definite_red,
  __pyx_e_5spacy_7symbols_Definite_cons,
  __pyx_e_5spacy_7symbols_Definite_ind,
  __pyx_e_5spacy_7symbols_Definite_spec,
  __pyx_e_5spacy_7symbols_Degree_cmp,
  __pyx_e_5spacy_7symbols_Degree_comp,
  __pyx_e_5spacy_7symbols_Degree_none,
  __pyx_e_5spacy_7symbols_Degree_pos,
  __pyx_e_5spacy_7symbols_Degree_sup,
  __pyx_e_5spacy_7symbols_Degree_abs,
  __pyx_e_5spacy_7symbols_Degree_com,
  __pyx_e_5spacy_7symbols_Degree_dim,
  __pyx_e_5spacy_7symbols_Degree_equ,
  __pyx_e_5spacy_7symbols_Evident_nfh,
  __pyx_e_5spacy_7symbols_Gender_com,
  __pyx_e_5spacy_7symbols_Gender_fem,
  __pyx_e_5spacy_7symbols_Gender_masc,
  __pyx_e_5spacy_7symbols_Gender_neut,
  __pyx_e_5spacy_7symbols_Mood_cnd,
  __pyx_e_5spacy_7symbols_Mood_imp,
  __pyx_e_5spacy_7symbols_Mood_ind,
  __pyx_e_5spacy_7symbols_Mood_n,
  __pyx_e_5spacy_7symbols_Mood_pot,
  __pyx_e_5spacy_7symbols_Mood_sub,
  __pyx_e_5spacy_7symbols_Mood_opt,
  __pyx_e_5spacy_7symbols_Mood_prp,
  __pyx_e_5spacy_7symbols_Mood_adm,
  __pyx_e_5spacy_7symbols_Negative_neg,
  __pyx_e_5spacy_7symbols_Negative_pos,
  __pyx_e_5spacy_7symbols_Negative_yes,
  __pyx_e_5spacy_7symbols_Polarity_neg,
  __pyx_e_5spacy_7symbols_Polarity_pos,
  __pyx_e_5spacy_7symbols_Number_com,
  __pyx_e_5spacy_7symbols_Number_dual,
  __pyx_e_5spacy_7symbols_Number_none,
  __pyx_e_5spacy_7symbols_Number_plur,
  __pyx_e_5spacy_7symbols_Number_sing,
  __pyx_e_5spacy_7symbols_Number_ptan,
  __pyx_e_5spacy_7symbols_Number_count,
  __pyx_e_5spacy_7symbols_Number_tri,
  __pyx_e_5spacy_7symbols_NumType_card,
  __pyx_e_5spacy_7symbols_NumType_dist,
  __pyx_e_5spacy_7symbols_NumType_frac,
  __pyx_e_5spacy_7symbols_NumType_gen,
  __pyx_e_5spacy_7symbols_NumType_mult,
  __pyx_e_5spacy_7symbols_NumType_none,
  __pyx_e_5spacy_7symbols_NumType_ord,
  __pyx_e_5spacy_7symbols_NumType_sets,
  __pyx_e_5spacy_7symbols_Person_one,
  __pyx_e_5spacy_7symbols_Person_two,
  __pyx_e_5spacy_7symbols_Person_three,
  __pyx_e_5spacy_7symbols_Person_none,
  __pyx_e_5spacy_7symbols_Poss_yes,
  __pyx_e_5spacy_7symbols_PronType_advPart,
  __pyx_e_5spacy_7symbols_PronType_art,
  __pyx_e_5spacy_7symbols_PronType_default,
  __pyx_e_5spacy_7symbols_PronType_dem,
  __pyx_e_5spacy_7symbols_PronType_ind,
  __pyx_e_5spacy_7symbols_PronType_int,
  __pyx_e_5spacy_7symbols_PronType_neg,
  __pyx_e_5spacy_7symbols_PronType_prs,
  __pyx_e_5spacy_7symbols_PronType_rcp,
  __pyx_e_5spacy_7symbols_PronType_rel,
  __pyx_e_5spacy_7symbols_PronType_tot,
  __pyx_e_5spacy_7symbols_PronType_clit,
  __pyx_e_5spacy_7symbols_PronType_exc,
  __pyx_e_5spacy_7symbols_PronType_emp,
  __pyx_e_5spacy_7symbols_Reflex_yes,
  __pyx_e_5spacy_7symbols_Tense_fut,
  __pyx_e_5spacy_7symbols_Tense_imp,
  __pyx_e_5spacy_7symbols_Tense_past,
  __pyx_e_5spacy_7symbols_Tense_pres,
  __pyx_e_5spacy_7symbols_VerbForm_fin,
  __pyx_e_5spacy_7symbols_VerbForm_ger,
  __pyx_e_5spacy_7symbols_VerbForm_inf,
  __pyx_e_5spacy_7symbols_VerbForm_none,
  __pyx_e_5spacy_7symbols_VerbForm_part,
  __pyx_e_5spacy_7symbols_VerbForm_partFut,
  __pyx_e_5spacy_7symbols_VerbForm_partPast,
  __pyx_e_5spacy_7symbols_VerbForm_partPres,
  __pyx_e_5spacy_7symbols_VerbForm_sup,
  __pyx_e_5spacy_7symbols_VerbForm_trans,
  __pyx_e_5spacy_7symbols_VerbForm_conv,
  __pyx_e_5spacy_7symbols_VerbForm_gdv,
  __pyx_e_5spacy_7symbols_VerbForm_vnoun,
  __pyx_e_5spacy_7symbols_Voice_act,
  __pyx_e_5spacy_7symbols_Voice_cau,
  __pyx_e_5spacy_7symbols_Voice_pass,
  __pyx_e_5spacy_7symbols_Voice_mid,
  __pyx_e_5spacy_7symbols_Voice_int,
  __pyx_e_5spacy_7symbols_Voice_antip,
  __pyx_e_5spacy_7symbols_Voice_dir,
  __pyx_e_5spacy_7symbols_Voice_inv,
  __pyx_e_5spacy_7symbols_Abbr_yes,
  __pyx_e_5spacy_7symbols_AdpType_prep,
  __pyx_e_5spacy_7symbols_AdpType_post,
  __pyx_e_5spacy_7symbols_AdpType_voc,
  __pyx_e_5spacy_7symbols_AdpType_comprep,
  __pyx_e_5spacy_7symbols_AdpType_circ,
  __pyx_e_5spacy_7symbols_AdvType_man,
  __pyx_e_5spacy_7symbols_AdvType_loc,
  __pyx_e_5spacy_7symbols_AdvType_tim,
  __pyx_e_5spacy_7symbols_AdvType_deg,
  __pyx_e_5spacy_7symbols_AdvType_cau,
  __pyx_e_5spacy_7symbols_AdvType_mod,
  __pyx_e_5spacy_7symbols_AdvType_sta,
  __pyx_e_5spacy_7symbols_AdvType_ex,
  __pyx_e_5spacy_7symbols_AdvType_adadj,
  __pyx_e_5spacy_7symbols_ConjType_oper,
  __pyx_e_5spacy_7symbols_ConjType_comp,
  __pyx_e_5spacy_7symbols_Connegative_yes,
  __pyx_e_5spacy_7symbols_Derivation_minen,
  __pyx_e_5spacy_7symbols_Derivation_sti,
  __pyx_e_5spacy_7symbols_Derivation_inen,
  __pyx_e_5spacy_7symbols_Derivation_lainen,
  __pyx_e_5spacy_7symbols_Derivation_ja,
  __pyx_e_5spacy_7symbols_Derivation_ton,
  __pyx_e_5spacy_7symbols_Derivation_vs,
  __pyx_e_5spacy_7symbols_Derivation_ttain,
  __pyx_e_5spacy_7symbols_Derivation_ttaa,
  __pyx_e_5spacy_7symbols_Echo_rdp,
  __pyx_e_5spacy_7symbols_Echo_ech,
  __pyx_e_5spacy_7symbols_Foreign_foreign,
  __pyx_e_5spacy_7symbols_Foreign_fscript,
  __pyx_e_5spacy_7symbols_Foreign_tscript,
  __pyx_e_5spacy_7symbols_Foreign_yes,
  __pyx_e_5spacy_7symbols_Gender_dat_masc,
  __pyx_e_5spacy_7symbols_Gender_dat_fem,
  __pyx_e_5spacy_7symbols_Gender_erg_masc,
  __pyx_e_5spacy_7symbols_Gender_erg_fem,
  __pyx_e_5spacy_7symbols_Gender_psor_masc,
  __pyx_e_5spacy_7symbols_Gender_psor_fem,
  __pyx_e_5spacy_7symbols_Gender_psor_neut,
  __pyx_e_5spacy_7symbols_Hyph_yes,
  __pyx_e_5spacy_7symbols_InfForm_one,
  __pyx_e_5spacy_7symbols_InfForm_two,
  __pyx_e_5spacy_7symbols_InfForm_three,
  __pyx_e_5spacy_7symbols_NameType_geo,
  __pyx_e_5spacy_7symbols_NameType_prs,
  __pyx_e_5spacy_7symbols_NameType_giv,
  __pyx_e_5spacy_7symbols_NameType_sur,
  __pyx_e_5spacy_7symbols_NameType_nat,
  __pyx_e_5spacy_7symbols_NameType_com,
  __pyx_e_5spacy_7symbols_NameType_pro,
  __pyx_e_5spacy_7symbols_NameType_oth,
  __pyx_e_5spacy_7symbols_NounType_com,
  __pyx_e_5spacy_7symbols_NounType_prop,
  __pyx_e_5spacy_7symbols_NounType_class,
  __pyx_e_5spacy_7symbols_Number_abs_sing,
  __pyx_e_5spacy_7symbols_Number_abs_plur,
  __pyx_e_5spacy_7symbols_Number_dat_sing,
  __pyx_e_5spacy_7symbols_Number_dat_plur,
  __pyx_e_5spacy_7symbols_Number_erg_sing,
  __pyx_e_5spacy_7symbols_Number_erg_plur,
  __pyx_e_5spacy_7symbols_Number_psee_sing,
  __pyx_e_5spacy_7symbols_Number_psee_plur,
  __pyx_e_5spacy_7symbols_Number_psor_sing,
  __pyx_e_5spacy_7symbols_Number_psor_plur,
  __pyx_e_5spacy_7symbols_Number_pauc,
  __pyx_e_5spacy_7symbols_Number_grpa,
  __pyx_e_5spacy_7symbols_Number_grpl,
  __pyx_e_5spacy_7symbols_Number_inv,
  __pyx_e_5spacy_7symbols_NumForm_digit,
  __pyx_e_5spacy_7symbols_NumForm_roman,
  __pyx_e_5spacy_7symbols_NumForm_word,
  __pyx_e_5spacy_7symbols_NumValue_one,
  __pyx_e_5spacy_7symbols_NumValue_two,
  __pyx_e_5spacy_7symbols_NumValue_three,
  __pyx_e_5spacy_7symbols_PartForm_pres,
  __pyx_e_5spacy_7symbols_PartForm_past,
  __pyx_e_5spacy_7symbols_PartForm_agt,
  __pyx_e_5spacy_7symbols_PartForm_neg,
  __pyx_e_5spacy_7symbols_PartType_mod,
  __pyx_e_5spacy_7symbols_PartType_emp,
  __pyx_e_5spacy_7symbols_PartType_res,
  __pyx_e_5spacy_7symbols_PartType_inf,
  __pyx_e_5spacy_7symbols_PartType_vbp,
  __pyx_e_5spacy_7symbols_Person_abs_one,
  __pyx_e_5spacy_7symbols_Person_abs_two,
  __pyx_e_5spacy_7symbols_Person_abs_three,
  __pyx_e_5spacy_7symbols_Person_dat_one,
  __pyx_e_5spacy_7symbols_Person_dat_two,
  __pyx_e_5spacy_7symbols_Person_dat_three,
  __pyx_e_5spacy_7symbols_Person_erg_one,
  __pyx_e_5spacy_7symbols_Person_erg_two,
  __pyx_e_5spacy_7symbols_Person_erg_three,
  __pyx_e_5spacy_7symbols_Person_psor_one,
  __pyx_e_5spacy_7symbols_Person_psor_two,
  __pyx_e_5spacy_7symbols_Person_psor_three,
  __pyx_e_5spacy_7symbols_Person_zero,
  __pyx_e_5spacy_7symbols_Person_four,
  __pyx_e_5spacy_7symbols_Polite_inf,
  __pyx_e_5spacy_7symbols_Polite_pol,
  __pyx_e_5spacy_7symbols_Polite_abs_inf,
  __pyx_e_5spacy_7symbols_Polite_abs_pol,
  __pyx_e_5spacy_7symbols_Polite_erg_inf,
  __pyx_e_5spacy_7symbols_Polite_erg_pol,
  __pyx_e_5spacy_7symbols_Polite_dat_inf,
  __pyx_e_5spacy_7symbols_Polite_dat_pol,
  __pyx_e_5spacy_7symbols_Polite_infm,
  __pyx_e_5spacy_7symbols_Polite_form,
  __pyx_e_5spacy_7symbols_Polite_form_elev,
  __pyx_e_5spacy_7symbols_Polite_form_humb,
  __pyx_e_5spacy_7symbols_Prefix_yes,
  __pyx_e_5spacy_7symbols_PrepCase_npr,
  __pyx_e_5spacy_7symbols_PrepCase_pre,
  __pyx_e_5spacy_7symbols_PunctSide_ini,
  __pyx_e_5spacy_7symbols_PunctSide_fin,
  __pyx_e_5spacy_7symbols_PunctType_peri,
  __pyx_e_5spacy_7symbols_PunctType_qest,
  __pyx_e_5spacy_7symbols_PunctType_excl,
  __pyx_e_5spacy_7symbols_PunctType_quot,
  __pyx_e_5spacy_7symbols_PunctType_brck,
  __pyx_e_5spacy_7symbols_PunctType_comm,
  __pyx_e_5spacy_7symbols_PunctType_colo,
  __pyx_e_5spacy_7symbols_PunctType_semi,
  __pyx_e_5spacy_7symbols_PunctType_dash,
  __pyx_e_5spacy_7symbols_Style_arch,
  __pyx_e_5spacy_7symbols_Style_rare,
  __pyx_e_5spacy_7symbols_Style_poet,
  __pyx_e_5spacy_7symbols_Style_norm,
  __pyx_e_5spacy_7symbols_Style_coll,
  __pyx_e_5spacy_7symbols_Style_vrnc,
  __pyx_e_5spacy_7symbols_Style_sing,
  __pyx_e_5spacy_7symbols_Style_expr,
  __pyx_e_5spacy_7symbols_Style_derg,
  __pyx_e_5spacy_7symbols_Style_vulg,
  __pyx_e_5spacy_7symbols_Style_yes,
  __pyx_e_5spacy_7symbols_StyleVariant_styleShort,
  __pyx_e_5spacy_7symbols_StyleVariant_styleBound,
  __pyx_e_5spacy_7symbols_VerbType_aux,
  __pyx_e_5spacy_7symbols_VerbType_cop,
  __pyx_e_5spacy_7symbols_VerbType_mod,
  __pyx_e_5spacy_7symbols_VerbType_light,
  __pyx_e_5spacy_7symbols_PERSON,
  __pyx_e_5spacy_7symbols_NORP,
  __pyx_e_5spacy_7symbols_FACILITY,
  __pyx_e_5spacy_7symbols_ORG,
  __pyx_e_5spacy_7symbols_GPE,
  __pyx_e_5spacy_7symbols_LOC,
  __pyx_e_5spacy_7symbols_PRODUCT,
  __pyx_e_5spacy_7symbols_EVENT,
  __pyx_e_5spacy_7symbols_WORK_OF_ART,
  __pyx_e_5spacy_7symbols_LANGUAGE,
  __pyx_e_5spacy_7symbols_DATE,
  __pyx_e_5spacy_7symbols_TIME,
  __pyx_e_5spacy_7symbols_PERCENT,
  __pyx_e_5spacy_7symbols_MONEY,
  __pyx_e_5spacy_7symbols_QUANTITY,
  __pyx_e_5spacy_7symbols_ORDINAL,
  __pyx_e_5spacy_7symbols_CARDINAL,
  __pyx_e_5spacy_7symbols_acomp,
  __pyx_e_5spacy_7symbols_advcl,
  __pyx_e_5spacy_7symbols_advmod,
  __pyx_e_5spacy_7symbols_agent,
  __pyx_e_5spacy_7symbols_amod,
  __pyx_e_5spacy_7symbols_appos,
  __pyx_e_5spacy_7symbols_attr,
  __pyx_e_5spacy_7symbols_aux,
  __pyx_e_5spacy_7symbols_auxpass,
  __pyx_e_5spacy_7symbols_cc,
  __pyx_e_5spacy_7symbols_ccomp,
  __pyx_e_5spacy_7symbols_complm,
  __pyx_e_5spacy_7symbols_conj,
  __pyx_e_5spacy_7symbols_cop,
  __pyx_e_5spacy_7symbols_csubj,
  __pyx_e_5spacy_7symbols_csubjpass,
  __pyx_e_5spacy_7symbols_dep,
  __pyx_e_5spacy_7symbols_det,
  __pyx_e_5spacy_7symbols_dobj,
  __pyx_e_5spacy_7symbols_expl,
  __pyx_e_5spacy_7symbols_hmod,
  __pyx_e_5spacy_7symbols_hyph,
  __pyx_e_5spacy_7symbols_infmod,
  __pyx_e_5spacy_7symbols_intj,
  __pyx_e_5spacy_7symbols_iobj,
  __pyx_e_5spacy_7symbols_mark,
  __pyx_e_5spacy_7symbols_meta,
  __pyx_e_5spacy_7symbols_neg,
  __pyx_e_5spacy_7symbols_nmod,
  __pyx_e_5spacy_7symbols_nn,
  __pyx_e_5spacy_7symbols_npadvmod,
  __pyx_e_5spacy_7symbols_nsubj,
  __pyx_e_5spacy_7symbols_nsubjpass,
  __pyx_e_5spacy_7symbols_num,
  __pyx_e_5spacy_7symbols_number,
  __pyx_e_5spacy_7symbols_oprd,
  __pyx_e_5spacy_7symbols_obj,
  __pyx_e_5spacy_7symbols_obl,
  __pyx_e_5spacy_7symbols_parataxis,
  __pyx_e_5spacy_7symbols_partmod,
  __pyx_e_5spacy_7symbols_pcomp,
  __pyx_e_5spacy_7symbols_pobj,
  __pyx_e_5spacy_7symbols_poss,
  __pyx_e_5spacy_7symbols_possessive,
  __pyx_e_5spacy_7symbols_preconj,
  __pyx_e_5spacy_7symbols_prep,
  __pyx_e_5spacy_7symbols_prt,
  __pyx_e_5spacy_7symbols_punct,
  __pyx_e_5spacy_7symbols_quantmod,
  __pyx_e_5spacy_7symbols_rcmod,
  __pyx_e_5spacy_7symbols_root,
  __pyx_e_5spacy_7symbols_xcomp,
  __pyx_e_5spacy_7symbols_acl,
  __pyx_e_5spacy_7symbols_LAW,
  __pyx_e_5spacy_7symbols_LANG
};

/* "parts_of_speech.pxd":3
 * from . cimport symbols
 * 
 * cpdef enum univ_pos_t:             # <<<<<<<<<<<<<<
 *     NO_TAG = 0
 *     ADJ = symbols.ADJ
 */
enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t {

  /* "parts_of_speech.pxd":5
 * cpdef enum univ_pos_t:
 *     NO_TAG = 0
 *     ADJ = symbols.ADJ             # <<<<<<<<<<<<<<
 *     ADP
 *     ADV
 */
  __pyx_e_5spacy_15parts_of_speech_NO_TAG = 0,
  __pyx_e_5spacy_15parts_of_speech_ADJ = __pyx_e_5spacy_7symbols_ADJ,
  __pyx_e_5spacy_15parts_of_speech_ADP,
  __pyx_e_5spacy_15parts_of_speech_ADV,
  __pyx_e_5spacy_15parts_of_speech_AUX,
  __pyx_e_5spacy_15parts_of_speech_CONJ,
  __pyx_e_5spacy_15parts_of_speech_CCONJ,
  __pyx_e_5spacy_15parts_of_speech_DET,
  __pyx_e_5spacy_15parts_of_speech_INTJ,
  __pyx_e_5spacy_15parts_of_speech_NOUN,
  __pyx_e_5spacy_15parts_of_speech_NUM,
  __pyx_e_5spacy_15parts_of_speech_PART,
  __pyx_e_5spacy_15parts_of_speech_PRON,
  __pyx_e_5spacy_15parts_of_speech_PROPN,
  __pyx_e_5spacy_15parts_of_speech_PUNCT,
  __pyx_e_5spacy_15parts_of_speech_SCONJ,
  __pyx_e_5spacy_15parts_of_speech_SYM,
  __pyx_e_5spacy_15parts_of_speech_VERB,
  __pyx_e_5spacy_15parts_of_speech_X,
  __pyx_e_5spacy_15parts_of_speech_EOL,
  __pyx_e_5spacy_15parts_of_speech_SPACE
};
struct __pyx_t_5spacy_7structs_LexemeC;
struct __pyx_t_5spacy_7structs_SerializedLexemeC;
struct __pyx_t_5spacy_7structs_Entity;
struct __pyx_t_5spacy_7structs_TokenC;

/* "structs.pxd":7
 * 
 * 
 * cdef struct LexemeC:             # <<<<<<<<<<<<<<
 *     flags_t flags
 * 
 */
struct __pyx_t_5spacy_7structs_LexemeC {
  __pyx_t_5spacy_8typedefs_flags_t flags;
  __pyx_t_5spacy_8typedefs_attr_t lang;
  __pyx_t_5spacy_8typedefs_attr_t id;
  __pyx_t_5spacy_8typedefs_attr_t length;
  __pyx_t_5spacy_8typedefs_attr_t orth;
  __pyx_t_5spacy_8typedefs_attr_t lower;
  __pyx_t_5spacy_8typedefs_attr_t norm;
  __pyx_t_5spacy_8typedefs_attr_t shape;
  __pyx_t_5spacy_8typedefs_attr_t prefix;
  __pyx_t_5spacy_8typedefs_attr_t suffix;
  __pyx_t_5spacy_8typedefs_attr_t cluster;
  float prob;
  float sentiment;
};

/* "structs.pxd":28
 * 
 * 
 * cdef struct SerializedLexemeC:             # <<<<<<<<<<<<<<
 *     unsigned char[8 + 8*10 + 4 + 4] data
 *     #    sizeof(flags_t)  # flags
 */
struct __pyx_t_5spacy_7structs_SerializedLexemeC {
  unsigned char data[(((8 + (8 * 10)) + 4) + 4)];
};

/* "structs.pxd":46
 * 
 * 
 * cdef struct Entity:             # <<<<<<<<<<<<<<
 *     hash_t id
 *     int start
 */
struct __pyx_t_5spacy_7structs_Entity {
  __pyx_t_5spacy_8typedefs_hash_t id;
  int start;
  int end;
  __pyx_t_5spacy_8typedefs_attr_t label;
};

/* "structs.pxd":53
 * 
 * 
 * cdef struct TokenC:             # <<<<<<<<<<<<<<
 *     const LexemeC* lex
 *     uint64_t morph
 */
struct __pyx_t_5spacy_7structs_TokenC {
  struct __pyx_t_5spacy_7structs_LexemeC const *lex;
  uint64_t morph;
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t pos;
  int spacy;
  __pyx_t_5spacy_8typedefs_attr_t tag;
  int idx;
  __pyx_t_5spacy_8typedefs_attr_t lemma;
  __pyx_t_5spacy_8typedefs_attr_t sense;
  int head;
  __pyx_t_5spacy_8typedefs_attr_t dep;
  uint32_t l_kids;
  uint32_t r_kids;
  uint32_t l_edge;
  uint32_t r_edge;
  int sent_start;
  int ent_iob;
  __pyx_t_5spacy_8typedefs_attr_t ent_type;
  __pyx_t_5spacy_8typedefs_hash_t ent_id;
};
union __pyx_t_5spacy_7strings_Utf8Str;
typedef union __pyx_t_5spacy_7strings_Utf8Str __pyx_t_5spacy_7strings_Utf8Str;

/* "strings.pxd":18
 * 
 * 
 * ctypedef union Utf8Str:             # <<<<<<<<<<<<<<
 *     unsigned char[8] s
 *     unsigned char* p
 */
union __pyx_t_5spacy_7strings_Utf8Str {
  unsigned char s[8];
  unsigned char *p;
};
struct __pyx_t_5spacy_10morphology_RichTagC;
struct __pyx_t_5spacy_10morphology_MorphAnalysisC;

/* "morphology.pxd":47
 * 
 * 
 * cdef enum univ_morph_t:             # <<<<<<<<<<<<<<
 *     NIL = 0
 *     Animacy_anim = symbols.Animacy_anim
 */
enum __pyx_t_5spacy_10morphology_univ_morph_t {

  /* "morphology.pxd":49
 * cdef enum univ_morph_t:
 *     NIL = 0
 *     Animacy_anim = symbols.Animacy_anim             # <<<<<<<<<<<<<<
 *     Animacy_inam
 *     Aspect_freq
 */
  __pyx_e_5spacy_10morphology_NIL = 0,
  __pyx_e_5spacy_10morphology_Animacy_anim = __pyx_e_5spacy_7symbols_Animacy_anim,
  __pyx_e_5spacy_10morphology_Animacy_inam,
  __pyx_e_5spacy_10morphology_Aspect_freq,
  __pyx_e_5spacy_10morphology_Aspect_imp,
  __pyx_e_5spacy_10morphology_Aspect_mod,
  __pyx_e_5spacy_10morphology_Aspect_none,
  __pyx_e_5spacy_10morphology_Aspect_perf,
  __pyx_e_5spacy_10morphology_Case_abe,
  __pyx_e_5spacy_10morphology_Case_abl,
  __pyx_e_5spacy_10morphology_Case_abs,
  __pyx_e_5spacy_10morphology_Case_acc,
  __pyx_e_5spacy_10morphology_Case_ade,
  __pyx_e_5spacy_10morphology_Case_all,
  __pyx_e_5spacy_10morphology_Case_cau,
  __pyx_e_5spacy_10morphology_Case_com,
  __pyx_e_5spacy_10morphology_Case_dat,
  __pyx_e_5spacy_10morphology_Case_del,
  __pyx_e_5spacy_10morphology_Case_dis,
  __pyx_e_5spacy_10morphology_Case_ela,
  __pyx_e_5spacy_10morphology_Case_ess,
  __pyx_e_5spacy_10morphology_Case_gen,
  __pyx_e_5spacy_10morphology_Case_ill,
  __pyx_e_5spacy_10morphology_Case_ine,
  __pyx_e_5spacy_10morphology_Case_ins,
  __pyx_e_5spacy_10morphology_Case_loc,
  __pyx_e_5spacy_10morphology_Case_lat,
  __pyx_e_5spacy_10morphology_Case_nom,
  __pyx_e_5spacy_10morphology_Case_par,
  __pyx_e_5spacy_10morphology_Case_sub,
  __pyx_e_5spacy_10morphology_Case_sup,
  __pyx_e_5spacy_10morphology_Case_tem,
  __pyx_e_5spacy_10morphology_Case_ter,
  __pyx_e_5spacy_10morphology_Case_tra,
  __pyx_e_5spacy_10morphology_Case_voc,
  __pyx_e_5spacy_10morphology_Definite_two,
  __pyx_e_5spacy_10morphology_Definite_def,
  __pyx_e_5spacy_10morphology_Definite_red,
  __pyx_e_5spacy_10morphology_Definite_cons,
  __pyx_e_5spacy_10morphology_Definite_ind,
  __pyx_e_5spacy_10morphology_Degree_cmp,
  __pyx_e_5spacy_10morphology_Degree_comp,
  __pyx_e_5spacy_10morphology_Degree_none,
  __pyx_e_5spacy_10morphology_Degree_pos,
  __pyx_e_5spacy_10morphology_Degree_sup,
  __pyx_e_5spacy_10morphology_Degree_abs,
  __pyx_e_5spacy_10morphology_Degree_com,
  __pyx_e_5spacy_10morphology_Degree_dim,
  __pyx_e_5spacy_10morphology_Gender_com,
  __pyx_e_5spacy_10morphology_Gender_fem,
  __pyx_e_5spacy_10morphology_Gender_masc,
  __pyx_e_5spacy_10morphology_Gender_neut,
  __pyx_e_5spacy_10morphology_Mood_cnd,
  __pyx_e_5spacy_10morphology_Mood_imp,
  __pyx_e_5spacy_10morphology_Mood_ind,
  __pyx_e_5spacy_10morphology_Mood_n,
  __pyx_e_5spacy_10morphology_Mood_pot,
  __pyx_e_5spacy_10morphology_Mood_sub,
  __pyx_e_5spacy_10morphology_Mood_opt,
  __pyx_e_5spacy_10morphology_Negative_neg,
  __pyx_e_5spacy_10morphology_Negative_pos,
  __pyx_e_5spacy_10morphology_Negative_yes,
  __pyx_e_5spacy_10morphology_Polarity_neg,
  __pyx_e_5spacy_10morphology_Polarity_pos,
  __pyx_e_5spacy_10morphology_Number_com,
  __pyx_e_5spacy_10morphology_Number_dual,
  __pyx_e_5spacy_10morphology_Number_none,
  __pyx_e_5spacy_10morphology_Number_plur,
  __pyx_e_5spacy_10morphology_Number_sing,
  __pyx_e_5spacy_10morphology_Number_ptan,
  __pyx_e_5spacy_10morphology_Number_count,
  __pyx_e_5spacy_10morphology_NumType_card,
  __pyx_e_5spacy_10morphology_NumType_dist,
  __pyx_e_5spacy_10morphology_NumType_frac,
  __pyx_e_5spacy_10morphology_NumType_gen,
  __pyx_e_5spacy_10morphology_NumType_mult,
  __pyx_e_5spacy_10morphology_NumType_none,
  __pyx_e_5spacy_10morphology_NumType_ord,
  __pyx_e_5spacy_10morphology_NumType_sets,
  __pyx_e_5spacy_10morphology_Person_one,
  __pyx_e_5spacy_10morphology_Person_two,
  __pyx_e_5spacy_10morphology_Person_three,
  __pyx_e_5spacy_10morphology_Person_none,
  __pyx_e_5spacy_10morphology_Poss_yes,
  __pyx_e_5spacy_10morphology_PronType_advPart,
  __pyx_e_5spacy_10morphology_PronType_art,
  __pyx_e_5spacy_10morphology_PronType_default,
  __pyx_e_5spacy_10morphology_PronType_dem,
  __pyx_e_5spacy_10morphology_PronType_ind,
  __pyx_e_5spacy_10morphology_PronType_int,
  __pyx_e_5spacy_10morphology_PronType_neg,
  __pyx_e_5spacy_10morphology_PronType_prs,
  __pyx_e_5spacy_10morphology_PronType_rcp,
  __pyx_e_5spacy_10morphology_PronType_rel,
  __pyx_e_5spacy_10morphology_PronType_tot,
  __pyx_e_5spacy_10morphology_PronType_clit,
  __pyx_e_5spacy_10morphology_PronType_exc,
  __pyx_e_5spacy_10morphology_Reflex_yes,
  __pyx_e_5spacy_10morphology_Tense_fut,
  __pyx_e_5spacy_10morphology_Tense_imp,
  __pyx_e_5spacy_10morphology_Tense_past,
  __pyx_e_5spacy_10morphology_Tense_pres,
  __pyx_e_5spacy_10morphology_VerbForm_fin,
  __pyx_e_5spacy_10morphology_VerbForm_ger,
  __pyx_e_5spacy_10morphology_VerbForm_inf,
  __pyx_e_5spacy_10morphology_VerbForm_none,
  __pyx_e_5spacy_10morphology_VerbForm_part,
  __pyx_e_5spacy_10morphology_VerbForm_partFut,
  __pyx_e_5spacy_10morphology_VerbForm_partPast,
  __pyx_e_5spacy_10morphology_VerbForm_partPres,
  __pyx_e_5spacy_10morphology_VerbForm_sup,
  __pyx_e_5spacy_10morphology_VerbForm_trans,
  __pyx_e_5spacy_10morphology_VerbForm_conv,
  __pyx_e_5spacy_10morphology_VerbForm_gdv,
  __pyx_e_5spacy_10morphology_Voice_act,
  __pyx_e_5spacy_10morphology_Voice_cau,
  __pyx_e_5spacy_10morphology_Voice_pass,
  __pyx_e_5spacy_10morphology_Voice_mid,
  __pyx_e_5spacy_10morphology_Voice_int,
  __pyx_e_5spacy_10morphology_Abbr_yes,
  __pyx_e_5spacy_10morphology_AdpType_prep,
  __pyx_e_5spacy_10morphology_AdpType_post,
  __pyx_e_5spacy_10morphology_AdpType_voc,
  __pyx_e_5spacy_10morphology_AdpType_comprep,
  __pyx_e_5spacy_10morphology_AdpType_circ,
  __pyx_e_5spacy_10morphology_AdvType_man,
  __pyx_e_5spacy_10morphology_AdvType_loc,
  __pyx_e_5spacy_10morphology_AdvType_tim,
  __pyx_e_5spacy_10morphology_AdvType_deg,
  __pyx_e_5spacy_10morphology_AdvType_cau,
  __pyx_e_5spacy_10morphology_AdvType_mod,
  __pyx_e_5spacy_10morphology_AdvType_sta,
  __pyx_e_5spacy_10morphology_AdvType_ex,
  __pyx_e_5spacy_10morphology_AdvType_adadj,
  __pyx_e_5spacy_10morphology_ConjType_oper,
  __pyx_e_5spacy_10morphology_ConjType_comp,
  __pyx_e_5spacy_10morphology_Connegative_yes,
  __pyx_e_5spacy_10morphology_Derivation_minen,
  __pyx_e_5spacy_10morphology_Derivation_sti,
  __pyx_e_5spacy_10morphology_Derivation_inen,
  __pyx_e_5spacy_10morphology_Derivation_lainen,
  __pyx_e_5spacy_10morphology_Derivation_ja,
  __pyx_e_5spacy_10morphology_Derivation_ton,
  __pyx_e_5spacy_10morphology_Derivation_vs,
  __pyx_e_5spacy_10morphology_Derivation_ttain,
  __pyx_e_5spacy_10morphology_Derivation_ttaa,
  __pyx_e_5spacy_10morphology_Echo_rdp,
  __pyx_e_5spacy_10morphology_Echo_ech,
  __pyx_e_5spacy_10morphology_Foreign_foreign,
  __pyx_e_5spacy_10morphology_Foreign_fscript,
  __pyx_e_5spacy_10morphology_Foreign_tscript,
  __pyx_e_5spacy_10morphology_Foreign_yes,
  __pyx_e_5spacy_10morphology_Gender_dat_masc,
  __pyx_e_5spacy_10morphology_Gender_dat_fem,
  __pyx_e_5spacy_10morphology_Gender_erg_masc,
  __pyx_e_5spacy_10morphology_Gender_erg_fem,
  __pyx_e_5spacy_10morphology_Gender_psor_masc,
  __pyx_e_5spacy_10morphology_Gender_psor_fem,
  __pyx_e_5spacy_10morphology_Gender_psor_neut,
  __pyx_e_5spacy_10morphology_Hyph_yes,
  __pyx_e_5spacy_10morphology_InfForm_one,
  __pyx_e_5spacy_10morphology_InfForm_two,
  __pyx_e_5spacy_10morphology_InfForm_three,
  __pyx_e_5spacy_10morphology_NameType_geo,
  __pyx_e_5spacy_10morphology_NameType_prs,
  __pyx_e_5spacy_10morphology_NameType_giv,
  __pyx_e_5spacy_10morphology_NameType_sur,
  __pyx_e_5spacy_10morphology_NameType_nat,
  __pyx_e_5spacy_10morphology_NameType_com,
  __pyx_e_5spacy_10morphology_NameType_pro,
  __pyx_e_5spacy_10morphology_NameType_oth,
  __pyx_e_5spacy_10morphology_NounType_com,
  __pyx_e_5spacy_10morphology_NounType_prop,
  __pyx_e_5spacy_10morphology_NounType_class,
  __pyx_e_5spacy_10morphology_Number_abs_sing,
  __pyx_e_5spacy_10morphology_Number_abs_plur,
  __pyx_e_5spacy_10morphology_Number_dat_sing,
  __pyx_e_5spacy_10morphology_Number_dat_plur,
  __pyx_e_5spacy_10morphology_Number_erg_sing,
  __pyx_e_5spacy_10morphology_Number_erg_plur,
  __pyx_e_5spacy_10morphology_Number_psee_sing,
  __pyx_e_5spacy_10morphology_Number_psee_plur,
  __pyx_e_5spacy_10morphology_Number_psor_sing,
  __pyx_e_5spacy_10morphology_Number_psor_plur,
  __pyx_e_5spacy_10morphology_NumForm_digit,
  __pyx_e_5spacy_10morphology_NumForm_roman,
  __pyx_e_5spacy_10morphology_NumForm_word,
  __pyx_e_5spacy_10morphology_NumValue_one,
  __pyx_e_5spacy_10morphology_NumValue_two,
  __pyx_e_5spacy_10morphology_NumValue_three,
  __pyx_e_5spacy_10morphology_PartForm_pres,
  __pyx_e_5spacy_10morphology_PartForm_past,
  __pyx_e_5spacy_10morphology_PartForm_agt,
  __pyx_e_5spacy_10morphology_PartForm_neg,
  __pyx_e_5spacy_10morphology_PartType_mod,
  __pyx_e_5spacy_10morphology_PartType_emp,
  __pyx_e_5spacy_10morphology_PartType_res,
  __pyx_e_5spacy_10morphology_PartType_inf,
  __pyx_e_5spacy_10morphology_PartType_vbp,
  __pyx_e_5spacy_10morphology_Person_abs_one,
  __pyx_e_5spacy_10morphology_Person_abs_two,
  __pyx_e_5spacy_10morphology_Person_abs_three,
  __pyx_e_5spacy_10morphology_Person_dat_one,
  __pyx_e_5spacy_10morphology_Person_dat_two,
  __pyx_e_5spacy_10morphology_Person_dat_three,
  __pyx_e_5spacy_10morphology_Person_erg_one,
  __pyx_e_5spacy_10morphology_Person_erg_two,
  __pyx_e_5spacy_10morphology_Person_erg_three,
  __pyx_e_5spacy_10morphology_Person_psor_one,
  __pyx_e_5spacy_10morphology_Person_psor_two,
  __pyx_e_5spacy_10morphology_Person_psor_three,
  __pyx_e_5spacy_10morphology_Polite_inf,
  __pyx_e_5spacy_10morphology_Polite_pol,
  __pyx_e_5spacy_10morphology_Polite_abs_inf,
  __pyx_e_5spacy_10morphology_Polite_abs_pol,
  __pyx_e_5spacy_10morphology_Polite_erg_inf,
  __pyx_e_5spacy_10morphology_Polite_erg_pol,
  __pyx_e_5spacy_10morphology_Polite_dat_inf,
  __pyx_e_5spacy_10morphology_Polite_dat_pol,
  __pyx_e_5spacy_10morphology_Prefix_yes,
  __pyx_e_5spacy_10morphology_PrepCase_npr,
  __pyx_e_5spacy_10morphology_PrepCase_pre,
  __pyx_e_5spacy_10morphology_PunctSide_ini,
  __pyx_e_5spacy_10morphology_PunctSide_fin,
  __pyx_e_5spacy_10morphology_PunctType_peri,
  __pyx_e_5spacy_10morphology_PunctType_qest,
  __pyx_e_5spacy_10morphology_PunctType_excl,
  __pyx_e_5spacy_10morphology_PunctType_quot,
  __pyx_e_5spacy_10morphology_PunctType_brck,
  __pyx_e_5spacy_10morphology_PunctType_comm,
  __pyx_e_5spacy_10morphology_PunctType_colo,
  __pyx_e_5spacy_10morphology_PunctType_semi,
  __pyx_e_5spacy_10morphology_PunctType_dash,
  __pyx_e_5spacy_10morphology_Style_arch,
  __pyx_e_5spacy_10morphology_Style_rare,
  __pyx_e_5spacy_10morphology_Style_poet,
  __pyx_e_5spacy_10morphology_Style_norm,
  __pyx_e_5spacy_10morphology_Style_coll,
  __pyx_e_5spacy_10morphology_Style_vrnc,
  __pyx_e_5spacy_10morphology_Style_sing,
  __pyx_e_5spacy_10morphology_Style_expr,
  __pyx_e_5spacy_10morphology_Style_derg,
  __pyx_e_5spacy_10morphology_Style_vulg,
  __pyx_e_5spacy_10morphology_Style_yes,
  __pyx_e_5spacy_10morphology_StyleVariant_styleShort,
  __pyx_e_5spacy_10morphology_StyleVariant_styleBound,
  __pyx_e_5spacy_10morphology_VerbType_aux,
  __pyx_e_5spacy_10morphology_VerbType_cop,
  __pyx_e_5spacy_10morphology_VerbType_mod,
  __pyx_e_5spacy_10morphology_VerbType_light
};

/* "morphology.pxd":13
 * 
 * 
 * cdef struct RichTagC:             # <<<<<<<<<<<<<<
 *     uint64_t morph
 *     int id
 */
struct __pyx_t_5spacy_10morphology_RichTagC {
  uint64_t morph;
  int id;
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t pos;
  __pyx_t_5spacy_8typedefs_attr_t name;
};

/* "morphology.pxd":20
 * 
 * 
 * cdef struct MorphAnalysisC:             # <<<<<<<<<<<<<<
 *     RichTagC tag
 *     attr_t lemma
 */
struct __pyx_t_5spacy_10morphology_MorphAnalysisC {
  struct __pyx_t_5spacy_10morphology_RichTagC tag;
  __pyx_t_5spacy_8typedefs_attr_t lemma;
};
union __pyx_t_5spacy_5vocab_LexemesOrTokens;
struct __pyx_t_5spacy_5vocab__Cached;

/* "vocab.pxd":16
 * 
 * 
 * cdef union LexemesOrTokens:             # <<<<<<<<<<<<<<
 *     const LexemeC* const* lexemes
 *     const TokenC* tokens
 */
union __pyx_t_5spacy_5vocab_LexemesOrTokens {
  struct __pyx_t_5spacy_7structs_LexemeC const *const *lexemes;
  struct __pyx_t_5spacy_7structs_TokenC const *tokens;
};

/* "vocab.pxd":21
 * 
 * 
 * cdef struct _Cached:             # <<<<<<<<<<<<<<
 *     LexemesOrTokens data
 *     bint is_lex
 */
struct __pyx_t_5spacy_5vocab__Cached {
  union __pyx_t_5spacy_5vocab_LexemesOrTokens data;
  int is_lex;
  int length;
};

/* "attrs.pxd":2
 * # Reserve 64 values for flag features
 * cdef enum attr_id_t:             # <<<<<<<<<<<<<<
 *     NULL_ATTR
 *     IS_ALPHA
 */
enum __pyx_t_5spacy_5attrs_attr_id_t {
  __pyx_e_5spacy_5attrs_NULL_ATTR,
  __pyx_e_5spacy_5attrs_IS_ALPHA,
  __pyx_e_5spacy_5attrs_IS_ASCII,
  __pyx_e_5spacy_5attrs_IS_DIGIT,
  __pyx_e_5spacy_5attrs_IS_LOWER,
  __pyx_e_5spacy_5attrs_IS_PUNCT,
  __pyx_e_5spacy_5attrs_IS_SPACE,
  __pyx_e_5spacy_5attrs_IS_TITLE,
  __pyx_e_5spacy_5attrs_IS_UPPER,
  __pyx_e_5spacy_5attrs_LIKE_URL,
  __pyx_e_5spacy_5attrs_LIKE_NUM,
  __pyx_e_5spacy_5attrs_LIKE_EMAIL,
  __pyx_e_5spacy_5attrs_IS_STOP,
  __pyx_e_5spacy_5attrs_IS_OOV,
  __pyx_e_5spacy_5attrs_IS_BRACKET,
  __pyx_e_5spacy_5attrs_IS_QUOTE,
  __pyx_e_5spacy_5attrs_IS_LEFT_PUNCT,
  __pyx_e_5spacy_5attrs_IS_RIGHT_PUNCT,
  __pyx_e_5spacy_5attrs_IS_CURRENCY,
  __pyx_e_5spacy_5attrs_FLAG19 = 19,
  __pyx_e_5spacy_5attrs_FLAG20,
  __pyx_e_5spacy_5attrs_FLAG21,
  __pyx_e_5spacy_5attrs_FLAG22,
  __pyx_e_5spacy_5attrs_FLAG23,
  __pyx_e_5spacy_5attrs_FLAG24,
  __pyx_e_5spacy_5attrs_FLAG25,
  __pyx_e_5spacy_5attrs_FLAG26,
  __pyx_e_5spacy_5attrs_FLAG27,
  __pyx_e_5spacy_5attrs_FLAG28,
  __pyx_e_5spacy_5attrs_FLAG29,
  __pyx_e_5spacy_5attrs_FLAG30,
  __pyx_e_5spacy_5attrs_FLAG31,
  __pyx_e_5spacy_5attrs_FLAG32,
  __pyx_e_5spacy_5attrs_FLAG33,
  __pyx_e_5spacy_5attrs_FLAG34,
  __pyx_e_5spacy_5attrs_FLAG35,
  __pyx_e_5spacy_5attrs_FLAG36,
  __pyx_e_5spacy_5attrs_FLAG37,
  __pyx_e_5spacy_5attrs_FLAG38,
  __pyx_e_5spacy_5attrs_FLAG39,
  __pyx_e_5spacy_5attrs_FLAG40,
  __pyx_e_5spacy_5attrs_FLAG41,
  __pyx_e_5spacy_5attrs_FLAG42,
  __pyx_e_5spacy_5attrs_FLAG43,
  __pyx_e_5spacy_5attrs_FLAG44,
  __pyx_e_5spacy_5attrs_FLAG45,
  __pyx_e_5spacy_5attrs_FLAG46,
  __pyx_e_5spacy_5attrs_FLAG47,
  __pyx_e_5spacy_5attrs_FLAG48,
  __pyx_e_5spacy_5attrs_FLAG49,
  __pyx_e_5spacy_5attrs_FLAG50,
  __pyx_e_5spacy_5attrs_FLAG51,
  __pyx_e_5spacy_5attrs_FLAG52,
  __pyx_e_5spacy_5attrs_FLAG53,
  __pyx_e_5spacy_5attrs_FLAG54,
  __pyx_e_5spacy_5attrs_FLAG55,
  __pyx_e_5spacy_5attrs_FLAG56,
  __pyx_e_5spacy_5attrs_FLAG57,
  __pyx_e_5spacy_5attrs_FLAG58,
  __pyx_e_5spacy_5attrs_FLAG59,
  __pyx_e_5spacy_5attrs_FLAG60,
  __pyx_e_5spacy_5attrs_FLAG61,
  __pyx_e_5spacy_5attrs_FLAG62,
  __pyx_e_5spacy_5attrs_FLAG63,
  __pyx_e_5spacy_5attrs_ID,
  __pyx_e_5spacy_5attrs_ORTH,
  __pyx_e_5spacy_5attrs_LOWER,
  __pyx_e_5spacy_5attrs_NORM,
  __pyx_e_5spacy_5attrs_SHAPE,
  __pyx_e_5spacy_5attrs_PREFIX,
  __pyx_e_5spacy_5attrs_SUFFIX,
  __pyx_e_5spacy_5attrs_LENGTH,
  __pyx_e_5spacy_5attrs_CLUSTER,
  __pyx_e_5spacy_5attrs_LEMMA,
  __pyx_e_5spacy_5attrs_POS,
  __pyx_e_5spacy_5attrs_TAG,
  __pyx_e_5spacy_5attrs_DEP,
  __pyx_e_5spacy_5attrs_ENT_IOB,
  __pyx_e_5spacy_5attrs_ENT_TYPE,
  __pyx_e_5spacy_5attrs_HEAD,
  __pyx_e_5spacy_5attrs_SENT_START,
  __pyx_e_5spacy_5attrs_SPACY,
  __pyx_e_5spacy_5attrs_PROB,
  __pyx_e_5spacy_5attrs_LANG
};

/* "spacy/tokens/doc.pxd":14
 * 
 * 
 * ctypedef const LexemeC* const_Lexeme_ptr             # <<<<<<<<<<<<<<
 * ctypedef const TokenC* const_TokenC_ptr
 * 
 */
typedef struct __pyx_t_5spacy_7structs_LexemeC const *__pyx_t_5spacy_6tokens_3doc_const_Lexeme_ptr;

/* "spacy/tokens/doc.pxd":15
 * 
 * ctypedef const LexemeC* const_Lexeme_ptr
 * ctypedef const TokenC* const_TokenC_ptr             # <<<<<<<<<<<<<<
 * 
 * ctypedef fused LexemeOrToken:
 */
typedef struct __pyx_t_5spacy_7structs_TokenC const *__pyx_t_5spacy_6tokens_3doc_const_TokenC_ptr;
struct __pyx_t_11neuralcoref_8document_SpanC;
struct __pyx_t_11neuralcoref_8document_SentSpans;
struct __pyx_t_11neuralcoref_8document_Hashes;
struct __pyx_t_11neuralcoref_8document_HashesList;
struct __pyx_t_11neuralcoref_8document_DocSpan;
struct __pyx_opt_args_11neuralcoref_8document_enlarge_span;
struct __pyx_opt_args_11neuralcoref_8document_add_span;
struct __pyx_opt_args_11neuralcoref_8document__extract_from_sent;
struct __pyx_opt_args_11neuralcoref_8document_extract_mentions_spans;

/* "neuralcoref/document.pxd":7
 * from spacy.structs cimport TokenC
 * 
 * cdef struct SpanC:             # <<<<<<<<<<<<<<
 *     int start
 *     int end
 */
struct __pyx_t_11neuralcoref_8document_SpanC {
  int start;
  int end;
};

/* "neuralcoref/document.pxd":11
 *     int end
 * 
 * cdef struct SentSpans:             # <<<<<<<<<<<<<<
 *     SpanC* spans
 *     int max_spans
 */
struct __pyx_t_11neuralcoref_8document_SentSpans {
  struct __pyx_t_11neuralcoref_8document_SpanC *spans;
  int max_spans;
  int num;
};

/* "neuralcoref/document.pxd":16
 *     int num
 * 
 * cdef struct Hashes:             # <<<<<<<<<<<<<<
 *     attr_t* arr
 *     int length
 */
struct __pyx_t_11neuralcoref_8document_Hashes {
  __pyx_t_5spacy_8typedefs_attr_t *arr;
  int length;
};

/* "neuralcoref/document.pxd":20
 *     int length
 * 
 * cdef struct HashesList:             # <<<<<<<<<<<<<<
 *     Hashes no_coref_list
 *     Hashes keep_tags
 */
struct __pyx_t_11neuralcoref_8document_HashesList {
  struct __pyx_t_11neuralcoref_8document_Hashes no_coref_list;
  struct __pyx_t_11neuralcoref_8document_Hashes keep_tags;
  struct __pyx_t_11neuralcoref_8document_Hashes PRP_tags;
  struct __pyx_t_11neuralcoref_8document_Hashes leave_dep;
  struct __pyx_t_11neuralcoref_8document_Hashes keep_dep;
  struct __pyx_t_11neuralcoref_8document_Hashes nsubj_or_dep;
  struct __pyx_t_11neuralcoref_8document_Hashes conj_or_prep;
  struct __pyx_t_11neuralcoref_8document_Hashes remove_pos;
  struct __pyx_t_11neuralcoref_8document_Hashes lower_not_end;
  __pyx_t_5spacy_8typedefs_attr_t POSSESSIVE_MARK;
  __pyx_t_5spacy_8typedefs_attr_t NSUBJ_MARK;
  __pyx_t_5spacy_8typedefs_attr_t IN_TAG;
  __pyx_t_5spacy_8typedefs_attr_t MARK_DEP;
};

/* "neuralcoref/document.pxd":35
 *     attr_t MARK_DEP
 * 
 * cdef struct DocSpan:             # <<<<<<<<<<<<<<
 *     const TokenC* c
 *     const int start
 */
struct __pyx_t_11neuralcoref_8document_DocSpan {
  struct __pyx_t_5spacy_7structs_TokenC const *c;
  int const start;
  int const end;
};

/* "neuralcoref/document.pyx":101
 * 
 * # Utility to remove bad endings
 * cdef enlarge_span(TokenC* doc_c, int i, int sent_start, int sent_end, int test,             # <<<<<<<<<<<<<<
 *                   HashesList hashes, StringStore store, bint debug=True):
 *     cdef int j
 */
struct __pyx_opt_args_11neuralcoref_8document_enlarge_span {
  int __pyx_n;
  int debug;
};

/* "neuralcoref/document.pyx":154
 *     return minchild_idx, maxchild_idx + 1
 * 
 * cdef add_span(int start, int end, SentSpans* mentions_spans, TokenC* doc_c, StringStore store, bint debug=True):             # <<<<<<<<<<<<<<
 *     cdef int num = mentions_spans.num
 *     if debug:
 */
struct __pyx_opt_args_11neuralcoref_8document_add_span {
  int __pyx_n;
  int debug;
};

/* "neuralcoref/document.pyx":166
 *     return mentions_spans.num >= mentions_spans.max_spans
 * 
 * cdef _extract_from_sent(TokenC* doc_c, int sent_start, int sent_end, SentSpans* mentions_spans,             # <<<<<<<<<<<<<<
 *                         HashesList hashes, StringStore store, bint use_no_coref_list=True, bint debug=True):
 *     '''
 */
struct __pyx_opt_args_11neuralcoref_8document__extract_from_sent {
  int __pyx_n;
  int use_no_coref_list;
  int debug;
};

/* "neuralcoref/document.pyx":278
 *     return
 * 
 * cdef extract_mentions_spans(Doc doc, bint use_no_coref_list=True, bint debug=True):             # <<<<<<<<<<<<<<
 *     '''
 *     Extract potential mentions from a spacy parsed Doc
 */
struct __pyx_opt_args_11neuralcoref_8document_extract_mentions_spans {
  int __pyx_n;
  int use_no_coref_list;
  int debug;
};

/* "cymem/cymem.pxd":1
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */
struct __pyx_obj_5cymem_5cymem_Pool {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtab;
  size_t size;
  PyObject *addresses;
  PyObject *refs;
};


/* "cymem/cymem.pxd":11
 * 
 * 
 * cdef class Address:             # <<<<<<<<<<<<<<
 *     cdef void* ptr
 */
struct __pyx_obj_5cymem_5cymem_Address {
  PyObject_HEAD
  void *ptr;
};


/* "maps.pxd":36
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */
struct __pyx_obj_7preshed_4maps_PreshMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtab;
  struct __pyx_t_7preshed_4maps_MapStruct *c_map;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
};


/* "maps.pxd":44
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */
struct __pyx_obj_7preshed_4maps_PreshMapArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_7preshed_4maps_MapStruct *maps;
  size_t length;
};


/* "preshed/counter.pxd":13
 * 
 * 
 * cdef class PreshCounter:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* c_map
 */
struct __pyx_obj_7preshed_7counter_PreshCounter {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_7counter_PreshCounter *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_7preshed_4maps_MapStruct *c_map;
  PyObject *smoother;
  __pyx_t_7preshed_7counter_count_t total;
};


/* "strings.pxd":23
 * 
 * 
 * cdef class StringStore:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 * 
 */
struct __pyx_obj_5spacy_7strings_StringStore {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_7strings_StringStore *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  std::vector<__pyx_t_5spacy_8typedefs_hash_t>  keys;
  std::set<__pyx_t_5spacy_8typedefs_hash_t>  hits;
  struct __pyx_obj_7preshed_4maps_PreshMap *_map;
};


/* "morphology.pxd":25
 * 
 * 
 * cdef class Morphology:             # <<<<<<<<<<<<<<
 *     cdef readonly Pool mem
 *     cdef readonly StringStore strings
 */
struct __pyx_obj_5spacy_10morphology_Morphology {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_10morphology_Morphology *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_5spacy_7strings_StringStore *strings;
  PyObject *lemmatizer;
  PyObject *tag_map;
  PyObject *n_tags;
  PyObject *reverse_index;
  PyObject *tag_names;
  PyObject *exc;
  struct __pyx_t_5spacy_10morphology_RichTagC *rich_tags;
  struct __pyx_obj_7preshed_4maps_PreshMapArray *_cache;
};


/* "vocab.pxd":27
 * 
 * 
 * cdef class Vocab:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cpdef readonly StringStore strings
 */
struct __pyx_obj_5spacy_5vocab_Vocab {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_5vocab_Vocab *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_5spacy_7strings_StringStore *strings;
  struct __pyx_obj_5spacy_10morphology_Morphology *morphology;
  PyObject *vectors;
  int length;
  PyObject *data_dir;
  PyObject *lex_attr_getters;
  PyObject *cfg;
  struct __pyx_obj_7preshed_4maps_PreshMap *_by_hash;
  struct __pyx_obj_7preshed_4maps_PreshMap *_by_orth;
};


/* "spacy/tokens/doc.pxd":30
 * cdef int set_children_from_heads(TokenC* tokens, int length) except -1
 * 
 * cdef class Doc:             # <<<<<<<<<<<<<<
 *     cdef readonly Pool mem
 *     cdef readonly Vocab vocab
 */
struct __pyx_obj_5spacy_6tokens_3doc_Doc {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_6tokens_3doc_Doc *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_5spacy_5vocab_Vocab *vocab;
  PyObject *_vector;
  PyObject *_vector_norm;
  PyObject *tensor;
  PyObject *cats;
  PyObject *user_data;
  struct __pyx_t_5spacy_7structs_TokenC *c;
  int is_tagged;
  int is_parsed;
  float sentiment;
  PyObject *user_hooks;
  PyObject *user_token_hooks;
  PyObject *user_span_hooks;
  PyObject *_py_tokens;
  int length;
  int max_length;
  PyObject *noun_chunks_iterator;
  PyObject *__weakref__;
};


/* "spacy/tokens/span.pxd":7
 * 
 * 
 * cdef class Span:             # <<<<<<<<<<<<<<
 *     cdef readonly Doc doc
 *     cdef readonly int start
 */
struct __pyx_obj_5spacy_6tokens_4span_Span {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_6tokens_4span_Span *__pyx_vtab;
  struct __pyx_obj_5spacy_6tokens_3doc_Doc *doc;
  int start;
  int end;
  int start_char;
  int end_char;
  __pyx_t_5spacy_8typedefs_attr_t label;
  PyObject *_vector;
  PyObject *_vector_norm;
};


/* "neuralcoref/document.pxd":40
 *     const int end
 * 
 * cdef class Mention:             # <<<<<<<<<<<<<<
 *     cdef readonly Span span
 *     cdef readonly long entity_label
 */
struct __pyx_obj_11neuralcoref_8document_Mention {
  PyObject_HEAD
  struct __pyx_vtabstruct_11neuralcoref_8document_Mention *__pyx_vtab;
  struct __pyx_obj_5spacy_6tokens_4span_Span *span;
  long entity_label;
  int in_ent;
  int index;
  int utterance_index;
  int utterances_sent;
  int mention_type;
  PyObject *propers;
  PyObject *spans_embeddings;
  PyObject *words_embeddings;
  PyObject *embeddings;
  PyObject *features;
  PyObject *spans_embeddings_;
  PyObject *words_embeddings_;
  PyObject *features_;
};


/* "neuralcoref/document.pxd":63
 *     cpdef int overlapping(self, Mention m2)
 * 
 * cdef class Document:             # <<<<<<<<<<<<<<
 *     cdef readonly object nlp
 *     cdef readonly bint use_no_coref_list
 */
struct __pyx_obj_11neuralcoref_8document_Document {
  PyObject_HEAD
  PyObject *nlp;
  int use_no_coref_list;
  int debug;
  PyObject *utterances;
  PyObject *mentions;
  int n_sents;
  int n_mentions;
  int n_pairs;
  PyObject *pairs_ant;
  PyObject *pairs_men;
  PyObject *genre_;
  PyObject *genre;
  PyObject *embed_extractor;
};


/* "neuralcoref/document.pyx":70
 *     return False
 * 
 * cdef HashesList get_hash_lookups(StringStore store):             # <<<<<<<<<<<<<<
 *     cdef HashesList hashes
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups {
  PyObject_HEAD
  struct __pyx_obj_5spacy_7strings_StringStore *__pyx_v_store;
};


/* "neuralcoref/document.pyx":72
 * cdef HashesList get_hash_lookups(StringStore store):
 *     cdef HashesList hashes
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *__pyx_outer_scope;
  PyObject *__pyx_v_st;
};


/* "neuralcoref/document.pyx":73
 *     cdef HashesList hashes
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *__pyx_outer_scope;
  PyObject *__pyx_v_st;
};


/* "neuralcoref/document.pyx":74
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *__pyx_outer_scope;
  PyObject *__pyx_v_st;
};


/* "neuralcoref/document.pyx":75
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *__pyx_outer_scope;
  PyObject *__pyx_v_st;
};


/* "neuralcoref/document.pyx":76
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *__pyx_outer_scope;
  PyObject *__pyx_v_st;
};


/* "neuralcoref/document.pyx":77
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *__pyx_outer_scope;
  PyObject *__pyx_v_st;
};


/* "neuralcoref/document.pyx":78
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *__pyx_outer_scope;
  PyObject *__pyx_v_st;
};


/* "neuralcoref/document.pyx":79
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *__pyx_outer_scope;
  PyObject *__pyx_v_st;
};


/* "neuralcoref/document.pyx":80
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")
 *     cdef attr_t NSUBJ_MARK = store.add("nsubj")
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *__pyx_outer_scope;
  PyObject *__pyx_v_st;
};


/* "neuralcoref/document.pyx":154
 *     return minchild_idx, maxchild_idx + 1
 * 
 * cdef add_span(int start, int end, SentSpans* mentions_spans, TokenC* doc_c, StringStore store, bint debug=True):             # <<<<<<<<<<<<<<
 *     cdef int num = mentions_spans.num
 *     if debug:
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span {
  PyObject_HEAD
  struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_doc_c;
  int __pyx_v_end;
  int __pyx_v_start;
  struct __pyx_obj_5spacy_7strings_StringStore *__pyx_v_store;
};


/* "neuralcoref/document.pyx":157
 *     cdef int num = mentions_spans.num
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))             # <<<<<<<<<<<<<<
 *     mentions_spans.spans[num].start = start
 *     mentions_spans.spans[num].end = end
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *__pyx_outer_scope;
  int __pyx_v_i;
};


/* "neuralcoref/document.pyx":162
 *     mentions_spans.num += 1
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))             # <<<<<<<<<<<<<<
 *         print(" mentions_spans.num: ", mentions_spans.num)
 *     return mentions_spans.num >= mentions_spans.max_spans
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *__pyx_outer_scope;
  int __pyx_v_i;
};


/* "neuralcoref/document.pyx":278
 *     return
 * 
 * cdef extract_mentions_spans(Doc doc, bint use_no_coref_list=True, bint debug=True):             # <<<<<<<<<<<<<<
 *     '''
 *     Extract potential mentions from a spacy parsed Doc
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans {
  PyObject_HEAD
  struct __pyx_obj_5spacy_6tokens_3doc_Doc *__pyx_v_doc;
  PyObject *__pyx_v_mentions_spans;
};


/* "neuralcoref/document.pyx":292
 *         if debug: print(" span search:", c, "head:", c.head, "tag:", c.tag_, "pos:", c.pos_, "dep:", c.dep_)
 *     # Named entities
 *     mentions_spans = list(ent for ent in doc.ents if ent.label_ in ACCEPTED_ENTS)             # <<<<<<<<<<<<<<
 * 
 *     # Setup for fast scanning
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *__pyx_outer_scope;
  PyObject *__pyx_v_ent;
};


/* "neuralcoref/document.pyx":305
 *     hashes = get_hash_lookups(doc.vocab.strings)
 * 
 *     if debug: print("==-- ents:", list(((ent, ent.label_) for ent in mentions_spans)))             # <<<<<<<<<<<<<<
 *     for i, sent in enumerate(doc.sents):
 *         _extract_from_sent(doc.c, sent.start, sent.end, &sent_spans[i], hashes, doc.vocab.strings)
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *__pyx_outer_scope;
  PyObject *__pyx_v_ent;
};


/* "neuralcoref/document.pyx":342
 *     return n
 * 
 * cdef get_span_type(Span span):             # <<<<<<<<<<<<<<
 *     ''' Find the type of a Span '''
 *     conj = ["CC", ","]
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type {
  PyObject_HEAD
  PyObject *__pyx_v_conj;
  struct __pyx_obj_5spacy_6tokens_4span_Span *__pyx_v_span;
};


/* "neuralcoref/document.pyx":347
 *     prp = ["PRP", "PRP$"]
 *     proper = ["NNP", "NNPS"]
 *     if any(t.tag_ in conj and t.ent_type_ not in ACCEPTED_ENTS for t in span):             # <<<<<<<<<<<<<<
 *         mention_type = MENTION_TYPE["LIST"]
 *     elif span.root.tag_ in prp:
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *__pyx_outer_scope;
  PyObject *__pyx_v_t;
};


/* "neuralcoref/document.pyx":411
 *     property content_words:
 *         ''' Returns an iterator of nouns/proper nouns in the Mention '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (tok.lower_ for tok in self.span if tok.tag_ in PROPERS_TAGS)
 * 
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self;
};


/* "neuralcoref/document.pyx":412
 *         ''' Returns an iterator of nouns/proper nouns in the Mention '''
 *         def __get__(self):
 *             return (tok.lower_ for tok in self.span if tok.tag_ in PROPERS_TAGS)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *__pyx_outer_scope;
  PyObject *__pyx_v_tok;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "neuralcoref/document.pyx":616
 *         return conll, genre
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return '<utterances> \n {}\n<mentions> \n {}' \
 *                 .format('\n '.join(unicode_(i) for i in self.utterances),
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self;
};


/* "neuralcoref/document.pyx":618
 *     def __str__(self):
 *         return '<utterances> \n {}\n<mentions> \n {}' \
 *                 .format('\n '.join(unicode_(i) for i in self.utterances),             # <<<<<<<<<<<<<<
 *                         '\n '.join(unicode_(i) for i in self.mentions))
 * 
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *__pyx_outer_scope;
  PyObject *__pyx_v_i;
};


/* "neuralcoref/document.pyx":619
 *         return '<utterances> \n {}\n<mentions> \n {}' \
 *                 .format('\n '.join(unicode_(i) for i in self.utterances),
 *                         '\n '.join(unicode_(i) for i in self.mentions))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *__pyx_outer_scope;
  PyObject *__pyx_v_i;
};


/* "neuralcoref/document.pyx":629
 *         return self.mentions[key]
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         ''' Iterate over mentions (not utterances) '''
 *         for mention in self.mentions:
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ {
  PyObject_HEAD
  PyObject *__pyx_v_mention;
  struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "neuralcoref/document.pyx":675
 *     ###################################
 * 
 *     def _process_mentions(self, mentions_spans, utterance_index, n_sents):             # <<<<<<<<<<<<<<
 *         '''
 *         Process mentions in a spacy doc (an utterance)
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions {
  PyObject_HEAD
  PyObject *__pyx_v_mentions_spans;
};


/* "neuralcoref/document.pyx":679
 *         Process mentions in a spacy doc (an utterance)
 *         '''
 *         processed_spans = sorted((m for m in mentions_spans), key=lambda m: (m.root.i, m.start))             # <<<<<<<<<<<<<<
 *         for mention_index, span in enumerate(processed_spans):
 *             self.mentions.append(Mention(span, mention_index + self.n_mentions,
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *__pyx_outer_scope;
  PyObject *__pyx_v_m;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "neuralcoref/document.pyx":685
 *             self.n_mentions += 1
 * 
 *     def set_mentions_features(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Compute features for the extracted mentions
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features {
  PyObject_HEAD
  PyObject *__pyx_v_mention;
  struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self;
};


/* "neuralcoref/document.pyx":697
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention
 *                                                           and m.utterances_sent == mention.utterances_sent             # <<<<<<<<<<<<<<
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)
 */
struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr {
  PyObject_HEAD
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *__pyx_outer_scope;
  PyObject *__pyx_v_m;
};



/* "cymem/cymem.pxd":1
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */

struct __pyx_vtabstruct_5cymem_5cymem_Pool {
  void *(*alloc)(struct __pyx_obj_5cymem_5cymem_Pool *, size_t, size_t);
  void (*free)(struct __pyx_obj_5cymem_5cymem_Pool *, void *);
  void *(*realloc)(struct __pyx_obj_5cymem_5cymem_Pool *, void *, size_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtabptr_5cymem_5cymem_Pool;


/* "maps.pxd":36
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMap {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtabptr_7preshed_4maps_PreshMap;


/* "maps.pxd":44
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtabptr_7preshed_4maps_PreshMapArray;


/* "preshed/counter.pxd":13
 * 
 * 
 * cdef class PreshCounter:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* c_map
 */

struct __pyx_vtabstruct_7preshed_7counter_PreshCounter {
  int (*inc)(struct __pyx_obj_7preshed_7counter_PreshCounter *, __pyx_t_7preshed_4maps_key_t, __pyx_t_7preshed_7counter_count_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7preshed_7counter_PreshCounter *__pyx_vtabptr_7preshed_7counter_PreshCounter;


/* "strings.pxd":23
 * 
 * 
 * cdef class StringStore:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 * 
 */

struct __pyx_vtabstruct_5spacy_7strings_StringStore {
  __pyx_t_5spacy_7strings_Utf8Str const *(*intern_unicode)(struct __pyx_obj_5spacy_7strings_StringStore *, PyObject *);
  __pyx_t_5spacy_7strings_Utf8Str const *(*_intern_utf8)(struct __pyx_obj_5spacy_7strings_StringStore *, char *, int);
};
static struct __pyx_vtabstruct_5spacy_7strings_StringStore *__pyx_vtabptr_5spacy_7strings_StringStore;


/* "morphology.pxd":25
 * 
 * 
 * cdef class Morphology:             # <<<<<<<<<<<<<<
 *     cdef readonly Pool mem
 *     cdef readonly StringStore strings
 */

struct __pyx_vtabstruct_5spacy_10morphology_Morphology {
  int (*assign_untagged)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *);
  int (*assign_tag)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *, PyObject *);
  int (*assign_tag_id)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *, int);
  int (*assign_feature)(struct __pyx_obj_5spacy_10morphology_Morphology *, uint64_t *, enum __pyx_t_5spacy_10morphology_univ_morph_t, int);
};
static struct __pyx_vtabstruct_5spacy_10morphology_Morphology *__pyx_vtabptr_5spacy_10morphology_Morphology;


/* "vocab.pxd":27
 * 
 * 
 * cdef class Vocab:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cpdef readonly StringStore strings
 */

struct __pyx_vtabstruct_5spacy_5vocab_Vocab {
  struct __pyx_t_5spacy_7structs_LexemeC const *(*get)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, PyObject *);
  struct __pyx_t_5spacy_7structs_LexemeC const *(*get_by_orth)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, __pyx_t_5spacy_8typedefs_attr_t);
  struct __pyx_t_5spacy_7structs_TokenC const *(*make_fused_token)(struct __pyx_obj_5spacy_5vocab_Vocab *, PyObject *);
  struct __pyx_t_5spacy_7structs_LexemeC const *(*_new_lexeme)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, PyObject *);
  int (*_add_lex_to_vocab)(struct __pyx_obj_5spacy_5vocab_Vocab *, __pyx_t_5spacy_8typedefs_hash_t, struct __pyx_t_5spacy_7structs_LexemeC const *);
};
static struct __pyx_vtabstruct_5spacy_5vocab_Vocab *__pyx_vtabptr_5spacy_5vocab_Vocab;


/* "spacy/tokens/doc.pxd":30
 * cdef int set_children_from_heads(TokenC* tokens, int length) except -1
 * 
 * cdef class Doc:             # <<<<<<<<<<<<<<
 *     cdef readonly Pool mem
 *     cdef readonly Vocab vocab
 */

struct __pyx_vtabstruct_5spacy_6tokens_3doc_Doc {
  PyArrayObject *(*to_array)(struct __pyx_obj_5spacy_6tokens_3doc_Doc *, PyObject *, int __pyx_skip_dispatch);
  void (*set_parse)(struct __pyx_obj_5spacy_6tokens_3doc_Doc *, struct __pyx_t_5spacy_7structs_TokenC const *);
  int (*__pyx_fuse_0push_back)(struct __pyx_obj_5spacy_6tokens_3doc_Doc *, __pyx_t_5spacy_6tokens_3doc_const_Lexeme_ptr, int);
  int (*__pyx_fuse_1push_back)(struct __pyx_obj_5spacy_6tokens_3doc_Doc *, __pyx_t_5spacy_6tokens_3doc_const_TokenC_ptr, int);
};
static struct __pyx_vtabstruct_5spacy_6tokens_3doc_Doc *__pyx_vtabptr_5spacy_6tokens_3doc_Doc;


/* "spacy/tokens/span.pxd":7
 * 
 * 
 * cdef class Span:             # <<<<<<<<<<<<<<
 *     cdef readonly Doc doc
 *     cdef readonly int start
 */

struct __pyx_vtabstruct_5spacy_6tokens_4span_Span {
  int (*_recalculate_indices)(struct __pyx_obj_5spacy_6tokens_4span_Span *, int __pyx_skip_dispatch);
  PyArrayObject *(*to_array)(struct __pyx_obj_5spacy_6tokens_4span_Span *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5spacy_6tokens_4span_Span *__pyx_vtabptr_5spacy_6tokens_4span_Span;


/* "neuralcoref/document.pyx":378
 *     return label
 * 
 * cdef class Mention():             # <<<<<<<<<<<<<<
 *     '''
 *     A mention (possible anaphor) comprise a spacy Span class with additional informations
 */

struct __pyx_vtabstruct_11neuralcoref_8document_Mention {
  int (*heads_agree)(struct __pyx_obj_11neuralcoref_8document_Mention *, struct __pyx_obj_11neuralcoref_8document_Mention *, int __pyx_skip_dispatch);
  int (*exact_match)(struct __pyx_obj_11neuralcoref_8document_Mention *, struct __pyx_obj_11neuralcoref_8document_Mention *, int __pyx_skip_dispatch);
  int (*relaxed_match)(struct __pyx_obj_11neuralcoref_8document_Mention *, struct __pyx_obj_11neuralcoref_8document_Mention *, int __pyx_skip_dispatch);
  int (*overlapping)(struct __pyx_obj_11neuralcoref_8document_Mention *, struct __pyx_obj_11neuralcoref_8document_Mention *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_11neuralcoref_8document_Mention *__pyx_vtabptr_11neuralcoref_8document_Mention;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->exc_type, &(self)->exc_value, &(self)->exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(self);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->exc_type, (self)->exc_value, (self)->exc_traceback);\
    (self)->exc_type = (self)->exc_value = (self)->exc_traceback = NULL;\
    }
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_11neuralcoref_8document_7Mention_heads_agree(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_11neuralcoref_8document_7Mention_exact_match(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_11neuralcoref_8document_7Mention_relaxed_match(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_11neuralcoref_8document_7Mention_overlapping(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_m2, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cymem.cymem' */
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Pool = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Address = 0;

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'preshed.maps' */
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMap = 0;
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMapArray = 0;
static void *(*__pyx_f_7preshed_4maps_map_get)(struct __pyx_t_7preshed_4maps_MapStruct const *, __pyx_t_7preshed_4maps_key_t const ); /*proto*/
static void (*__pyx_f_7preshed_4maps_map_set)(struct __pyx_obj_5cymem_5cymem_Pool *, struct __pyx_t_7preshed_4maps_MapStruct *, __pyx_t_7preshed_4maps_key_t, void *); /*proto*/
static void (*__pyx_f_7preshed_4maps_map_init)(struct __pyx_obj_5cymem_5cymem_Pool *, struct __pyx_t_7preshed_4maps_MapStruct *, size_t); /*proto*/

/* Module declarations from 'preshed.counter' */
static PyTypeObject *__pyx_ptype_7preshed_7counter_PreshCounter = 0;

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'murmurhash.mrmr' */
static uint64_t (*__pyx_f_10murmurhash_4mrmr_hash64)(void *, int, uint64_t); /*proto*/

/* Module declarations from 'spacy.typedefs' */

/* Module declarations from 'spacy' */

/* Module declarations from 'spacy.symbols' */

/* Module declarations from 'spacy.parts_of_speech' */

/* Module declarations from 'spacy.structs' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'spacy.strings' */
static PyTypeObject *__pyx_ptype_5spacy_7strings_StringStore = 0;

/* Module declarations from 'spacy.morphology' */
static PyTypeObject *__pyx_ptype_5spacy_10morphology_Morphology = 0;

/* Module declarations from 'spacy.vocab' */
static PyTypeObject *__pyx_ptype_5spacy_5vocab_Vocab = 0;
static struct __pyx_t_5spacy_7structs_LexemeC *__pyx_vp_5spacy_5vocab_EMPTY_LEXEME = 0;
#define __pyx_v_5spacy_5vocab_EMPTY_LEXEME (*__pyx_vp_5spacy_5vocab_EMPTY_LEXEME)

/* Module declarations from 'spacy.attrs' */

/* Module declarations from 'spacy.tokens.doc' */
static PyTypeObject *__pyx_ptype_5spacy_6tokens_3doc_Doc = 0;

/* Module declarations from 'spacy.tokens.span' */
static PyTypeObject *__pyx_ptype_5spacy_6tokens_4span_Span = 0;

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'neuralcoref.document' */
static PyTypeObject *__pyx_ptype_11neuralcoref_8document_Mention = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document_Document = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_2_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_4_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_5_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_6_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_7_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_8_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_9_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_11_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_12_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_14_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_15_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_17_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_18___get__ = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_19_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_20___str__ = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_21_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_22_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_23___iter__ = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_24__process_mentions = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_25_genexpr = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features = 0;
static PyTypeObject *__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_27_genexpr = 0;
static int __pyx_f_11neuralcoref_8document_inside(__pyx_t_5spacy_8typedefs_attr_t, struct __pyx_t_11neuralcoref_8document_Hashes); /*proto*/
static struct __pyx_t_11neuralcoref_8document_HashesList __pyx_f_11neuralcoref_8document_get_hash_lookups(struct __pyx_obj_5spacy_7strings_StringStore *); /*proto*/
static PyObject *__pyx_f_11neuralcoref_8document_enlarge_span(struct __pyx_t_5spacy_7structs_TokenC *, int, int, int, int, struct __pyx_t_11neuralcoref_8document_HashesList, struct __pyx_obj_5spacy_7strings_StringStore *, struct __pyx_opt_args_11neuralcoref_8document_enlarge_span *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_11neuralcoref_8document_add_span(int, int, struct __pyx_t_11neuralcoref_8document_SentSpans *, struct __pyx_t_5spacy_7structs_TokenC *, struct __pyx_obj_5spacy_7strings_StringStore *, struct __pyx_opt_args_11neuralcoref_8document_add_span *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_11neuralcoref_8document__extract_from_sent(struct __pyx_t_5spacy_7structs_TokenC *, int, int, struct __pyx_t_11neuralcoref_8document_SentSpans *, struct __pyx_t_11neuralcoref_8document_HashesList, struct __pyx_obj_5spacy_7strings_StringStore *, struct __pyx_opt_args_11neuralcoref_8document__extract_from_sent *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_11neuralcoref_8document_extract_mentions_spans(struct __pyx_obj_5spacy_6tokens_3doc_Doc *, struct __pyx_opt_args_11neuralcoref_8document_extract_mentions_spans *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_11neuralcoref_8document_get_span_sent_number(struct __pyx_obj_5spacy_6tokens_4span_Span *); /*proto*/
static PyObject *__pyx_f_11neuralcoref_8document_get_span_type(struct __pyx_obj_5spacy_6tokens_4span_Span *); /*proto*/
static PyObject *__pyx_f_11neuralcoref_8document_get_span_entity_label(struct __pyx_obj_5spacy_6tokens_4span_Span *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5spacy_8typedefs_attr_t = { "attr_t", NULL, sizeof(__pyx_t_5spacy_8typedefs_attr_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5spacy_8typedefs_attr_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5spacy_8typedefs_attr_t), 0 };
#define __Pyx_MODULE_NAME "neuralcoref.document"
extern int __pyx_module_is_main_neuralcoref__document;
int __pyx_module_is_main_neuralcoref__document = 0;

/* Implementation of 'neuralcoref.document' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_ValueError;
static const char __pyx_k_0[] = "0";
static const char __pyx_k_d[] = "\\d";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "'s";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_CC[] = "CC";
static const char __pyx_k_DT[] = "DT";
static const char __pyx_k_IN[] = "IN";
static const char __pyx_k_NN[] = "NN";
static const char __pyx_k_em[] = "em";
static const char __pyx_k_en[] = "en";
static const char __pyx_k_i2[] = " i2:";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_io[] = "io";
static const char __pyx_k_m1[] = "m1";
static const char __pyx_k_m2[] = "m2";
static const char __pyx_k_me[] = "me";
static const char __pyx_k_ms[] = "ms";
static const char __pyx_k_my[] = "my";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_st[] = "st";
static const char __pyx_k_ADP[] = "ADP";
static const char __pyx_k_GPE[] = "GPE";
static const char __pyx_k_LOC[] = "LOC";
static const char __pyx_k_NNP[] = "NNP";
static const char __pyx_k_NNS[] = "NNS";
static const char __pyx_k_ORG[] = "ORG";
static const char __pyx_k_PRP[] = "PRP";
static const char __pyx_k_UNK[] = "*UNK*";
static const char __pyx_k__10[] = " ";
static const char __pyx_k__30[] = ",";
static const char __pyx_k__44[] = ".";
static const char __pyx_k__45[] = "!";
static const char __pyx_k__46[] = "?";
static const char __pyx_k__49[] = "...";
static const char __pyx_k__53[] = "\n ";
static const char __pyx_k__75[] = ":";
static const char __pyx_k__76[] = ";";
static const char __pyx_k__77[] = "_";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_dep[] = "dep";
static const char __pyx_k_det[] = "det";
static const char __pyx_k_doc[] = "===== doc ====:";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_mat[] = "mat";
static const char __pyx_k_nlp[] = "nlp";
static const char __pyx_k_pos[] = "pos:";
static const char __pyx_k_s_2[] = "\\s+|_+";
static const char __pyx_k_six[] = "six";
static const char __pyx_k_sub[] = "sub";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tag[] = "tag:";
static const char __pyx_k_tok[] = "tok";
static const char __pyx_k_utt[] = "utt";
static const char __pyx_k_you[] = "you";
static const char __pyx_k_INTJ[] = "INTJ";
static const char __pyx_k_LIST[] = "LIST";
static const char __pyx_k_NNPS[] = "NNPS";
static const char __pyx_k_NORP[] = "NORP";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_conj[] = "conj";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dobj[] = "dobj";
static const char __pyx_k_ents[] = "ents";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_head[] = "head:";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_iobj[] = "iobj";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_load[] = "load";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mark[] = "mark";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_pipe[] = "pipe";
static const char __pyx_k_pobj[] = "pobj";
static const char __pyx_k_prep[] = "prep";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_root[] = "root";
static const char __pyx_k_s_i1[] = "'s', i1:";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_sent[] = "sent";
static const char __pyx_k_span[] = "span";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_word[] = "word";
static const char __pyx_k_your[] = "your";
static const char __pyx_k_CCONJ[] = "CCONJ";
static const char __pyx_k_EVENT[] = "EVENT";
static const char __pyx_k_PRP_2[] = "PRP$";
static const char __pyx_k_appos[] = "appos";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_conll[] = "conll";
static const char __pyx_k_debug[] = "debug";
static const char __pyx_k_dep_2[] = "dep:";
static const char __pyx_k_dep_3[] = "dep_";
static const char __pyx_k_doc_2[] = "doc";
static const char __pyx_k_doc_3[] = "__doc__";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_embed[] = "embed";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_label[] = "label_";
static const char __pyx_k_lower[] = "lower_";
static const char __pyx_k_model[] = "model";
static const char __pyx_k_ndmin[] = "ndmin";
static const char __pyx_k_nsubj[] = "nsubj";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_pos_2[] = "pos_";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_sents[] = "sents";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_spacy[] = "spacy";
static const char __pyx_k_spans[] = "spans";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_tag_2[] = "tag_";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_words[] = "words";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_04_Doc[] = "04_Doc";
static const char __pyx_k_IN_tag[] = "IN tag";
static const char __pyx_k_PERSON[] = "PERSON";
static const char __pyx_k_PROPER[] = "PROPER";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_ents_2[] = "==-- ents:";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_head_2[] = "head";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_shape2[] = "shape2";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_static[] = "static";
static const char __pyx_k_uint64[] = "uint64";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_NOMINAL[] = "NOMINAL";
static const char __pyx_k_PRODUCT[] = "PRODUCT";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_average[] = "average";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_mention[] = "mention";
static const char __pyx_k_missing[] = "<missing>";
static const char __pyx_k_n_sents[] = "n_sents";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_tok_dep[] = "tok.dep:";
static const char __pyx_k_tok_pos[] = "tok.pos:";
static const char __pyx_k_tok_tag[] = "tok.tag:";
static const char __pyx_k_tun_idx[] = "tun_idx";
static const char __pyx_k_tun_voc[] = "tun_voc";
static const char __pyx_k_unicode[] = "unicode_";
static const char __pyx_k_weights[] = "weights";
static const char __pyx_k_DocGenre[] = "DocGenre";
static const char __pyx_k_FACILITY[] = "FACILITY";
static const char __pyx_k_KEEP_DEP[] = "KEEP_DEP";
static const char __pyx_k_LANGUAGE[] = "LANGUAGE";
static const char __pyx_k_MAX_ITER[] = "MAX_ITER";
static const char __pyx_k_NP_or_IN[] = "NP or IN:";
static const char __pyx_k_PRP_TAGS[] = "PRP_TAGS";
static const char __pyx_k_compound[] = "compound";
static const char __pyx_k_encoding[] = "encoding";
static const char __pyx_k_ent_type[] = "ent_type_";
static const char __pyx_k_fallback[] = "fallback";
static const char __pyx_k_features[] = "features_";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_mentions[] = "mentions";
static const char __pyx_k_ms_lefts[] = "ms_lefts";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_sentence[] = "sentence";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_stat_idx[] = "stat_idx";
static const char __pyx_k_stat_voc[] = "stat_voc";
static const char __pyx_k_word_idx[] = "word_idx";
static const char __pyx_k_KEEP_TAGS[] = "KEEP_TAGS";
static const char __pyx_k_LEAVE_DEP[] = "LEAVE_DEP";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_ms_rights[] = "ms_rights";
static const char __pyx_k_norm_word[] = "norm_word";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_set_genre[] = "set_genre";
static const char __pyx_k_utt_embed[] = "utt_embed";
static const char __pyx_k_word_list[] = "word_list";
static const char __pyx_k_00_Mention[] = "00_Mention";
static const char __pyx_k_PRONOMINAL[] = "PRONOMINAL";
static const char __pyx_k_REMOVE_POS[] = "REMOVE_POS";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_embeddings[] = "embeddings";
static const char __pyx_k_features_2[] = "features";
static const char __pyx_k_idx_to_voc[] = "idx_to_voc";
static const char __pyx_k_isdisjoint[] = "isdisjoint";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_s_detected[] = "'s detected";
static const char __pyx_k_token_head[] = "token head:";
static const char __pyx_k_token_list[] = "token_list";
static const char __pyx_k_tuned_word[] = "tuned_word";
static const char __pyx_k_utterances[] = "utterances";
static const char __pyx_k_voc_to_idx[] = "voc_to_idx";
static const char __pyx_k_03_Sentence[] = "03_Sentence";
static const char __pyx_k_04_NextWord[] = "04_NextWord";
static const char __pyx_k_11_DocGenre[] = "11_DocGenre";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_SPAN_FACTOR[] = "SPAN_FACTOR";
static const char __pyx_k_WORK_OF_ART[] = "WORK_OF_ART";
static const char __pyx_k_antecedents[] = "antecedents";
static const char __pyx_k_concatenate[] = "concatenate";
static const char __pyx_k_exact_match[] = "exact_match";
static const char __pyx_k_heads_agree[] = "heads_agree";
static const char __pyx_k_overlapping[] = "overlapping";
static const char __pyx_k_static_word[] = "static_word";
static const char __pyx_k_zip_longest[] = "zip_longest";
static const char __pyx_k_Enlarge_span[] = "\342\232\234\357\270\217 Enlarge span";
static const char __pyx_k_MENTION_TYPE[] = "MENTION_TYPE";
static const char __pyx_k_MISSING_WORD[] = "MISSING_WORD";
static const char __pyx_k_PROPERS_TAGS[] = "PROPERS_TAGS";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_UNKNOWN_WORD[] = "UNKNOWN_WORD";
static const char __pyx_k_average_mean[] = "average_mean";
static const char __pyx_k_embed_vector[] = "embed_vector";
static const char __pyx_k_izip_longest[] = "izip_longest";
static const char __pyx_k_max_distance[] = "max_distance";
static const char __pyx_k_mention_type[] = "mention_type";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_string_types[] = "string_types";
static const char __pyx_k_03_HeadsAgree[] = "03_HeadsAgree";
static const char __pyx_k_09_M1Features[] = "09_M1Features";
static const char __pyx_k_10_M2Features[] = "10_M2Features";
static const char __pyx_k_ACCEPTED_ENTS[] = "ACCEPTED_ENTS";
static const char __pyx_k_LOWER_NOT_END[] = "LOWER_NOT_END";
static const char __pyx_k_MENTION_LABEL[] = "MENTION_LABEL";
static const char __pyx_k_NO_COREF_LIST[] = "NO_COREF_LIST";
static const char __pyx_k_content_words[] = "content_words";
static const char __pyx_k_doc_embedding[] = "doc_embedding";
static const char __pyx_k_get_stat_word[] = "get_stat_word";
static const char __pyx_k_integer_types[] = "integer_types";
static const char __pyx_k_mention_index[] = "mention_index";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_relaxed_match[] = "relaxed_match";
static const char __pyx_k_00_MentionHead[] = "00_MentionHead";
static const char __pyx_k_00_SameSpeaker[] = "00_SameSpeaker";
static const char __pyx_k_01_MentionLeft[] = "01_MentionLeft";
static const char __pyx_k_01_MentionType[] = "01_MentionType";
static const char __pyx_k_08_Overlapping[] = "08_Overlapping";
static const char __pyx_k_add_utterances[] = "add_utterances";
static const char __pyx_k_embeddings_npy[] = "_embeddings.npy";
static const char __pyx_k_en_core_web_sm[] = "en_core_web_sm";
static const char __pyx_k_mentions_spans[] = "mentions_spans";
static const char __pyx_k_normalize_word[] = "normalize_word";
static const char __pyx_k_vocabulary_txt[] = "_vocabulary.txt";
static const char __pyx_k_02_MentionRight[] = "02_MentionRight";
static const char __pyx_k_03_PreviousWord[] = "03_PreviousWord";
static const char __pyx_k_Document___iter[] = "Document.__iter__";
static const char __pyx_k_encode_distance[] = "encode_distance";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_utterance_index[] = "utterance_index";
static const char __pyx_k_utterances_list[] = "utterances_list";
static const char __pyx_k_utterances_sent[] = "utterances_sent";
static const char __pyx_k_02_MentionLength[] = "02_MentionLength";
static const char __pyx_k_keep_as_maxchild[] = "keep as maxchild";
static const char __pyx_k_keep_as_minchild[] = "keep as minchild";
static const char __pyx_k_parallel_process[] = "parallel_process";
static const char __pyx_k_process_mentions[] = "_process_mentions";
static const char __pyx_k_spans_embeddings[] = "spans_embeddings";
static const char __pyx_k_tuned_embeddings[] = "tuned_embeddings";
static const char __pyx_k_words_embeddings[] = "words_embeddings";
static const char __pyx_k_06_SecondNextWord[] = "06_SecondNextWord";
static const char __pyx_k_Adding_utterances[] = "Adding utterances";
static const char __pyx_k_maxchild_c_c_head[] = "maxchild c & c.head:";
static const char __pyx_k_minchild_c_c_head[] = "minchild c & c.head:";
static const char __pyx_k_neuralcoref_utils[] = "neuralcoref.utils";
static const char __pyx_k_static_embeddings[] = "static_embeddings";
static const char __pyx_k_use_no_coref_list[] = "use_no_coref_list";
static const char __pyx_k_02_MentionLastWord[] = "02_MentionLastWord";
static const char __pyx_k_04_IsMentionNested[] = "04_IsMentionNested";
static const char __pyx_k_07_MentionDistance[] = "07_MentionDistance";
static const char __pyx_k_07_MentionRootHead[] = "07_MentionRootHead";
static const char __pyx_k_EmbeddingExtractor[] = "EmbeddingExtractor";
static const char __pyx_k_WHITESPACE_PATTERN[] = "WHITESPACE_PATTERN";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_word_embedding[] = "get_word_embedding";
static const char __pyx_k_neuralcoref_compat[] = "neuralcoref.compat";
static const char __pyx_k_spans_embeddings_2[] = "spans_embeddings_";
static const char __pyx_k_trained_embed_path[] = "trained_embed_path";
static const char __pyx_k_words_embeddings_2[] = "words_embeddings_";
static const char __pyx_k_01_MentionFirstWord[] = "01_MentionFirstWord";
static const char __pyx_k_04_ExactStringMatch[] = "04_ExactStringMatch";
static const char __pyx_k_06_SentenceDistance[] = "06_SentenceDistance";
static const char __pyx_k_Removing_last_token[] = "Removing last token";
static const char __pyx_k_embedding_extractor[] = "embedding_extractor";
static const char __pyx_k_set_candidate_pairs[] = "set_candidate_pairs";
static const char __pyx_k_utterances_mentions[] = "<utterances> \n {}\n<mentions> \n {}";
static const char __pyx_k_Removing_first_token[] = "Removing first token";
static const char __pyx_k_get_word_in_sentence[] = "get_word_in_sentence";
static const char __pyx_k_neuralcoref_document[] = "neuralcoref.document";
static const char __pyx_k_str___locals_genexpr[] = "__str__.<locals>.genexpr";
static const char __pyx_k_05_RelaxedStringMatch[] = "05_RelaxedStringMatch";
static const char __pyx_k_05_SecondPreviousWord[] = "05_SecondPreviousWord";
static const char __pyx_k_get_average_embedding[] = "get_average_embedding";
static const char __pyx_k_get_raw_pair_features[] = "get_raw_pair_features";
static const char __pyx_k_pretrained_model_path[] = "pretrained_model_path";
static const char __pyx_k_set_mentions_features[] = "set_mentions_features";
static const char __pyx_k_utterances_start_sent[] = "utterances_start_sent";
static const char __pyx_k_02_MentionMatchSpeaker[] = "02_MentionMatchSpeaker";
static const char __pyx_k_03_MentionNormLocation[] = "03_MentionNormLocation";
static const char __pyx_k_cleaned_mentions_spans[] = "cleaned_mentions_spans";
static const char __pyx_k_get_document_embedding[] = "get_document_embedding";
static const char __pyx_k_get_mention_embeddings[] = "get_mention_embeddings";
static const char __pyx_k_token_in_no_coref_list[] = "token in no_coref_list";
static const char __pyx_k_Loading_embeddings_from[] = "Loading embeddings from";
static const char __pyx_k_add_span_locals_genexpr[] = "add_span.<locals>.genexpr";
static const char __pyx_k_max_distance_with_match[] = "max_distance_with_match";
static const char __pyx_k_mention_detection_debug[] = "mention_detection_debug";
static const char __pyx_k_left_side_after_cleaning[] = "left side after cleaning:";
static const char __pyx_k_neuralcoref_document_pyx[] = "neuralcoref/document.pyx";
static const char __pyx_k_01_AntMatchMentionSpeaker[] = "01_AntMatchMentionSpeaker";
static const char __pyx_k_EmbeddingExtractor___init[] = "EmbeddingExtractor.__init__";
static const char __pyx_k_left_side_before_cleaning[] = "left side before cleaning:";
static const char __pyx_k_load_embeddings_from_file[] = "load_embeddings_from_file";
static const char __pyx_k_right_side_after_cleaning[] = "right side after cleaning:";
static const char __pyx_k_right_side_before_cleaning[] = "right side before cleaning:";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_get_span_type_locals_genexpr[] = "get_span_type.<locals>.genexpr";
static const char __pyx_k_Mention___get___locals_genexpr[] = "Mention.__get__.<locals>.genexpr";
static const char __pyx_k_process_mentions_locals_lambda[] = "_process_mentions.<locals>.<lambda>";
static const char __pyx_k_Compute_words_embedding_feature[] = "\n    Compute words embedding features for mentions\n    ";
static const char __pyx_k_Conjunction_found_storing_first[] = "Conjunction found, storing first element separately";
static const char __pyx_k_EmbeddingExtractor_get_document[] = "EmbeddingExtractor.get_document_embedding";
static const char __pyx_k_No_spacy_2_model_detected_using[] = "No spacy 2 model detected, using spacy1 'en' model";
static const char __pyx_k_get_hash_lookups_locals_genexpr[] = "get_hash_lookups.<locals>.genexpr";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_process_mentions_locals_genexpr[] = "_process_mentions.<locals>.genexpr";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_EmbeddingExtractor_get_average_e[] = "EmbeddingExtractor.get_average_embedding";
static const char __pyx_k_EmbeddingExtractor_get_mention_e[] = "EmbeddingExtractor.get_mention_embeddings";
static const char __pyx_k_EmbeddingExtractor_get_stat_word[] = "EmbeddingExtractor.get_stat_word";
static const char __pyx_k_EmbeddingExtractor_get_word_embe[] = "EmbeddingExtractor.get_word_embedding";
static const char __pyx_k_EmbeddingExtractor_get_word_in_s[] = "EmbeddingExtractor.get_word_in_sentence";
static const char __pyx_k_EmbeddingExtractor_load_embeddin[] = "EmbeddingExtractor.load_embeddings_from_file";
static const char __pyx_k_EmbeddingExtractor_normalize_wor[] = "EmbeddingExtractor.normalize_word";
static const char __pyx_k_Error_while_getting_Mention_sent[] = "Error while getting Mention sentence index";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_data_models_and_pre_processing_f[] = "data models and pre-processing for the coref algorithm";
static const char __pyx_k_extract_mentions_spans_locals_ge[] = "extract_mentions_spans.<locals>.genexpr";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_not_pronoun_or_no_right_dependen[] = "not pronoun or no right dependency";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_set_mentions_features_locals_gen[] = "set_mentions_features.<locals>.genexpr";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
#ifdef Py_UNICODE_WIDE
static Py_UNICODE __pyx_k__60[] = { 127755,32,76,111,97,100,105,110,103,32,115,112,97,99,121,32,109,111,100,101,108,0 };
#else
static Py_UNICODE __pyx_k__60[] = { 55356,57099,32,76,111,97,100,105,110,103,32,115,112,97,99,121,32,109,111,100,101,108,0 };
#endif
#ifdef Py_UNICODE_WIDE
static Py_UNICODE __pyx_k__9[] = { 128293,32,65,100,100,32,115,112,97,110,58,32,0 };
#else
static Py_UNICODE __pyx_k__9[] = { 55357,56613,32,65,100,100,32,115,112,97,110,58,32,0 };
#endif
#ifdef Py_UNICODE_WIDE
static Py_UNICODE __pyx_k__13[] = { 128293,32,109,101,110,116,105,111,110,115,95,115,112,97,110,115,46,110,117,109,58,32,0 };
#else
static Py_UNICODE __pyx_k__13[] = { 55357,56613,32,109,101,110,116,105,111,110,115,95,115,112,97,110,115,46,110,117,109,58,32,0 };
#endif
#ifdef Py_UNICODE_WIDE
static Py_UNICODE __pyx_k__15[] = { 128526,32,69,120,116,114,97,99,116,32,115,101,110,116,115,32,115,116,97,114,116,44,32,101,110,100,58,0 };
#else
static Py_UNICODE __pyx_k__15[] = { 55357,56846,32,69,120,116,114,97,99,116,32,115,101,110,116,115,32,115,116,97,114,116,44,32,101,110,100,58,0 };
#endif
#ifdef Py_UNICODE_WIDE
static Py_UNICODE __pyx_k__17[] = { 128640,32,116,111,107,58,0 };
#else
static Py_UNICODE __pyx_k__17[] = { 55357,56960,32,116,111,107,58,0 };
#endif
#ifdef Py_UNICODE_WIDE
static Py_UNICODE __pyx_k__28[] = { 128679,32,115,112,97,110,32,115,101,97,114,99,104,58,0 };
#else
static Py_UNICODE __pyx_k__28[] = { 55357,56999,32,115,112,97,110,32,115,101,97,114,99,104,58,0 };
#endif
#ifdef Py_UNICODE_WIDE
static Py_UNICODE __pyx_k__24[] = { 128679,32,116,111,107,101,110,32,105,110,32,115,112,97,110,58,0 };
#else
static Py_UNICODE __pyx_k__24[] = { 55357,56999,32,116,111,107,101,110,32,105,110,32,115,112,97,110,58,0 };
#endif
static PyObject *__pyx_kp_u_0;
static PyObject *__pyx_kp_u_00_Mention;
static PyObject *__pyx_kp_u_00_MentionHead;
static PyObject *__pyx_kp_u_00_SameSpeaker;
static PyObject *__pyx_kp_u_01_AntMatchMentionSpeaker;
static PyObject *__pyx_kp_u_01_MentionFirstWord;
static PyObject *__pyx_kp_u_01_MentionLeft;
static PyObject *__pyx_kp_u_01_MentionType;
static PyObject *__pyx_kp_u_02_MentionLastWord;
static PyObject *__pyx_kp_u_02_MentionLength;
static PyObject *__pyx_kp_u_02_MentionMatchSpeaker;
static PyObject *__pyx_kp_u_02_MentionRight;
static PyObject *__pyx_kp_u_03_HeadsAgree;
static PyObject *__pyx_kp_u_03_MentionNormLocation;
static PyObject *__pyx_kp_u_03_PreviousWord;
static PyObject *__pyx_kp_u_03_Sentence;
static PyObject *__pyx_kp_u_04_Doc;
static PyObject *__pyx_kp_u_04_ExactStringMatch;
static PyObject *__pyx_kp_u_04_IsMentionNested;
static PyObject *__pyx_kp_u_04_NextWord;
static PyObject *__pyx_kp_u_05_RelaxedStringMatch;
static PyObject *__pyx_kp_u_05_SecondPreviousWord;
static PyObject *__pyx_kp_u_06_SecondNextWord;
static PyObject *__pyx_kp_u_06_SentenceDistance;
static PyObject *__pyx_kp_u_07_MentionDistance;
static PyObject *__pyx_kp_u_07_MentionRootHead;
static PyObject *__pyx_kp_u_08_Overlapping;
static PyObject *__pyx_kp_u_09_M1Features;
static PyObject *__pyx_kp_u_10_M2Features;
static PyObject *__pyx_kp_u_11_DocGenre;
static PyObject *__pyx_n_s_ACCEPTED_ENTS;
static PyObject *__pyx_n_u_ADP;
static PyObject *__pyx_kp_u_Adding_utterances;
static PyObject *__pyx_n_u_CC;
static PyObject *__pyx_n_u_CCONJ;
static PyObject *__pyx_kp_s_Compute_words_embedding_feature;
static PyObject *__pyx_kp_u_Conjunction_found_storing_first;
static PyObject *__pyx_n_u_DT;
static PyObject *__pyx_n_u_DocGenre;
static PyObject *__pyx_n_s_Document___iter;
static PyObject *__pyx_n_u_EVENT;
static PyObject *__pyx_n_s_EmbeddingExtractor;
static PyObject *__pyx_n_s_EmbeddingExtractor___init;
static PyObject *__pyx_n_s_EmbeddingExtractor_get_average_e;
static PyObject *__pyx_n_s_EmbeddingExtractor_get_document;
static PyObject *__pyx_n_s_EmbeddingExtractor_get_mention_e;
static PyObject *__pyx_n_s_EmbeddingExtractor_get_stat_word;
static PyObject *__pyx_n_s_EmbeddingExtractor_get_word_embe;
static PyObject *__pyx_n_s_EmbeddingExtractor_get_word_in_s;
static PyObject *__pyx_n_s_EmbeddingExtractor_load_embeddin;
static PyObject *__pyx_n_s_EmbeddingExtractor_normalize_wor;
static PyObject *__pyx_kp_u_Enlarge_span;
static PyObject *__pyx_kp_u_Error_while_getting_Mention_sent;
static PyObject *__pyx_n_u_FACILITY;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_u_GPE;
static PyObject *__pyx_n_u_IN;
static PyObject *__pyx_n_u_INTJ;
static PyObject *__pyx_kp_u_IN_tag;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_KEEP_DEP;
static PyObject *__pyx_n_s_KEEP_TAGS;
static PyObject *__pyx_n_u_LANGUAGE;
static PyObject *__pyx_n_s_LEAVE_DEP;
static PyObject *__pyx_n_u_LIST;
static PyObject *__pyx_n_u_LOC;
static PyObject *__pyx_n_s_LOWER_NOT_END;
static PyObject *__pyx_kp_u_Loading_embeddings_from;
static PyObject *__pyx_n_s_MAX_ITER;
static PyObject *__pyx_n_s_MENTION_LABEL;
static PyObject *__pyx_n_s_MENTION_TYPE;
static PyObject *__pyx_n_s_MISSING_WORD;
static PyObject *__pyx_n_s_Mention___get___locals_genexpr;
static PyObject *__pyx_n_u_NN;
static PyObject *__pyx_n_u_NNP;
static PyObject *__pyx_n_u_NNPS;
static PyObject *__pyx_n_u_NNS;
static PyObject *__pyx_n_u_NOMINAL;
static PyObject *__pyx_n_u_NORP;
static PyObject *__pyx_n_s_NO_COREF_LIST;
static PyObject *__pyx_kp_u_NP_or_IN;
static PyObject *__pyx_kp_u_No_spacy_2_model_detected_using;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_u_ORG;
static PyObject *__pyx_n_u_PERSON;
static PyObject *__pyx_n_u_PRODUCT;
static PyObject *__pyx_n_u_PRONOMINAL;
static PyObject *__pyx_n_u_PROPER;
static PyObject *__pyx_n_s_PROPERS_TAGS;
static PyObject *__pyx_n_u_PRP;
static PyObject *__pyx_kp_u_PRP_2;
static PyObject *__pyx_n_s_PRP_TAGS;
static PyObject *__pyx_n_s_REMOVE_POS;
static PyObject *__pyx_kp_u_Removing_first_token;
static PyObject *__pyx_kp_u_Removing_last_token;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SPAN_FACTOR;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_UNK;
static PyObject *__pyx_n_s_UNKNOWN_WORD;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_WHITESPACE_PATTERN;
static PyObject *__pyx_n_u_WORK_OF_ART;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_kp_u__30;
static PyObject *__pyx_kp_u__44;
static PyObject *__pyx_kp_u__45;
static PyObject *__pyx_kp_u__46;
static PyObject *__pyx_kp_u__49;
static PyObject *__pyx_kp_u__53;
static PyObject *__pyx_kp_u__75;
static PyObject *__pyx_kp_u__76;
static PyObject *__pyx_n_s__77;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_add_span_locals_genexpr;
static PyObject *__pyx_n_s_add_utterances;
static PyObject *__pyx_n_u_antecedents;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_u_appos;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_astype;
static PyObject *__pyx_n_s_average;
static PyObject *__pyx_n_s_average_mean;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_u_cleaned_mentions_spans;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_u_compound;
static PyObject *__pyx_n_s_concatenate;
static PyObject *__pyx_n_u_conj;
static PyObject *__pyx_n_s_conll;
static PyObject *__pyx_n_s_content_words;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_kp_u_d;
static PyObject *__pyx_n_s_debug;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_dep;
static PyObject *__pyx_n_u_dep;
static PyObject *__pyx_kp_u_dep_2;
static PyObject *__pyx_n_s_dep_3;
static PyObject *__pyx_n_u_det;
static PyObject *__pyx_n_u_dobj;
static PyObject *__pyx_kp_u_doc;
static PyObject *__pyx_n_s_doc_2;
static PyObject *__pyx_n_s_doc_3;
static PyObject *__pyx_n_s_doc_embedding;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_em;
static PyObject *__pyx_n_s_embed;
static PyObject *__pyx_n_s_embed_vector;
static PyObject *__pyx_n_s_embedding_extractor;
static PyObject *__pyx_n_s_embeddings;
static PyObject *__pyx_kp_u_embeddings_npy;
static PyObject *__pyx_n_u_en;
static PyObject *__pyx_n_u_en_core_web_sm;
static PyObject *__pyx_n_s_encode_distance;
static PyObject *__pyx_n_s_encoding;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_ent_type;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_ents;
static PyObject *__pyx_kp_u_ents_2;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_exact_match;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_extract_mentions_spans_locals_ge;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_fallback;
static PyObject *__pyx_n_s_features;
static PyObject *__pyx_n_s_features_2;
static PyObject *__pyx_n_u_float32;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_average_embedding;
static PyObject *__pyx_n_s_get_document_embedding;
static PyObject *__pyx_n_s_get_hash_lookups_locals_genexpr;
static PyObject *__pyx_n_s_get_mention_embeddings;
static PyObject *__pyx_n_s_get_raw_pair_features;
static PyObject *__pyx_n_s_get_span_type_locals_genexpr;
static PyObject *__pyx_n_s_get_stat_word;
static PyObject *__pyx_n_s_get_word_embedding;
static PyObject *__pyx_n_s_get_word_in_sentence;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_u_head;
static PyObject *__pyx_n_s_head_2;
static PyObject *__pyx_n_s_heads_agree;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_u_i;
static PyObject *__pyx_kp_u_i2;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_idx_to_voc;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_integer_types;
static PyObject *__pyx_n_s_io;
static PyObject *__pyx_n_u_iobj;
static PyObject *__pyx_n_s_isdisjoint;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_izip_longest;
static PyObject *__pyx_kp_u_keep_as_maxchild;
static PyObject *__pyx_kp_u_keep_as_minchild;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_kp_u_left_side_after_cleaning;
static PyObject *__pyx_kp_u_left_side_before_cleaning;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_load;
static PyObject *__pyx_n_s_load_embeddings_from_file;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_m1;
static PyObject *__pyx_n_s_m2;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_u_mark;
static PyObject *__pyx_n_s_mat;
static PyObject *__pyx_n_s_max_distance;
static PyObject *__pyx_n_s_max_distance_with_match;
static PyObject *__pyx_kp_u_maxchild_c_c_head;
static PyObject *__pyx_n_u_me;
static PyObject *__pyx_n_s_mention;
static PyObject *__pyx_n_s_mention_detection_debug;
static PyObject *__pyx_n_s_mention_index;
static PyObject *__pyx_n_s_mention_type;
static PyObject *__pyx_n_s_mentions;
static PyObject *__pyx_n_s_mentions_spans;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_kp_u_minchild_c_c_head;
static PyObject *__pyx_kp_u_missing;
static PyObject *__pyx_n_s_model;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_ms;
static PyObject *__pyx_n_s_ms_lefts;
static PyObject *__pyx_n_s_ms_rights;
static PyObject *__pyx_n_u_my;
static PyObject *__pyx_n_s_n_sents;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndmin;
static PyObject *__pyx_n_s_neuralcoref_compat;
static PyObject *__pyx_n_s_neuralcoref_document;
static PyObject *__pyx_kp_s_neuralcoref_document_pyx;
static PyObject *__pyx_n_s_neuralcoref_utils;
static PyObject *__pyx_n_s_nlp;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_norm_word;
static PyObject *__pyx_n_s_normalize_word;
static PyObject *__pyx_kp_u_not_pronoun_or_no_right_dependen;
static PyObject *__pyx_n_u_nsubj;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_overlapping;
static PyObject *__pyx_n_s_parallel_process;
static PyObject *__pyx_n_s_pipe;
static PyObject *__pyx_n_u_pobj;
static PyObject *__pyx_kp_u_pos;
static PyObject *__pyx_n_s_pos_2;
static PyObject *__pyx_n_u_prep;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pretrained_model_path;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_process_mentions;
static PyObject *__pyx_n_s_process_mentions_locals_genexpr;
static PyObject *__pyx_n_s_process_mentions_locals_lambda;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_u_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_relaxed_match;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_kp_u_right_side_after_cleaning;
static PyObject *__pyx_kp_u_right_side_before_cleaning;
static PyObject *__pyx_n_s_root;
static PyObject *__pyx_kp_u_s;
static PyObject *__pyx_kp_u_s_2;
static PyObject *__pyx_kp_u_s_detected;
static PyObject *__pyx_kp_u_s_i1;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_sent;
static PyObject *__pyx_n_s_sentence;
static PyObject *__pyx_n_s_sents;
static PyObject *__pyx_n_s_set_candidate_pairs;
static PyObject *__pyx_n_s_set_genre;
static PyObject *__pyx_n_s_set_mentions_features;
static PyObject *__pyx_n_s_set_mentions_features_locals_gen;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_shape2;
static PyObject *__pyx_n_s_six;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_spacy;
static PyObject *__pyx_n_s_span;
static PyObject *__pyx_n_s_spans;
static PyObject *__pyx_n_s_spans_embeddings;
static PyObject *__pyx_n_s_spans_embeddings_2;
static PyObject *__pyx_n_s_st;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_stat_idx;
static PyObject *__pyx_n_s_stat_voc;
static PyObject *__pyx_n_s_static;
static PyObject *__pyx_n_s_static_embeddings;
static PyObject *__pyx_n_u_static_word;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_str___locals_genexpr;
static PyObject *__pyx_n_s_string_types;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_sub;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_kp_u_tag;
static PyObject *__pyx_n_s_tag_2;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tok;
static PyObject *__pyx_kp_u_tok_dep;
static PyObject *__pyx_kp_u_tok_pos;
static PyObject *__pyx_kp_u_tok_tag;
static PyObject *__pyx_kp_u_token_head;
static PyObject *__pyx_kp_u_token_in_no_coref_list;
static PyObject *__pyx_n_s_token_list;
static PyObject *__pyx_n_s_trained_embed_path;
static PyObject *__pyx_n_s_tun_idx;
static PyObject *__pyx_n_s_tun_voc;
static PyObject *__pyx_n_s_tuned_embeddings;
static PyObject *__pyx_n_u_tuned_word;
static PyObject *__pyx_n_s_uint64;
static PyObject *__pyx_n_s_unicode;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_use_no_coref_list;
static PyObject *__pyx_kp_u_utf_8;
static PyObject *__pyx_n_s_utt;
static PyObject *__pyx_n_s_utt_embed;
static PyObject *__pyx_n_s_utterance_index;
static PyObject *__pyx_n_s_utterances;
static PyObject *__pyx_n_s_utterances_list;
static PyObject *__pyx_kp_u_utterances_mentions;
static PyObject *__pyx_n_s_utterances_sent;
static PyObject *__pyx_n_s_utterances_start_sent;
static PyObject *__pyx_n_s_voc_to_idx;
static PyObject *__pyx_kp_u_vocabulary_txt;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_n_s_word;
static PyObject *__pyx_n_s_word_idx;
static PyObject *__pyx_n_s_word_list;
static PyObject *__pyx_n_s_words;
static PyObject *__pyx_n_s_words_embeddings;
static PyObject *__pyx_n_s_words_embeddings_2;
static PyObject *__pyx_n_u_you;
static PyObject *__pyx_n_u_your;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zip_longest;
static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_6genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_9genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_12genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_15genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_18genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_21genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_24genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8add_span_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8add_span_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_22extract_mentions_spans_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_22extract_mentions_spans_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_13get_span_type_genexpr(PyObject *__pyx_self); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention___cinit__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_5spacy_6tokens_4span_Span *__pyx_v_span, int __pyx_v_mention_index, int __pyx_v_utterance_index, int __pyx_v_utterances_start_sent); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_13content_words_7__get___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_13content_words___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_2__repr__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_11neuralcoref_8document_7Mention_4__len__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_6__getitem__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_8__contains__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_10heads_agree(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_12exact_match(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_14relaxed_match(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_16overlapping(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_m2); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_4span___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_12entity_label___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_6in_ent___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_5index___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_15utterance_index___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_15utterances_sent___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_12mention_type___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_7propers___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_16spans_embeddings___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_16spans_embeddings_2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_16spans_embeddings_4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_16words_embeddings___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_16words_embeddings_2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_16words_embeddings_4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_10embeddings___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_10embeddings_2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_10embeddings_4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_8features___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_8features_2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_8features_4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_17spans_embeddings____get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_17spans_embeddings__2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_17spans_embeddings__4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_17words_embeddings____get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_17words_embeddings__2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_17words_embeddings__4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_9features____get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_9features__2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_11neuralcoref_8document_7Mention_9features__4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_pretrained_model_path); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_2load_embeddings_from_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_4normalize_word(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_w); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_6get_document_embedding(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_utterances_list); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_8get_stat_word(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_word); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_10get_word_embedding(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_word, PyObject *__pyx_v_static); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_12get_word_in_sentence(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_word_idx, PyObject *__pyx_v_sentence); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_14get_average_embedding(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_token_list); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_16get_mention_embeddings(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_mention, PyObject *__pyx_v_doc_embedding); /* proto */
static int __pyx_pf_11neuralcoref_8document_8Document___cinit__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_nlp, PyObject *__pyx_v_utterances, PyObject *__pyx_v_use_no_coref_list, PyObject *__pyx_v_trained_embed_path, PyObject *__pyx_v_embedding_extractor, PyObject *__pyx_v_conll, PyObject *__pyx_v_debug); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_2set_genre(CYTHON_UNUSED struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_conll); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_7__str___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_7__str___3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_4__str__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_11neuralcoref_8document_8Document_6__len__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_8__getitem__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_10__iter__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_13set_utterances(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_utterances); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_15add_utterances(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_utterances); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_17_process_mentions_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda18(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_17_process_mentions(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_mentions_spans, PyObject *__pyx_v_utterance_index, PyObject *__pyx_v_n_sents); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_21set_mentions_features_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_19set_mentions_features(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_21get_single_mention_features(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_mention); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_23get_raw_pair_features(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_m1, PyObject *__pyx_v_m2); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_25get_pair_mentions_features(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_m1, PyObject *__pyx_v_m2); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_27set_candidate_pairs(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_max_distance, PyObject *__pyx_v_max_distance_with_match, PyObject *__pyx_v_debug); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_3nlp___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_17use_no_coref_list___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_5debug___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_10utterances___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_8mentions___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_7n_sents___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_10n_mentions___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_7n_pairs___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_9pairs_ant___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_9pairs_men___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_6genre____get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_5genre___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_15embed_extractor___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_29__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_8Document_31__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_11neuralcoref_8document_mention_detection_debug(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_11neuralcoref_8document_Mention(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document_Document(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_7_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_8_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_9_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_11_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_12_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_14_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_15_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_17_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_18___get__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_19_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_20___str__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_21_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_22_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_23___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_24__process_mentions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_25_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_27_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_500;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_slice__35;
static PyObject *__pyx_slice__48;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_ustring__8;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_ustring__11;
static PyObject *__pyx_ustring__12;
static PyObject *__pyx_ustring__14;
static PyObject *__pyx_ustring__16;
static PyObject *__pyx_ustring__23;
static PyObject *__pyx_ustring__27;
static PyObject *__pyx_ustring__59;
/* Late includes */

/* "neuralcoref/document.pyx":61
 * #########################
 * 
 * cdef bint inside(attr_t element, Hashes hashes):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef attr_t* arr = hashes.arr
 */

static int __pyx_f_11neuralcoref_8document_inside(__pyx_t_5spacy_8typedefs_attr_t __pyx_v_element, struct __pyx_t_11neuralcoref_8document_Hashes __pyx_v_hashes) {
  int __pyx_v_i;
  __pyx_t_5spacy_8typedefs_attr_t *__pyx_v_arr;
  int __pyx_v_length;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __pyx_t_5spacy_8typedefs_attr_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("inside", 0);
  __Pyx_TraceCall("inside", __pyx_f[0], 61, 0, __PYX_ERR(0, 61, __pyx_L1_error));

  /* "neuralcoref/document.pyx":63
 * cdef bint inside(attr_t element, Hashes hashes):
 *     cdef int i
 *     cdef attr_t* arr = hashes.arr             # <<<<<<<<<<<<<<
 *     cdef int length = hashes.length
 *     for i in range(length):
 */
  __pyx_t_1 = __pyx_v_hashes.arr;
  __pyx_v_arr = __pyx_t_1;

  /* "neuralcoref/document.pyx":64
 *     cdef int i
 *     cdef attr_t* arr = hashes.arr
 *     cdef int length = hashes.length             # <<<<<<<<<<<<<<
 *     for i in range(length):
 *         if arr[i] == element:
 */
  __pyx_t_2 = __pyx_v_hashes.length;
  __pyx_v_length = __pyx_t_2;

  /* "neuralcoref/document.pyx":65
 *     cdef attr_t* arr = hashes.arr
 *     cdef int length = hashes.length
 *     for i in range(length):             # <<<<<<<<<<<<<<
 *         if arr[i] == element:
 *             return True
 */
  __pyx_t_2 = __pyx_v_length;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "neuralcoref/document.pyx":66
 *     cdef int length = hashes.length
 *     for i in range(length):
 *         if arr[i] == element:             # <<<<<<<<<<<<<<
 *             return True
 *     return False
 */
    __pyx_t_5 = (((__pyx_v_arr[__pyx_v_i]) == __pyx_v_element) != 0);
    if (__pyx_t_5) {

      /* "neuralcoref/document.pyx":67
 *     for i in range(length):
 *         if arr[i] == element:
 *             return True             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "neuralcoref/document.pyx":66
 *     cdef int length = hashes.length
 *     for i in range(length):
 *         if arr[i] == element:             # <<<<<<<<<<<<<<
 *             return True
 *     return False
 */
    }
  }

  /* "neuralcoref/document.pyx":68
 *         if arr[i] == element:
 *             return True
 *     return False             # <<<<<<<<<<<<<<
 * 
 * cdef HashesList get_hash_lookups(StringStore store):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":61
 * #########################
 * 
 * cdef bint inside(attr_t element, Hashes hashes):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef attr_t* arr = hashes.arr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("neuralcoref.document.inside", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":72
 * cdef HashesList get_hash_lookups(StringStore store):
 *     cdef HashesList hashes
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 */

static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_1_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 72, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_16get_hash_lookups_2generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_hash_lookups_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.get_hash_lookups.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 72, 0, __PYX_ERR(0, 72, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NO_COREF_LIST); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 72, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 72, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 72, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 72, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_st);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_st, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store)) { __Pyx_RaiseClosureNameError("store"); __PYX_ERR(0, 72, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_st);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_st);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_5generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":73
 *     cdef HashesList hashes
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 */

static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_2_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_2_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 73, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_16get_hash_lookups_5generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_hash_lookups_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.get_hash_lookups.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_5generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 73, 0, __PYX_ERR(0, 73, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_KEEP_TAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 73, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 73, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 73, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 73, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_st);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_st, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store)) { __Pyx_RaiseClosureNameError("store"); __PYX_ERR(0, 73, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_st);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_st);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_8generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":74
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 */

static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_6genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_3_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 74, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_16get_hash_lookups_8generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_hash_lookups_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.get_hash_lookups.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_8generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 74, 0, __PYX_ERR(0, 74, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PRP_TAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 74, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 74, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 74, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_st);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_st, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store)) { __Pyx_RaiseClosureNameError("store"); __PYX_ERR(0, 74, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 74, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_st);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_st);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_11generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":75
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 */

static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_9genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_4_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 75, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_16get_hash_lookups_11generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_hash_lookups_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.get_hash_lookups.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_11generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 75, 0, __PYX_ERR(0, 75, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_LEAVE_DEP); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 75, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 75, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 75, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_st);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_st, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store)) { __Pyx_RaiseClosureNameError("store"); __PYX_ERR(0, 75, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_st);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_st);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_14generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":76
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 */

static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_12genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_5_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_5_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 76, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_16get_hash_lookups_14generator5, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_hash_lookups_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.get_hash_lookups.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_14generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 76, 0, __PYX_ERR(0, 76, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 76, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_KEEP_DEP); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 76, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_st);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_st, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store)) { __Pyx_RaiseClosureNameError("store"); __PYX_ERR(0, 76, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_st);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_st);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_17generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":77
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 */

static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_15genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_6_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 77, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_16get_hash_lookups_17generator6, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_hash_lookups_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.get_hash_lookups.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_17generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 77, 0, __PYX_ERR(0, 77, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_1 = __pyx_tuple_; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= 2) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 77, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_st);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_st, ((PyObject*)__pyx_t_3));
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store)) { __Pyx_RaiseClosureNameError("store"); __PYX_ERR(0, 77, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_st);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_cur_scope->__pyx_v_st);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_20generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":78
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)
 */

static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_18genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_7_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_7_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 78, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_16get_hash_lookups_20generator7, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_hash_lookups_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.get_hash_lookups.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_20generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 78, 0, __PYX_ERR(0, 78, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_1 = __pyx_tuple__2; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= 2) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 78, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_st);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_st, ((PyObject*)__pyx_t_3));
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store)) { __Pyx_RaiseClosureNameError("store"); __PYX_ERR(0, 78, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 78, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_st);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_cur_scope->__pyx_v_st);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_23generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":79
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")
 */

static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_21genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_8_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_8_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 79, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_16get_hash_lookups_23generator8, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_hash_lookups_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.get_hash_lookups.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_23generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 79, 0, __PYX_ERR(0, 79, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_REMOVE_POS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 79, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 79, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 79, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_st);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_st, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store)) { __Pyx_RaiseClosureNameError("store"); __PYX_ERR(0, 79, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_st);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_st);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_26generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":80
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")
 *     cdef attr_t NSUBJ_MARK = store.add("nsubj")
 */

static PyObject *__pyx_pf_11neuralcoref_8document_16get_hash_lookups_24genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_9_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_9_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 80, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_16get_hash_lookups_26generator9, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_hash_lookups_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.get_hash_lookups.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_16get_hash_lookups_26generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 80, 0, __PYX_ERR(0, 80, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOWER_NOT_END); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 80, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_st);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_st, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store)) { __Pyx_RaiseClosureNameError("store"); __PYX_ERR(0, 80, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_st};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_st);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_st);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":70
 *     return False
 * 
 * cdef HashesList get_hash_lookups(StringStore store):             # <<<<<<<<<<<<<<
 *     cdef HashesList hashes
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)
 */

static struct __pyx_t_11neuralcoref_8document_HashesList __pyx_f_11neuralcoref_8document_get_hash_lookups(struct __pyx_obj_5spacy_7strings_StringStore *__pyx_v_store) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *__pyx_cur_scope;
  struct __pyx_t_11neuralcoref_8document_HashesList __pyx_v_hashes;
  PyArrayObject *__pyx_v_no_coref_list = 0;
  PyArrayObject *__pyx_v_keep_tags = 0;
  PyArrayObject *__pyx_v_PRP_tags = 0;
  PyArrayObject *__pyx_v_leave_dep = 0;
  PyArrayObject *__pyx_v_keep_dep = 0;
  PyArrayObject *__pyx_v_nsubj_or_dep = 0;
  PyArrayObject *__pyx_v_conj_or_prep = 0;
  PyArrayObject *__pyx_v_remove_pos = 0;
  PyArrayObject *__pyx_v_lower_not_end = 0;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_POSSESSIVE_MARK;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_NSUBJ_MARK;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_IN_TAG;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_v_MARK_DEP;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_PRP_tags;
  __Pyx_Buffer __pyx_pybuffer_PRP_tags;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_conj_or_prep;
  __Pyx_Buffer __pyx_pybuffer_conj_or_prep;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_keep_dep;
  __Pyx_Buffer __pyx_pybuffer_keep_dep;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_keep_tags;
  __Pyx_Buffer __pyx_pybuffer_keep_tags;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leave_dep;
  __Pyx_Buffer __pyx_pybuffer_leave_dep;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_lower_not_end;
  __Pyx_Buffer __pyx_pybuffer_lower_not_end;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_no_coref_list;
  __Pyx_Buffer __pyx_pybuffer_no_coref_list;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_nsubj_or_dep;
  __Pyx_Buffer __pyx_pybuffer_nsubj_or_dep;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_remove_pos;
  __Pyx_Buffer __pyx_pybuffer_remove_pos;
  struct __pyx_t_11neuralcoref_8document_HashesList __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  PyArrayObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_15;
  __pyx_t_5spacy_8typedefs_hash_t *__pyx_t_16;
  npy_intp __pyx_t_17;
  __Pyx_RefNannySetupContext("get_hash_lookups", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 70, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("get_hash_lookups", __pyx_f[0], 70, 0, __PYX_ERR(0, 70, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_store = __pyx_v_store;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_store);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_store);
  __pyx_pybuffer_no_coref_list.pybuffer.buf = NULL;
  __pyx_pybuffer_no_coref_list.refcount = 0;
  __pyx_pybuffernd_no_coref_list.data = NULL;
  __pyx_pybuffernd_no_coref_list.rcbuffer = &__pyx_pybuffer_no_coref_list;
  __pyx_pybuffer_keep_tags.pybuffer.buf = NULL;
  __pyx_pybuffer_keep_tags.refcount = 0;
  __pyx_pybuffernd_keep_tags.data = NULL;
  __pyx_pybuffernd_keep_tags.rcbuffer = &__pyx_pybuffer_keep_tags;
  __pyx_pybuffer_PRP_tags.pybuffer.buf = NULL;
  __pyx_pybuffer_PRP_tags.refcount = 0;
  __pyx_pybuffernd_PRP_tags.data = NULL;
  __pyx_pybuffernd_PRP_tags.rcbuffer = &__pyx_pybuffer_PRP_tags;
  __pyx_pybuffer_leave_dep.pybuffer.buf = NULL;
  __pyx_pybuffer_leave_dep.refcount = 0;
  __pyx_pybuffernd_leave_dep.data = NULL;
  __pyx_pybuffernd_leave_dep.rcbuffer = &__pyx_pybuffer_leave_dep;
  __pyx_pybuffer_keep_dep.pybuffer.buf = NULL;
  __pyx_pybuffer_keep_dep.refcount = 0;
  __pyx_pybuffernd_keep_dep.data = NULL;
  __pyx_pybuffernd_keep_dep.rcbuffer = &__pyx_pybuffer_keep_dep;
  __pyx_pybuffer_nsubj_or_dep.pybuffer.buf = NULL;
  __pyx_pybuffer_nsubj_or_dep.refcount = 0;
  __pyx_pybuffernd_nsubj_or_dep.data = NULL;
  __pyx_pybuffernd_nsubj_or_dep.rcbuffer = &__pyx_pybuffer_nsubj_or_dep;
  __pyx_pybuffer_conj_or_prep.pybuffer.buf = NULL;
  __pyx_pybuffer_conj_or_prep.refcount = 0;
  __pyx_pybuffernd_conj_or_prep.data = NULL;
  __pyx_pybuffernd_conj_or_prep.rcbuffer = &__pyx_pybuffer_conj_or_prep;
  __pyx_pybuffer_remove_pos.pybuffer.buf = NULL;
  __pyx_pybuffer_remove_pos.refcount = 0;
  __pyx_pybuffernd_remove_pos.data = NULL;
  __pyx_pybuffernd_remove_pos.rcbuffer = &__pyx_pybuffer_remove_pos;
  __pyx_pybuffer_lower_not_end.pybuffer.buf = NULL;
  __pyx_pybuffer_lower_not_end.refcount = 0;
  __pyx_pybuffernd_lower_not_end.data = NULL;
  __pyx_pybuffernd_lower_not_end.rcbuffer = &__pyx_pybuffer_lower_not_end;

  /* "neuralcoref/document.pyx":72
 * cdef HashesList get_hash_lookups(StringStore store):
 *     cdef HashesList hashes
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_pf_11neuralcoref_8document_16get_hash_lookups_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uint64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_no_coref_list.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5spacy_8typedefs_attr_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_no_coref_list = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_no_coref_list.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 72, __pyx_L1_error)
    } else {__pyx_pybuffernd_no_coref_list.diminfo[0].strides = __pyx_pybuffernd_no_coref_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_no_coref_list.diminfo[0].shape = __pyx_pybuffernd_no_coref_list.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_no_coref_list = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "neuralcoref/document.pyx":73
 *     cdef HashesList hashes
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_pf_11neuralcoref_8document_16get_hash_lookups_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_uint64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_keep_tags.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5spacy_8typedefs_attr_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_keep_tags = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_keep_tags.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 73, __pyx_L1_error)
    } else {__pyx_pybuffernd_keep_tags.diminfo[0].strides = __pyx_pybuffernd_keep_tags.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_keep_tags.diminfo[0].shape = __pyx_pybuffernd_keep_tags.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_keep_tags = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":74
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_pf_11neuralcoref_8document_16get_hash_lookups_6genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_uint64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_PRP_tags.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5spacy_8typedefs_attr_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_PRP_tags = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_PRP_tags.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 74, __pyx_L1_error)
    } else {__pyx_pybuffernd_PRP_tags.diminfo[0].strides = __pyx_pybuffernd_PRP_tags.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_PRP_tags.diminfo[0].shape = __pyx_pybuffernd_PRP_tags.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_PRP_tags = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":75
 *     cdef np.ndarray[attr_t, ndim=1] keep_tags = numpy.asarray(list(store.add(st) for st in KEEP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_pf_11neuralcoref_8document_16get_hash_lookups_9genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uint64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leave_dep.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5spacy_8typedefs_attr_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_leave_dep = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_leave_dep.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 75, __pyx_L1_error)
    } else {__pyx_pybuffernd_leave_dep.diminfo[0].strides = __pyx_pybuffernd_leave_dep.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leave_dep.diminfo[0].shape = __pyx_pybuffernd_leave_dep.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v_leave_dep = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":76
 *     cdef np.ndarray[attr_t, ndim=1] PRP_tags = numpy.asarray(list(store.add(st) for st in PRP_TAGS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_pf_11neuralcoref_8document_16get_hash_lookups_12genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uint64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 76, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_keep_dep.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5spacy_8typedefs_attr_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_keep_dep = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_keep_dep.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 76, __pyx_L1_error)
    } else {__pyx_pybuffernd_keep_dep.diminfo[0].strides = __pyx_pybuffernd_keep_dep.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_keep_dep.diminfo[0].shape = __pyx_pybuffernd_keep_dep.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_keep_dep = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":77
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_pf_11neuralcoref_8document_16get_hash_lookups_15genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uint64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nsubj_or_dep.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5spacy_8typedefs_attr_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_nsubj_or_dep = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_nsubj_or_dep.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 77, __pyx_L1_error)
    } else {__pyx_pybuffernd_nsubj_or_dep.diminfo[0].strides = __pyx_pybuffernd_nsubj_or_dep.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_nsubj_or_dep.diminfo[0].shape = __pyx_pybuffernd_nsubj_or_dep.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_nsubj_or_dep = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "neuralcoref/document.pyx":78
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_pf_11neuralcoref_8document_16get_hash_lookups_18genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_uint64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_t_12 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_conj_or_prep.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5spacy_8typedefs_attr_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_conj_or_prep = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_conj_or_prep.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 78, __pyx_L1_error)
    } else {__pyx_pybuffernd_conj_or_prep.diminfo[0].strides = __pyx_pybuffernd_conj_or_prep.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_conj_or_prep.diminfo[0].shape = __pyx_pybuffernd_conj_or_prep.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_12 = 0;
  __pyx_v_conj_or_prep = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":79
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_pf_11neuralcoref_8document_16get_hash_lookups_21genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_uint64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_remove_pos.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_5spacy_8typedefs_attr_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_remove_pos = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_remove_pos.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 79, __pyx_L1_error)
    } else {__pyx_pybuffernd_remove_pos.diminfo[0].strides = __pyx_pybuffernd_remove_pos.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_remove_pos.diminfo[0].shape = __pyx_pybuffernd_remove_pos.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_remove_pos = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":80
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")
 *     cdef attr_t NSUBJ_MARK = store.add("nsubj")
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_pf_11neuralcoref_8document_16get_hash_lookups_24genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uint64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_lower_not_end.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_5spacy_8typedefs_attr_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_lower_not_end = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_lower_not_end.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 80, __pyx_L1_error)
    } else {__pyx_pybuffernd_lower_not_end.diminfo[0].strides = __pyx_pybuffernd_lower_not_end.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_lower_not_end.diminfo[0].shape = __pyx_pybuffernd_lower_not_end.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_14 = 0;
  __pyx_v_lower_not_end = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":81
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")             # <<<<<<<<<<<<<<
 *     cdef attr_t NSUBJ_MARK = store.add("nsubj")
 *     cdef attr_t IN_TAG = store.add('IN')
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_15 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_15 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_POSSESSIVE_MARK = __pyx_t_15;

  /* "neuralcoref/document.pyx":82
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")
 *     cdef attr_t NSUBJ_MARK = store.add("nsubj")             # <<<<<<<<<<<<<<
 *     cdef attr_t IN_TAG = store.add('IN')
 *     cdef attr_t MARK_DEP = store.add("mark")
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_15 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_15 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_NSUBJ_MARK = __pyx_t_15;

  /* "neuralcoref/document.pyx":83
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")
 *     cdef attr_t NSUBJ_MARK = store.add("nsubj")
 *     cdef attr_t IN_TAG = store.add('IN')             # <<<<<<<<<<<<<<
 *     cdef attr_t MARK_DEP = store.add("mark")
 *     hashes.no_coref_list.arr, hashes.no_coref_list.length = <hash_t*>no_coref_list.data, no_coref_list.shape[0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_15 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_15 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_IN_TAG = __pyx_t_15;

  /* "neuralcoref/document.pyx":84
 *     cdef attr_t NSUBJ_MARK = store.add("nsubj")
 *     cdef attr_t IN_TAG = store.add('IN')
 *     cdef attr_t MARK_DEP = store.add("mark")             # <<<<<<<<<<<<<<
 *     hashes.no_coref_list.arr, hashes.no_coref_list.length = <hash_t*>no_coref_list.data, no_coref_list.shape[0]
 *     hashes.keep_tags.arr, hashes.keep_tags.length = <hash_t*>keep_tags.data, keep_tags.shape[0]
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_store), __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_15 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_15 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_MARK_DEP = __pyx_t_15;

  /* "neuralcoref/document.pyx":85
 *     cdef attr_t IN_TAG = store.add('IN')
 *     cdef attr_t MARK_DEP = store.add("mark")
 *     hashes.no_coref_list.arr, hashes.no_coref_list.length = <hash_t*>no_coref_list.data, no_coref_list.shape[0]             # <<<<<<<<<<<<<<
 *     hashes.keep_tags.arr, hashes.keep_tags.length = <hash_t*>keep_tags.data, keep_tags.shape[0]
 *     hashes.PRP_tags.arr, hashes.PRP_tags.length = <hash_t*>PRP_tags.data, PRP_tags.shape[0]
 */
  __pyx_t_16 = ((__pyx_t_5spacy_8typedefs_hash_t *)__pyx_v_no_coref_list->data);
  __pyx_t_17 = (__pyx_v_no_coref_list->dimensions[0]);
  __pyx_v_hashes.no_coref_list.arr = __pyx_t_16;
  __pyx_v_hashes.no_coref_list.length = __pyx_t_17;

  /* "neuralcoref/document.pyx":86
 *     cdef attr_t MARK_DEP = store.add("mark")
 *     hashes.no_coref_list.arr, hashes.no_coref_list.length = <hash_t*>no_coref_list.data, no_coref_list.shape[0]
 *     hashes.keep_tags.arr, hashes.keep_tags.length = <hash_t*>keep_tags.data, keep_tags.shape[0]             # <<<<<<<<<<<<<<
 *     hashes.PRP_tags.arr, hashes.PRP_tags.length = <hash_t*>PRP_tags.data, PRP_tags.shape[0]
 *     hashes.leave_dep.arr, hashes.leave_dep.length = <hash_t*>leave_dep.data, leave_dep.shape[0]
 */
  __pyx_t_16 = ((__pyx_t_5spacy_8typedefs_hash_t *)__pyx_v_keep_tags->data);
  __pyx_t_17 = (__pyx_v_keep_tags->dimensions[0]);
  __pyx_v_hashes.keep_tags.arr = __pyx_t_16;
  __pyx_v_hashes.keep_tags.length = __pyx_t_17;

  /* "neuralcoref/document.pyx":87
 *     hashes.no_coref_list.arr, hashes.no_coref_list.length = <hash_t*>no_coref_list.data, no_coref_list.shape[0]
 *     hashes.keep_tags.arr, hashes.keep_tags.length = <hash_t*>keep_tags.data, keep_tags.shape[0]
 *     hashes.PRP_tags.arr, hashes.PRP_tags.length = <hash_t*>PRP_tags.data, PRP_tags.shape[0]             # <<<<<<<<<<<<<<
 *     hashes.leave_dep.arr, hashes.leave_dep.length = <hash_t*>leave_dep.data, leave_dep.shape[0]
 *     hashes.keep_dep.arr, hashes.keep_dep.length = <hash_t*>keep_dep.data, keep_dep.shape[0]
 */
  __pyx_t_16 = ((__pyx_t_5spacy_8typedefs_hash_t *)__pyx_v_PRP_tags->data);
  __pyx_t_17 = (__pyx_v_PRP_tags->dimensions[0]);
  __pyx_v_hashes.PRP_tags.arr = __pyx_t_16;
  __pyx_v_hashes.PRP_tags.length = __pyx_t_17;

  /* "neuralcoref/document.pyx":88
 *     hashes.keep_tags.arr, hashes.keep_tags.length = <hash_t*>keep_tags.data, keep_tags.shape[0]
 *     hashes.PRP_tags.arr, hashes.PRP_tags.length = <hash_t*>PRP_tags.data, PRP_tags.shape[0]
 *     hashes.leave_dep.arr, hashes.leave_dep.length = <hash_t*>leave_dep.data, leave_dep.shape[0]             # <<<<<<<<<<<<<<
 *     hashes.keep_dep.arr, hashes.keep_dep.length = <hash_t*>keep_dep.data, keep_dep.shape[0]
 *     hashes.nsubj_or_dep.arr, hashes.nsubj_or_dep.length = <hash_t*>nsubj_or_dep.data, nsubj_or_dep.shape[0]
 */
  __pyx_t_16 = ((__pyx_t_5spacy_8typedefs_hash_t *)__pyx_v_leave_dep->data);
  __pyx_t_17 = (__pyx_v_leave_dep->dimensions[0]);
  __pyx_v_hashes.leave_dep.arr = __pyx_t_16;
  __pyx_v_hashes.leave_dep.length = __pyx_t_17;

  /* "neuralcoref/document.pyx":89
 *     hashes.PRP_tags.arr, hashes.PRP_tags.length = <hash_t*>PRP_tags.data, PRP_tags.shape[0]
 *     hashes.leave_dep.arr, hashes.leave_dep.length = <hash_t*>leave_dep.data, leave_dep.shape[0]
 *     hashes.keep_dep.arr, hashes.keep_dep.length = <hash_t*>keep_dep.data, keep_dep.shape[0]             # <<<<<<<<<<<<<<
 *     hashes.nsubj_or_dep.arr, hashes.nsubj_or_dep.length = <hash_t*>nsubj_or_dep.data, nsubj_or_dep.shape[0]
 *     hashes.conj_or_prep.arr, hashes.conj_or_prep.length = <hash_t*>conj_or_prep.data, conj_or_prep.shape[0]
 */
  __pyx_t_16 = ((__pyx_t_5spacy_8typedefs_hash_t *)__pyx_v_keep_dep->data);
  __pyx_t_17 = (__pyx_v_keep_dep->dimensions[0]);
  __pyx_v_hashes.keep_dep.arr = __pyx_t_16;
  __pyx_v_hashes.keep_dep.length = __pyx_t_17;

  /* "neuralcoref/document.pyx":90
 *     hashes.leave_dep.arr, hashes.leave_dep.length = <hash_t*>leave_dep.data, leave_dep.shape[0]
 *     hashes.keep_dep.arr, hashes.keep_dep.length = <hash_t*>keep_dep.data, keep_dep.shape[0]
 *     hashes.nsubj_or_dep.arr, hashes.nsubj_or_dep.length = <hash_t*>nsubj_or_dep.data, nsubj_or_dep.shape[0]             # <<<<<<<<<<<<<<
 *     hashes.conj_or_prep.arr, hashes.conj_or_prep.length = <hash_t*>conj_or_prep.data, conj_or_prep.shape[0]
 *     hashes.remove_pos.arr, hashes.remove_pos.length = <hash_t*>remove_pos.data, remove_pos.shape[0]
 */
  __pyx_t_16 = ((__pyx_t_5spacy_8typedefs_hash_t *)__pyx_v_nsubj_or_dep->data);
  __pyx_t_17 = (__pyx_v_nsubj_or_dep->dimensions[0]);
  __pyx_v_hashes.nsubj_or_dep.arr = __pyx_t_16;
  __pyx_v_hashes.nsubj_or_dep.length = __pyx_t_17;

  /* "neuralcoref/document.pyx":91
 *     hashes.keep_dep.arr, hashes.keep_dep.length = <hash_t*>keep_dep.data, keep_dep.shape[0]
 *     hashes.nsubj_or_dep.arr, hashes.nsubj_or_dep.length = <hash_t*>nsubj_or_dep.data, nsubj_or_dep.shape[0]
 *     hashes.conj_or_prep.arr, hashes.conj_or_prep.length = <hash_t*>conj_or_prep.data, conj_or_prep.shape[0]             # <<<<<<<<<<<<<<
 *     hashes.remove_pos.arr, hashes.remove_pos.length = <hash_t*>remove_pos.data, remove_pos.shape[0]
 *     hashes.lower_not_end.arr, hashes.lower_not_end.length = <hash_t*>lower_not_end.data, lower_not_end.shape[0]
 */
  __pyx_t_16 = ((__pyx_t_5spacy_8typedefs_hash_t *)__pyx_v_conj_or_prep->data);
  __pyx_t_17 = (__pyx_v_conj_or_prep->dimensions[0]);
  __pyx_v_hashes.conj_or_prep.arr = __pyx_t_16;
  __pyx_v_hashes.conj_or_prep.length = __pyx_t_17;

  /* "neuralcoref/document.pyx":92
 *     hashes.nsubj_or_dep.arr, hashes.nsubj_or_dep.length = <hash_t*>nsubj_or_dep.data, nsubj_or_dep.shape[0]
 *     hashes.conj_or_prep.arr, hashes.conj_or_prep.length = <hash_t*>conj_or_prep.data, conj_or_prep.shape[0]
 *     hashes.remove_pos.arr, hashes.remove_pos.length = <hash_t*>remove_pos.data, remove_pos.shape[0]             # <<<<<<<<<<<<<<
 *     hashes.lower_not_end.arr, hashes.lower_not_end.length = <hash_t*>lower_not_end.data, lower_not_end.shape[0]
 *     hashes.POSSESSIVE_MARK = POSSESSIVE_MARK
 */
  __pyx_t_16 = ((__pyx_t_5spacy_8typedefs_hash_t *)__pyx_v_remove_pos->data);
  __pyx_t_17 = (__pyx_v_remove_pos->dimensions[0]);
  __pyx_v_hashes.remove_pos.arr = __pyx_t_16;
  __pyx_v_hashes.remove_pos.length = __pyx_t_17;

  /* "neuralcoref/document.pyx":93
 *     hashes.conj_or_prep.arr, hashes.conj_or_prep.length = <hash_t*>conj_or_prep.data, conj_or_prep.shape[0]
 *     hashes.remove_pos.arr, hashes.remove_pos.length = <hash_t*>remove_pos.data, remove_pos.shape[0]
 *     hashes.lower_not_end.arr, hashes.lower_not_end.length = <hash_t*>lower_not_end.data, lower_not_end.shape[0]             # <<<<<<<<<<<<<<
 *     hashes.POSSESSIVE_MARK = POSSESSIVE_MARK
 *     hashes.NSUBJ_MARK = NSUBJ_MARK
 */
  __pyx_t_16 = ((__pyx_t_5spacy_8typedefs_hash_t *)__pyx_v_lower_not_end->data);
  __pyx_t_17 = (__pyx_v_lower_not_end->dimensions[0]);
  __pyx_v_hashes.lower_not_end.arr = __pyx_t_16;
  __pyx_v_hashes.lower_not_end.length = __pyx_t_17;

  /* "neuralcoref/document.pyx":94
 *     hashes.remove_pos.arr, hashes.remove_pos.length = <hash_t*>remove_pos.data, remove_pos.shape[0]
 *     hashes.lower_not_end.arr, hashes.lower_not_end.length = <hash_t*>lower_not_end.data, lower_not_end.shape[0]
 *     hashes.POSSESSIVE_MARK = POSSESSIVE_MARK             # <<<<<<<<<<<<<<
 *     hashes.NSUBJ_MARK = NSUBJ_MARK
 *     hashes.IN_TAG = IN_TAG
 */
  __pyx_v_hashes.POSSESSIVE_MARK = __pyx_v_POSSESSIVE_MARK;

  /* "neuralcoref/document.pyx":95
 *     hashes.lower_not_end.arr, hashes.lower_not_end.length = <hash_t*>lower_not_end.data, lower_not_end.shape[0]
 *     hashes.POSSESSIVE_MARK = POSSESSIVE_MARK
 *     hashes.NSUBJ_MARK = NSUBJ_MARK             # <<<<<<<<<<<<<<
 *     hashes.IN_TAG = IN_TAG
 *     hashes.MARK_DEP = MARK_DEP
 */
  __pyx_v_hashes.NSUBJ_MARK = __pyx_v_NSUBJ_MARK;

  /* "neuralcoref/document.pyx":96
 *     hashes.POSSESSIVE_MARK = POSSESSIVE_MARK
 *     hashes.NSUBJ_MARK = NSUBJ_MARK
 *     hashes.IN_TAG = IN_TAG             # <<<<<<<<<<<<<<
 *     hashes.MARK_DEP = MARK_DEP
 *     return hashes
 */
  __pyx_v_hashes.IN_TAG = __pyx_v_IN_TAG;

  /* "neuralcoref/document.pyx":97
 *     hashes.NSUBJ_MARK = NSUBJ_MARK
 *     hashes.IN_TAG = IN_TAG
 *     hashes.MARK_DEP = MARK_DEP             # <<<<<<<<<<<<<<
 *     return hashes
 * 
 */
  __pyx_v_hashes.MARK_DEP = __pyx_v_MARK_DEP;

  /* "neuralcoref/document.pyx":98
 *     hashes.IN_TAG = IN_TAG
 *     hashes.MARK_DEP = MARK_DEP
 *     return hashes             # <<<<<<<<<<<<<<
 * 
 * # Utility to remove bad endings
 */
  __pyx_r = __pyx_v_hashes;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":70
 *     return False
 * 
 * cdef HashesList get_hash_lookups(StringStore store):             # <<<<<<<<<<<<<<
 *     cdef HashesList hashes
 *     cdef np.ndarray[attr_t, ndim=1] no_coref_list = numpy.asarray(list(store.add(st) for st in NO_COREF_LIST), dtype=numpy.uint64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_PRP_tags.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_conj_or_prep.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_keep_dep.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_keep_tags.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leave_dep.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lower_not_end.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_no_coref_list.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nsubj_or_dep.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_remove_pos.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("neuralcoref.document.get_hash_lookups", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_PRP_tags.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_conj_or_prep.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_keep_dep.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_keep_tags.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leave_dep.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lower_not_end.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_no_coref_list.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nsubj_or_dep.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_remove_pos.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_no_coref_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_keep_tags);
  __Pyx_XDECREF((PyObject *)__pyx_v_PRP_tags);
  __Pyx_XDECREF((PyObject *)__pyx_v_leave_dep);
  __Pyx_XDECREF((PyObject *)__pyx_v_keep_dep);
  __Pyx_XDECREF((PyObject *)__pyx_v_nsubj_or_dep);
  __Pyx_XDECREF((PyObject *)__pyx_v_conj_or_prep);
  __Pyx_XDECREF((PyObject *)__pyx_v_remove_pos);
  __Pyx_XDECREF((PyObject *)__pyx_v_lower_not_end);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":101
 * 
 * # Utility to remove bad endings
 * cdef enlarge_span(TokenC* doc_c, int i, int sent_start, int sent_end, int test,             # <<<<<<<<<<<<<<
 *                   HashesList hashes, StringStore store, bint debug=True):
 *     cdef int j
 */

static PyObject *__pyx_f_11neuralcoref_8document_enlarge_span(struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_doc_c, int __pyx_v_i, int __pyx_v_sent_start, int __pyx_v_sent_end, int __pyx_v_test, struct __pyx_t_11neuralcoref_8document_HashesList __pyx_v_hashes, struct __pyx_obj_5spacy_7strings_StringStore *__pyx_v_store, struct __pyx_opt_args_11neuralcoref_8document_enlarge_span *__pyx_optional_args) {

  /* "neuralcoref/document.pyx":102
 * # Utility to remove bad endings
 * cdef enlarge_span(TokenC* doc_c, int i, int sent_start, int sent_end, int test,
 *                   HashesList hashes, StringStore store, bint debug=True):             # <<<<<<<<<<<<<<
 *     cdef int j
 *     cdef uint32_t minchild_idx
 */
  int __pyx_v_debug = ((int)1);
  int __pyx_v_j;
  uint32_t __pyx_v_minchild_idx;
  uint32_t __pyx_v_maxchild_idx;
  struct __pyx_t_5spacy_7structs_TokenC __pyx_v_c;
  int __pyx_v_c_head;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  uint32_t __pyx_t_9;
  __Pyx_RefNannySetupContext("enlarge_span", 0);
  __Pyx_TraceCall("enlarge_span", __pyx_f[0], 101, 0, __PYX_ERR(0, 101, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_debug = __pyx_optional_args->debug;
    }
  }

  /* "neuralcoref/document.pyx":106
 *     cdef uint32_t minchild_idx
 *     cdef uint32_t maxchild_idx
 *     if debug: print(" Enlarge span")             # <<<<<<<<<<<<<<
 *     minchild_idx = i
 *     maxchild_idx = i
 */
  __pyx_t_1 = (__pyx_v_debug != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "neuralcoref/document.pyx":107
 *     cdef uint32_t maxchild_idx
 *     if debug: print(" Enlarge span")
 *     minchild_idx = i             # <<<<<<<<<<<<<<
 *     maxchild_idx = i
 *     for j in range(sent_start, sent_end):
 */
  __pyx_v_minchild_idx = __pyx_v_i;

  /* "neuralcoref/document.pyx":108
 *     if debug: print(" Enlarge span")
 *     minchild_idx = i
 *     maxchild_idx = i             # <<<<<<<<<<<<<<
 *     for j in range(sent_start, sent_end):
 *         c = doc_c[j]
 */
  __pyx_v_maxchild_idx = __pyx_v_i;

  /* "neuralcoref/document.pyx":109
 *     minchild_idx = i
 *     maxchild_idx = i
 *     for j in range(sent_start, sent_end):             # <<<<<<<<<<<<<<
 *         c = doc_c[j]
 *         c_head = j + c.head
 */
  __pyx_t_3 = __pyx_v_sent_end;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = __pyx_v_sent_start; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_j = __pyx_t_5;

    /* "neuralcoref/document.pyx":110
 *     maxchild_idx = i
 *     for j in range(sent_start, sent_end):
 *         c = doc_c[j]             # <<<<<<<<<<<<<<
 *         c_head = j + c.head
 *         if debug: print("minchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])
 */
    __pyx_v_c = (__pyx_v_doc_c[__pyx_v_j]);

    /* "neuralcoref/document.pyx":111
 *     for j in range(sent_start, sent_end):
 *         c = doc_c[j]
 *         c_head = j + c.head             # <<<<<<<<<<<<<<
 *         if debug: print("minchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])
 *         if c_head != i:
 */
    __pyx_v_c_head = (__pyx_v_j + __pyx_v_c.head);

    /* "neuralcoref/document.pyx":112
 *         c = doc_c[j]
 *         c_head = j + c.head
 *         if debug: print("minchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])             # <<<<<<<<<<<<<<
 *         if c_head != i:
 *             continue
 */
    __pyx_t_1 = (__pyx_v_debug != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_j]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_c_head]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_kp_u_minchild_c_c_head);
      __Pyx_GIVEREF(__pyx_kp_u_minchild_c_c_head);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_minchild_c_c_head);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
      __pyx_t_2 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }

    /* "neuralcoref/document.pyx":113
 *         c_head = j + c.head
 *         if debug: print("minchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])
 *         if c_head != i:             # <<<<<<<<<<<<<<
 *             continue
 *         if c.l_edge >= minchild_idx:
 */
    __pyx_t_1 = ((__pyx_v_c_head != __pyx_v_i) != 0);
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":114
 *         if debug: print("minchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])
 *         if c_head != i:
 *             continue             # <<<<<<<<<<<<<<
 *         if c.l_edge >= minchild_idx:
 *             continue
 */
      goto __pyx_L4_continue;

      /* "neuralcoref/document.pyx":113
 *         c_head = j + c.head
 *         if debug: print("minchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])
 *         if c_head != i:             # <<<<<<<<<<<<<<
 *             continue
 *         if c.l_edge >= minchild_idx:
 */
    }

    /* "neuralcoref/document.pyx":115
 *         if c_head != i:
 *             continue
 *         if c.l_edge >= minchild_idx:             # <<<<<<<<<<<<<<
 *             continue
 *         if test == 0 \
 */
    __pyx_t_1 = ((__pyx_v_c.l_edge >= __pyx_v_minchild_idx) != 0);
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":116
 *             continue
 *         if c.l_edge >= minchild_idx:
 *             continue             # <<<<<<<<<<<<<<
 *         if test == 0 \
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 */
      goto __pyx_L4_continue;

      /* "neuralcoref/document.pyx":115
 *         if c_head != i:
 *             continue
 *         if c.l_edge >= minchild_idx:             # <<<<<<<<<<<<<<
 *             continue
 *         if test == 0 \
 */
    }

    /* "neuralcoref/document.pyx":117
 *         if c.l_edge >= minchild_idx:
 *             continue
 *         if test == 0 \             # <<<<<<<<<<<<<<
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 */
    __pyx_t_8 = ((__pyx_v_test == 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L10_bool_binop_done;
    }

    /* "neuralcoref/document.pyx":118
 *             continue
 *         if test == 0 \
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \             # <<<<<<<<<<<<<<
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 *             minchild_idx = c.l_edge
 */
    __pyx_t_8 = ((__pyx_v_test == 1) != 0);
    if (!__pyx_t_8) {
      goto __pyx_L12_next_or;
    } else {
    }
    __pyx_t_8 = (__pyx_f_11neuralcoref_8document_inside(__pyx_v_c.dep, __pyx_v_hashes.nsubj_or_dep) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_L12_next_or:;

    /* "neuralcoref/document.pyx":119
 *         if test == 0 \
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):             # <<<<<<<<<<<<<<
 *             minchild_idx = c.l_edge
 *             if debug: print("keep as minchild", store[doc_c[minchild_idx].lex.lower])
 */
    __pyx_t_8 = ((__pyx_v_test == 2) != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_8 = ((__pyx_v_c.head == __pyx_v_i) != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_8 = ((!(__pyx_f_11neuralcoref_8document_inside(__pyx_v_c.dep, __pyx_v_hashes.conj_or_prep) != 0)) != 0);
    __pyx_t_1 = __pyx_t_8;
    __pyx_L10_bool_binop_done:;

    /* "neuralcoref/document.pyx":117
 *         if c.l_edge >= minchild_idx:
 *             continue
 *         if test == 0 \             # <<<<<<<<<<<<<<
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 */
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":120
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 *             minchild_idx = c.l_edge             # <<<<<<<<<<<<<<
 *             if debug: print("keep as minchild", store[doc_c[minchild_idx].lex.lower])
 *     for j in range(sent_start, sent_end):
 */
      __pyx_t_9 = __pyx_v_c.l_edge;
      __pyx_v_minchild_idx = __pyx_t_9;

      /* "neuralcoref/document.pyx":121
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 *             minchild_idx = c.l_edge
 *             if debug: print("keep as minchild", store[doc_c[minchild_idx].lex.lower])             # <<<<<<<<<<<<<<
 *     for j in range(sent_start, sent_end):
 *         c = doc_c[j]
 */
      __pyx_t_1 = (__pyx_v_debug != 0);
      if (__pyx_t_1) {
        __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_minchild_idx]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_kp_u_keep_as_minchild);
        __Pyx_GIVEREF(__pyx_kp_u_keep_as_minchild);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_keep_as_minchild);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "neuralcoref/document.pyx":117
 *         if c.l_edge >= minchild_idx:
 *             continue
 *         if test == 0 \             # <<<<<<<<<<<<<<
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 */
    }
    __pyx_L4_continue:;
  }

  /* "neuralcoref/document.pyx":122
 *             minchild_idx = c.l_edge
 *             if debug: print("keep as minchild", store[doc_c[minchild_idx].lex.lower])
 *     for j in range(sent_start, sent_end):             # <<<<<<<<<<<<<<
 *         c = doc_c[j]
 *         c_head = j + c.head
 */
  __pyx_t_3 = __pyx_v_sent_end;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = __pyx_v_sent_start; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_j = __pyx_t_5;

    /* "neuralcoref/document.pyx":123
 *             if debug: print("keep as minchild", store[doc_c[minchild_idx].lex.lower])
 *     for j in range(sent_start, sent_end):
 *         c = doc_c[j]             # <<<<<<<<<<<<<<
 *         c_head = j + c.head
 *         if debug: print("maxchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])
 */
    __pyx_v_c = (__pyx_v_doc_c[__pyx_v_j]);

    /* "neuralcoref/document.pyx":124
 *     for j in range(sent_start, sent_end):
 *         c = doc_c[j]
 *         c_head = j + c.head             # <<<<<<<<<<<<<<
 *         if debug: print("maxchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])
 *         if c_head != i:
 */
    __pyx_v_c_head = (__pyx_v_j + __pyx_v_c.head);

    /* "neuralcoref/document.pyx":125
 *         c = doc_c[j]
 *         c_head = j + c.head
 *         if debug: print("maxchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])             # <<<<<<<<<<<<<<
 *         if c_head != i:
 *             continue
 */
    __pyx_t_1 = (__pyx_v_debug != 0);
    if (__pyx_t_1) {
      __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_j]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_c_head]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_u_maxchild_c_c_head);
      __Pyx_GIVEREF(__pyx_kp_u_maxchild_c_c_head);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_maxchild_c_c_head);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_7);
      __pyx_t_6 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }

    /* "neuralcoref/document.pyx":126
 *         c_head = j + c.head
 *         if debug: print("maxchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])
 *         if c_head != i:             # <<<<<<<<<<<<<<
 *             continue
 *         if c.r_edge <= maxchild_idx:
 */
    __pyx_t_1 = ((__pyx_v_c_head != __pyx_v_i) != 0);
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":127
 *         if debug: print("maxchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])
 *         if c_head != i:
 *             continue             # <<<<<<<<<<<<<<
 *         if c.r_edge <= maxchild_idx:
 *             continue
 */
      goto __pyx_L17_continue;

      /* "neuralcoref/document.pyx":126
 *         c_head = j + c.head
 *         if debug: print("maxchild c & c.head:", store[doc_c[j].lex.lower], store[doc_c[c_head].lex.lower])
 *         if c_head != i:             # <<<<<<<<<<<<<<
 *             continue
 *         if c.r_edge <= maxchild_idx:
 */
    }

    /* "neuralcoref/document.pyx":128
 *         if c_head != i:
 *             continue
 *         if c.r_edge <= maxchild_idx:             # <<<<<<<<<<<<<<
 *             continue
 *         if test == 0 \
 */
    __pyx_t_1 = ((__pyx_v_c.r_edge <= __pyx_v_maxchild_idx) != 0);
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":129
 *             continue
 *         if c.r_edge <= maxchild_idx:
 *             continue             # <<<<<<<<<<<<<<
 *         if test == 0 \
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 */
      goto __pyx_L17_continue;

      /* "neuralcoref/document.pyx":128
 *         if c_head != i:
 *             continue
 *         if c.r_edge <= maxchild_idx:             # <<<<<<<<<<<<<<
 *             continue
 *         if test == 0 \
 */
    }

    /* "neuralcoref/document.pyx":130
 *         if c.r_edge <= maxchild_idx:
 *             continue
 *         if test == 0 \             # <<<<<<<<<<<<<<
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 */
    __pyx_t_8 = ((__pyx_v_test == 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L23_bool_binop_done;
    }

    /* "neuralcoref/document.pyx":131
 *             continue
 *         if test == 0 \
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \             # <<<<<<<<<<<<<<
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 *             maxchild_idx = c.r_edge
 */
    __pyx_t_8 = ((__pyx_v_test == 1) != 0);
    if (!__pyx_t_8) {
      goto __pyx_L25_next_or;
    } else {
    }
    __pyx_t_8 = (__pyx_f_11neuralcoref_8document_inside(__pyx_v_c.dep, __pyx_v_hashes.nsubj_or_dep) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L23_bool_binop_done;
    }
    __pyx_L25_next_or:;

    /* "neuralcoref/document.pyx":132
 *         if test == 0 \
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):             # <<<<<<<<<<<<<<
 *             maxchild_idx = c.r_edge
 *             if debug: print("keep as maxchild", store[doc_c[maxchild_idx].lex.lower])
 */
    __pyx_t_8 = ((__pyx_v_test == 2) != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L23_bool_binop_done;
    }
    __pyx_t_8 = ((__pyx_v_c.head == __pyx_v_i) != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L23_bool_binop_done;
    }
    __pyx_t_8 = ((!(__pyx_f_11neuralcoref_8document_inside(__pyx_v_c.dep, __pyx_v_hashes.conj_or_prep) != 0)) != 0);
    __pyx_t_1 = __pyx_t_8;
    __pyx_L23_bool_binop_done:;

    /* "neuralcoref/document.pyx":130
 *         if c.r_edge <= maxchild_idx:
 *             continue
 *         if test == 0 \             # <<<<<<<<<<<<<<
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 */
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":133
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 *             maxchild_idx = c.r_edge             # <<<<<<<<<<<<<<
 *             if debug: print("keep as maxchild", store[doc_c[maxchild_idx].lex.lower])
 *     if debug:
 */
      __pyx_t_9 = __pyx_v_c.r_edge;
      __pyx_v_maxchild_idx = __pyx_t_9;

      /* "neuralcoref/document.pyx":134
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 *             maxchild_idx = c.r_edge
 *             if debug: print("keep as maxchild", store[doc_c[maxchild_idx].lex.lower])             # <<<<<<<<<<<<<<
 *     if debug:
 *         print("left side before cleaning:", store[doc_c[minchild_idx].lex.lower])
 */
      __pyx_t_1 = (__pyx_v_debug != 0);
      if (__pyx_t_1) {
        __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_maxchild_idx]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 134, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_kp_u_keep_as_maxchild);
        __Pyx_GIVEREF(__pyx_kp_u_keep_as_maxchild);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_keep_as_maxchild);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 134, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }

      /* "neuralcoref/document.pyx":130
 *         if c.r_edge <= maxchild_idx:
 *             continue
 *         if test == 0 \             # <<<<<<<<<<<<<<
 *                 or (test == 1 and inside(c.dep, hashes.nsubj_or_dep)) \
 *                 or (test == 2 and c.head == i and not inside(c.dep, hashes.conj_or_prep)):
 */
    }
    __pyx_L17_continue:;
  }

  /* "neuralcoref/document.pyx":135
 *             maxchild_idx = c.r_edge
 *             if debug: print("keep as maxchild", store[doc_c[maxchild_idx].lex.lower])
 *     if debug:             # <<<<<<<<<<<<<<
 *         print("left side before cleaning:", store[doc_c[minchild_idx].lex.lower])
 *         print("right side before cleaning:", store[doc_c[maxchild_idx].lex.lower])
 */
  __pyx_t_1 = (__pyx_v_debug != 0);
  if (__pyx_t_1) {

    /* "neuralcoref/document.pyx":136
 *             if debug: print("keep as maxchild", store[doc_c[maxchild_idx].lex.lower])
 *     if debug:
 *         print("left side before cleaning:", store[doc_c[minchild_idx].lex.lower])             # <<<<<<<<<<<<<<
 *         print("right side before cleaning:", store[doc_c[maxchild_idx].lex.lower])
 *     # Clean up endings and begginging
 */
    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_minchild_idx]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_u_left_side_before_cleaning);
    __Pyx_GIVEREF(__pyx_kp_u_left_side_before_cleaning);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_left_side_before_cleaning);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "neuralcoref/document.pyx":137
 *     if debug:
 *         print("left side before cleaning:", store[doc_c[minchild_idx].lex.lower])
 *         print("right side before cleaning:", store[doc_c[maxchild_idx].lex.lower])             # <<<<<<<<<<<<<<
 *     # Clean up endings and begginging
 *     while maxchild_idx >= minchild_idx and (inside(doc_c[maxchild_idx].pos, hashes.remove_pos)
 */
    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_maxchild_idx]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_u_right_side_before_cleaning);
    __Pyx_GIVEREF(__pyx_kp_u_right_side_before_cleaning);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_right_side_before_cleaning);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "neuralcoref/document.pyx":135
 *             maxchild_idx = c.r_edge
 *             if debug: print("keep as maxchild", store[doc_c[maxchild_idx].lex.lower])
 *     if debug:             # <<<<<<<<<<<<<<
 *         print("left side before cleaning:", store[doc_c[minchild_idx].lex.lower])
 *         print("right side before cleaning:", store[doc_c[maxchild_idx].lex.lower])
 */
  }

  /* "neuralcoref/document.pyx":139
 *         print("right side before cleaning:", store[doc_c[maxchild_idx].lex.lower])
 *     # Clean up endings and begginging
 *     while maxchild_idx >= minchild_idx and (inside(doc_c[maxchild_idx].pos, hashes.remove_pos)             # <<<<<<<<<<<<<<
 *                                         or inside(doc_c[maxchild_idx].lex.lower, hashes.lower_not_end)):
 *         PyErr_CheckSignals()
 */
  while (1) {
    __pyx_t_8 = ((__pyx_v_maxchild_idx >= __pyx_v_minchild_idx) != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L33_bool_binop_done;
    }

    /* "neuralcoref/document.pyx":140
 *     # Clean up endings and begginging
 *     while maxchild_idx >= minchild_idx and (inside(doc_c[maxchild_idx].pos, hashes.remove_pos)
 *                                         or inside(doc_c[maxchild_idx].lex.lower, hashes.lower_not_end)):             # <<<<<<<<<<<<<<
 *         PyErr_CheckSignals()
 *         if debug: print("Removing last token", store[doc_c[maxchild_idx].lex.lower], store[doc_c[maxchild_idx].tag])
 */
    __pyx_t_8 = (__pyx_f_11neuralcoref_8document_inside((__pyx_v_doc_c[__pyx_v_maxchild_idx]).pos, __pyx_v_hashes.remove_pos) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L33_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_f_11neuralcoref_8document_inside((__pyx_v_doc_c[__pyx_v_maxchild_idx]).lex->lower, __pyx_v_hashes.lower_not_end) != 0);
    __pyx_t_1 = __pyx_t_8;
    __pyx_L33_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "neuralcoref/document.pyx":141
 *     while maxchild_idx >= minchild_idx and (inside(doc_c[maxchild_idx].pos, hashes.remove_pos)
 *                                         or inside(doc_c[maxchild_idx].lex.lower, hashes.lower_not_end)):
 *         PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 *         if debug: print("Removing last token", store[doc_c[maxchild_idx].lex.lower], store[doc_c[maxchild_idx].tag])
 *         maxchild_idx -= 1 # We don't want mentions finishing with 's or conjunctions/punctuation
 */
    __pyx_t_3 = PyErr_CheckSignals(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 141, __pyx_L1_error)

    /* "neuralcoref/document.pyx":142
 *                                         or inside(doc_c[maxchild_idx].lex.lower, hashes.lower_not_end)):
 *         PyErr_CheckSignals()
 *         if debug: print("Removing last token", store[doc_c[maxchild_idx].lex.lower], store[doc_c[maxchild_idx].tag])             # <<<<<<<<<<<<<<
 *         maxchild_idx -= 1 # We don't want mentions finishing with 's or conjunctions/punctuation
 *     while minchild_idx <= maxchild_idx and (inside(doc_c[minchild_idx].pos, hashes.remove_pos)
 */
    __pyx_t_1 = (__pyx_v_debug != 0);
    if (__pyx_t_1) {
      __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_maxchild_idx]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_maxchild_idx]).tag, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_kp_u_Removing_last_token);
      __Pyx_GIVEREF(__pyx_kp_u_Removing_last_token);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Removing_last_token);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_2);
      __pyx_t_7 = 0;
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "neuralcoref/document.pyx":143
 *         PyErr_CheckSignals()
 *         if debug: print("Removing last token", store[doc_c[maxchild_idx].lex.lower], store[doc_c[maxchild_idx].tag])
 *         maxchild_idx -= 1 # We don't want mentions finishing with 's or conjunctions/punctuation             # <<<<<<<<<<<<<<
 *     while minchild_idx <= maxchild_idx and (inside(doc_c[minchild_idx].pos, hashes.remove_pos)
 *                                         or inside(doc_c[minchild_idx].lex.lower, hashes.lower_not_end)):
 */
    __pyx_v_maxchild_idx = (__pyx_v_maxchild_idx - 1);
  }

  /* "neuralcoref/document.pyx":144
 *         if debug: print("Removing last token", store[doc_c[maxchild_idx].lex.lower], store[doc_c[maxchild_idx].tag])
 *         maxchild_idx -= 1 # We don't want mentions finishing with 's or conjunctions/punctuation
 *     while minchild_idx <= maxchild_idx and (inside(doc_c[minchild_idx].pos, hashes.remove_pos)             # <<<<<<<<<<<<<<
 *                                         or inside(doc_c[minchild_idx].lex.lower, hashes.lower_not_end)):
 *         PyErr_CheckSignals()
 */
  while (1) {
    __pyx_t_8 = ((__pyx_v_minchild_idx <= __pyx_v_maxchild_idx) != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L39_bool_binop_done;
    }

    /* "neuralcoref/document.pyx":145
 *         maxchild_idx -= 1 # We don't want mentions finishing with 's or conjunctions/punctuation
 *     while minchild_idx <= maxchild_idx and (inside(doc_c[minchild_idx].pos, hashes.remove_pos)
 *                                         or inside(doc_c[minchild_idx].lex.lower, hashes.lower_not_end)):             # <<<<<<<<<<<<<<
 *         PyErr_CheckSignals()
 *         if debug: print("Removing first token", store[doc_c[minchild_idx].lex.lower], store[doc_c[minchild_idx].tag])
 */
    __pyx_t_8 = (__pyx_f_11neuralcoref_8document_inside((__pyx_v_doc_c[__pyx_v_minchild_idx]).pos, __pyx_v_hashes.remove_pos) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L39_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_f_11neuralcoref_8document_inside((__pyx_v_doc_c[__pyx_v_minchild_idx]).lex->lower, __pyx_v_hashes.lower_not_end) != 0);
    __pyx_t_1 = __pyx_t_8;
    __pyx_L39_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "neuralcoref/document.pyx":146
 *     while minchild_idx <= maxchild_idx and (inside(doc_c[minchild_idx].pos, hashes.remove_pos)
 *                                         or inside(doc_c[minchild_idx].lex.lower, hashes.lower_not_end)):
 *         PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 *         if debug: print("Removing first token", store[doc_c[minchild_idx].lex.lower], store[doc_c[minchild_idx].tag])
 *         minchild_idx += 1 # We don't want mentions starting with 's or conjunctions/punctuation
 */
    __pyx_t_3 = PyErr_CheckSignals(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 146, __pyx_L1_error)

    /* "neuralcoref/document.pyx":147
 *                                         or inside(doc_c[minchild_idx].lex.lower, hashes.lower_not_end)):
 *         PyErr_CheckSignals()
 *         if debug: print("Removing first token", store[doc_c[minchild_idx].lex.lower], store[doc_c[minchild_idx].tag])             # <<<<<<<<<<<<<<
 *         minchild_idx += 1 # We don't want mentions starting with 's or conjunctions/punctuation
 *     if debug:
 */
    __pyx_t_1 = (__pyx_v_debug != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_minchild_idx]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_minchild_idx]).tag, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_kp_u_Removing_first_token);
      __Pyx_GIVEREF(__pyx_kp_u_Removing_first_token);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Removing_first_token);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
      __pyx_t_2 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }

    /* "neuralcoref/document.pyx":148
 *         PyErr_CheckSignals()
 *         if debug: print("Removing first token", store[doc_c[minchild_idx].lex.lower], store[doc_c[minchild_idx].tag])
 *         minchild_idx += 1 # We don't want mentions starting with 's or conjunctions/punctuation             # <<<<<<<<<<<<<<
 *     if debug:
 *         print("left side after cleaning:", store[doc_c[minchild_idx].lex.lower])
 */
    __pyx_v_minchild_idx = (__pyx_v_minchild_idx + 1);
  }

  /* "neuralcoref/document.pyx":149
 *         if debug: print("Removing first token", store[doc_c[minchild_idx].lex.lower], store[doc_c[minchild_idx].tag])
 *         minchild_idx += 1 # We don't want mentions starting with 's or conjunctions/punctuation
 *     if debug:             # <<<<<<<<<<<<<<
 *         print("left side after cleaning:", store[doc_c[minchild_idx].lex.lower])
 *         print("right side after cleaning:", store[doc_c[maxchild_idx].lex.lower])
 */
  __pyx_t_1 = (__pyx_v_debug != 0);
  if (__pyx_t_1) {

    /* "neuralcoref/document.pyx":150
 *         minchild_idx += 1 # We don't want mentions starting with 's or conjunctions/punctuation
 *     if debug:
 *         print("left side after cleaning:", store[doc_c[minchild_idx].lex.lower])             # <<<<<<<<<<<<<<
 *         print("right side after cleaning:", store[doc_c[maxchild_idx].lex.lower])
 *     return minchild_idx, maxchild_idx + 1
 */
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_minchild_idx]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_kp_u_left_side_after_cleaning);
    __Pyx_GIVEREF(__pyx_kp_u_left_side_after_cleaning);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_left_side_after_cleaning);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "neuralcoref/document.pyx":151
 *     if debug:
 *         print("left side after cleaning:", store[doc_c[minchild_idx].lex.lower])
 *         print("right side after cleaning:", store[doc_c[maxchild_idx].lex.lower])             # <<<<<<<<<<<<<<
 *     return minchild_idx, maxchild_idx + 1
 * 
 */
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_v_maxchild_idx]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_kp_u_right_side_after_cleaning);
    __Pyx_GIVEREF(__pyx_kp_u_right_side_after_cleaning);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_right_side_after_cleaning);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "neuralcoref/document.pyx":149
 *         if debug: print("Removing first token", store[doc_c[minchild_idx].lex.lower], store[doc_c[minchild_idx].tag])
 *         minchild_idx += 1 # We don't want mentions starting with 's or conjunctions/punctuation
 *     if debug:             # <<<<<<<<<<<<<<
 *         print("left side after cleaning:", store[doc_c[minchild_idx].lex.lower])
 *         print("right side after cleaning:", store[doc_c[maxchild_idx].lex.lower])
 */
  }

  /* "neuralcoref/document.pyx":152
 *         print("left side after cleaning:", store[doc_c[minchild_idx].lex.lower])
 *         print("right side after cleaning:", store[doc_c[maxchild_idx].lex.lower])
 *     return minchild_idx, maxchild_idx + 1             # <<<<<<<<<<<<<<
 * 
 * cdef add_span(int start, int end, SentSpans* mentions_spans, TokenC* doc_c, StringStore store, bint debug=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyInt_From_uint32_t(__pyx_v_minchild_idx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_long((__pyx_v_maxchild_idx + 1)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":101
 * 
 * # Utility to remove bad endings
 * cdef enlarge_span(TokenC* doc_c, int i, int sent_start, int sent_end, int test,             # <<<<<<<<<<<<<<
 *                   HashesList hashes, StringStore store, bint debug=True):
 *     cdef int j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("neuralcoref.document.enlarge_span", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_8add_span_2generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":157
 *     cdef int num = mentions_spans.num
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))             # <<<<<<<<<<<<<<
 *     mentions_spans.spans[num].start = start
 *     mentions_spans.spans[num].end = end
 */

static PyObject *__pyx_pf_11neuralcoref_8document_8add_span_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_11_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_11_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 157, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_8add_span_2generator10, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_add_span_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.add_span.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_8add_span_2generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 157, 0, __PYX_ERR(0, 157, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 157, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_end;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_start; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store)) { __Pyx_RaiseClosureNameError("store"); __PYX_ERR(0, 157, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store), (__pyx_cur_scope->__pyx_outer_scope->__pyx_v_doc_c[__pyx_cur_scope->__pyx_v_i]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_8add_span_5generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":162
 *     mentions_spans.num += 1
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))             # <<<<<<<<<<<<<<
 *         print(" mentions_spans.num: ", mentions_spans.num)
 *     return mentions_spans.num >= mentions_spans.max_spans
 */

static PyObject *__pyx_pf_11neuralcoref_8document_8add_span_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_12_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_12_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 162, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_8add_span_5generator11, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_add_span_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.add_span.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_8add_span_5generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 162, 0, __PYX_ERR(0, 162, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 162, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_end;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_start; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store)) { __Pyx_RaiseClosureNameError("store"); __PYX_ERR(0, 162, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store), (__pyx_cur_scope->__pyx_outer_scope->__pyx_v_doc_c[__pyx_cur_scope->__pyx_v_i]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":154
 *     return minchild_idx, maxchild_idx + 1
 * 
 * cdef add_span(int start, int end, SentSpans* mentions_spans, TokenC* doc_c, StringStore store, bint debug=True):             # <<<<<<<<<<<<<<
 *     cdef int num = mentions_spans.num
 *     if debug:
 */

static PyObject *__pyx_f_11neuralcoref_8document_add_span(int __pyx_v_start, int __pyx_v_end, struct __pyx_t_11neuralcoref_8document_SentSpans *__pyx_v_mentions_spans, struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_doc_c, struct __pyx_obj_5spacy_7strings_StringStore *__pyx_v_store, struct __pyx_opt_args_11neuralcoref_8document_add_span *__pyx_optional_args) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *__pyx_cur_scope;
  int __pyx_v_debug = ((int)1);
  int __pyx_v_num;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("add_span", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 154, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("add_span", __pyx_f[0], 154, 0, __PYX_ERR(0, 154, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_debug = __pyx_optional_args->debug;
    }
  }
  __pyx_cur_scope->__pyx_v_start = __pyx_v_start;
  __pyx_cur_scope->__pyx_v_end = __pyx_v_end;
  __pyx_cur_scope->__pyx_v_doc_c = __pyx_v_doc_c;
  __pyx_cur_scope->__pyx_v_store = __pyx_v_store;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_store);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_store);

  /* "neuralcoref/document.pyx":155
 * 
 * cdef add_span(int start, int end, SentSpans* mentions_spans, TokenC* doc_c, StringStore store, bint debug=True):
 *     cdef int num = mentions_spans.num             # <<<<<<<<<<<<<<
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))
 */
  __pyx_t_1 = __pyx_v_mentions_spans->num;
  __pyx_v_num = __pyx_t_1;

  /* "neuralcoref/document.pyx":156
 * cdef add_span(int start, int end, SentSpans* mentions_spans, TokenC* doc_c, StringStore store, bint debug=True):
 *     cdef int num = mentions_spans.num
 *     if debug:             # <<<<<<<<<<<<<<
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))
 *     mentions_spans.spans[num].start = start
 */
  __pyx_t_2 = (__pyx_v_debug != 0);
  if (__pyx_t_2) {

    /* "neuralcoref/document.pyx":157
 *     cdef int num = mentions_spans.num
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))             # <<<<<<<<<<<<<<
 *     mentions_spans.spans[num].start = start
 *     mentions_spans.spans[num].end = end
 */
    __pyx_t_3 = __pyx_pf_11neuralcoref_8document_8add_span_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyUnicode_Join(__pyx_kp_u__10, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_ustring__8, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":156
 * cdef add_span(int start, int end, SentSpans* mentions_spans, TokenC* doc_c, StringStore store, bint debug=True):
 *     cdef int num = mentions_spans.num
 *     if debug:             # <<<<<<<<<<<<<<
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))
 *     mentions_spans.spans[num].start = start
 */
  }

  /* "neuralcoref/document.pyx":158
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))
 *     mentions_spans.spans[num].start = start             # <<<<<<<<<<<<<<
 *     mentions_spans.spans[num].end = end
 *     mentions_spans.num += 1
 */
  (__pyx_v_mentions_spans->spans[__pyx_v_num]).start = __pyx_cur_scope->__pyx_v_start;

  /* "neuralcoref/document.pyx":159
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))
 *     mentions_spans.spans[num].start = start
 *     mentions_spans.spans[num].end = end             # <<<<<<<<<<<<<<
 *     mentions_spans.num += 1
 *     if debug:
 */
  (__pyx_v_mentions_spans->spans[__pyx_v_num]).end = __pyx_cur_scope->__pyx_v_end;

  /* "neuralcoref/document.pyx":160
 *     mentions_spans.spans[num].start = start
 *     mentions_spans.spans[num].end = end
 *     mentions_spans.num += 1             # <<<<<<<<<<<<<<
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))
 */
  __pyx_v_mentions_spans->num = (__pyx_v_mentions_spans->num + 1);

  /* "neuralcoref/document.pyx":161
 *     mentions_spans.spans[num].end = end
 *     mentions_spans.num += 1
 *     if debug:             # <<<<<<<<<<<<<<
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))
 *         print(" mentions_spans.num: ", mentions_spans.num)
 */
  __pyx_t_2 = (__pyx_v_debug != 0);
  if (__pyx_t_2) {

    /* "neuralcoref/document.pyx":162
 *     mentions_spans.num += 1
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))             # <<<<<<<<<<<<<<
 *         print(" mentions_spans.num: ", mentions_spans.num)
 *     return mentions_spans.num >= mentions_spans.max_spans
 */
    __pyx_t_3 = __pyx_pf_11neuralcoref_8document_8add_span_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyUnicode_Join(__pyx_kp_u__10, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_ustring__11, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":163
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))
 *         print(" mentions_spans.num: ", mentions_spans.num)             # <<<<<<<<<<<<<<
 *     return mentions_spans.num >= mentions_spans.max_spans
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_mentions_spans->num); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_ustring__12);
    __Pyx_GIVEREF(__pyx_ustring__12);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_ustring__12);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":161
 *     mentions_spans.spans[num].end = end
 *     mentions_spans.num += 1
 *     if debug:             # <<<<<<<<<<<<<<
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))
 *         print(" mentions_spans.num: ", mentions_spans.num)
 */
  }

  /* "neuralcoref/document.pyx":164
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))
 *         print(" mentions_spans.num: ", mentions_spans.num)
 *     return mentions_spans.num >= mentions_spans.max_spans             # <<<<<<<<<<<<<<
 * 
 * cdef _extract_from_sent(TokenC* doc_c, int sent_start, int sent_end, SentSpans* mentions_spans,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_mentions_spans->num >= __pyx_v_mentions_spans->max_spans)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":154
 *     return minchild_idx, maxchild_idx + 1
 * 
 * cdef add_span(int start, int end, SentSpans* mentions_spans, TokenC* doc_c, StringStore store, bint debug=True):             # <<<<<<<<<<<<<<
 *     cdef int num = mentions_spans.num
 *     if debug:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("neuralcoref.document.add_span", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":166
 *     return mentions_spans.num >= mentions_spans.max_spans
 * 
 * cdef _extract_from_sent(TokenC* doc_c, int sent_start, int sent_end, SentSpans* mentions_spans,             # <<<<<<<<<<<<<<
 *                         HashesList hashes, StringStore store, bint use_no_coref_list=True, bint debug=True):
 *     '''
 */

static PyObject *__pyx_f_11neuralcoref_8document__extract_from_sent(struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_doc_c, int __pyx_v_sent_start, int __pyx_v_sent_end, struct __pyx_t_11neuralcoref_8document_SentSpans *__pyx_v_mentions_spans, struct __pyx_t_11neuralcoref_8document_HashesList __pyx_v_hashes, struct __pyx_obj_5spacy_7strings_StringStore *__pyx_v_store, struct __pyx_opt_args_11neuralcoref_8document__extract_from_sent *__pyx_optional_args) {

  /* "neuralcoref/document.pyx":167
 * 
 * cdef _extract_from_sent(TokenC* doc_c, int sent_start, int sent_end, SentSpans* mentions_spans,
 *                         HashesList hashes, StringStore store, bint use_no_coref_list=True, bint debug=True):             # <<<<<<<<<<<<<<
 *     '''
 *     Extract Pronouns and Noun phrases mentions from a spacy Span
 */
  int __pyx_v_use_no_coref_list = ((int)1);
  int __pyx_v_debug = ((int)1);
  int __pyx_v_i;
  int __pyx_v_j;
  CYTHON_UNUSED int __pyx_v_endIdx;
  int __pyx_v_test;
  struct __pyx_t_5spacy_7structs_TokenC __pyx_v_token;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_start = NULL;
  PyObject *__pyx_v_end = NULL;
  struct __pyx_t_5spacy_7structs_TokenC __pyx_v_c;
  struct __pyx_t_5spacy_7structs_TokenC __pyx_v_tok;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  struct __pyx_t_5spacy_7structs_TokenC *__pyx_t_16;
  struct __pyx_t_5spacy_7structs_TokenC *__pyx_t_17;
  struct __pyx_t_5spacy_7structs_TokenC *__pyx_t_18;
  __Pyx_RefNannySetupContext("_extract_from_sent", 0);
  __Pyx_TraceCall("_extract_from_sent", __pyx_f[0], 166, 0, __PYX_ERR(0, 166, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_use_no_coref_list = __pyx_optional_args->use_no_coref_list;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_debug = __pyx_optional_args->debug;
      }
    }
  }

  /* "neuralcoref/document.pyx":173
 *     cdef int i, j, k, endIdx, minchild_idx, maxchild_idx, n_spans
 *     cdef bint test
 *     if debug:             # <<<<<<<<<<<<<<
 *         print(" Extract sents start, end:", sent_start, sent_end)
 * 
 */
  __pyx_t_1 = (__pyx_v_debug != 0);
  if (__pyx_t_1) {

    /* "neuralcoref/document.pyx":174
 *     cdef bint test
 *     if debug:
 *         print(" Extract sents start, end:", sent_start, sent_end)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(sent_start, sent_end):
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_sent_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_sent_end); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_ustring__14);
    __Pyx_GIVEREF(__pyx_ustring__14);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_ustring__14);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":173
 *     cdef int i, j, k, endIdx, minchild_idx, maxchild_idx, n_spans
 *     cdef bint test
 *     if debug:             # <<<<<<<<<<<<<<
 *         print(" Extract sents start, end:", sent_start, sent_end)
 * 
 */
  }

  /* "neuralcoref/document.pyx":176
 *         print(" Extract sents start, end:", sent_start, sent_end)
 * 
 *     for i in range(sent_start, sent_end):             # <<<<<<<<<<<<<<
 *         PyErr_CheckSignals()
 *         token = doc_c[i]
 */
  __pyx_t_5 = __pyx_v_sent_end;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = __pyx_v_sent_start; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "neuralcoref/document.pyx":177
 * 
 *     for i in range(sent_start, sent_end):
 *         PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 *         token = doc_c[i]
 *         if debug: print(" tok:", store[token.lex.lower], "tok.tag:", store[token.tag],
 */
    __pyx_t_8 = PyErr_CheckSignals(); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 177, __pyx_L1_error)

    /* "neuralcoref/document.pyx":178
 *     for i in range(sent_start, sent_end):
 *         PyErr_CheckSignals()
 *         token = doc_c[i]             # <<<<<<<<<<<<<<
 *         if debug: print(" tok:", store[token.lex.lower], "tok.tag:", store[token.tag],
 *                         "tok.pos:", store[token.pos], "tok.dep:", store[token.dep])
 */
    __pyx_v_token = (__pyx_v_doc_c[__pyx_v_i]);

    /* "neuralcoref/document.pyx":179
 *         PyErr_CheckSignals()
 *         token = doc_c[i]
 *         if debug: print(" tok:", store[token.lex.lower], "tok.tag:", store[token.tag],             # <<<<<<<<<<<<<<
 *                         "tok.pos:", store[token.pos], "tok.dep:", store[token.dep])
 *         if use_no_coref_list and inside(token.lex.lower, hashes.no_coref_list):
 */
    __pyx_t_1 = (__pyx_v_debug != 0);
    if (__pyx_t_1) {
      __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), __pyx_v_token.lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), __pyx_v_token.tag, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);

      /* "neuralcoref/document.pyx":180
 *         token = doc_c[i]
 *         if debug: print(" tok:", store[token.lex.lower], "tok.tag:", store[token.tag],
 *                         "tok.pos:", store[token.pos], "tok.dep:", store[token.dep])             # <<<<<<<<<<<<<<
 *         if use_no_coref_list and inside(token.lex.lower, hashes.no_coref_list):
 *             if debug: print("token in no_coref_list")
 */
      __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(__pyx_v_token.pos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_store), __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), __pyx_v_token.dep, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "neuralcoref/document.pyx":179
 *         PyErr_CheckSignals()
 *         token = doc_c[i]
 *         if debug: print(" tok:", store[token.lex.lower], "tok.tag:", store[token.tag],             # <<<<<<<<<<<<<<
 *                         "tok.pos:", store[token.pos], "tok.dep:", store[token.dep])
 *         if use_no_coref_list and inside(token.lex.lower, hashes.no_coref_list):
 */
      __pyx_t_10 = PyTuple_New(8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_ustring__16);
      __Pyx_GIVEREF(__pyx_ustring__16);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_ustring__16);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
      __Pyx_INCREF(__pyx_kp_u_tok_tag);
      __Pyx_GIVEREF(__pyx_kp_u_tok_tag);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_tok_tag);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_4);
      __Pyx_INCREF(__pyx_kp_u_tok_pos);
      __Pyx_GIVEREF(__pyx_kp_u_tok_pos);
      PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_kp_u_tok_pos);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_t_9);
      __Pyx_INCREF(__pyx_kp_u_tok_dep);
      __Pyx_GIVEREF(__pyx_kp_u_tok_dep);
      PyTuple_SET_ITEM(__pyx_t_10, 6, __pyx_kp_u_tok_dep);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 7, __pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_9 = 0;
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "neuralcoref/document.pyx":181
 *         if debug: print(" tok:", store[token.lex.lower], "tok.tag:", store[token.tag],
 *                         "tok.pos:", store[token.pos], "tok.dep:", store[token.dep])
 *         if use_no_coref_list and inside(token.lex.lower, hashes.no_coref_list):             # <<<<<<<<<<<<<<
 *             if debug: print("token in no_coref_list")
 *             continue
 */
    __pyx_t_11 = (__pyx_v_use_no_coref_list != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_1 = __pyx_t_11;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_11 = (__pyx_f_11neuralcoref_8document_inside(__pyx_v_token.lex->lower, __pyx_v_hashes.no_coref_list) != 0);
    __pyx_t_1 = __pyx_t_11;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":182
 *                         "tok.pos:", store[token.pos], "tok.dep:", store[token.dep])
 *         if use_no_coref_list and inside(token.lex.lower, hashes.no_coref_list):
 *             if debug: print("token in no_coref_list")             # <<<<<<<<<<<<<<
 *             continue
 *         if (not inside(token.tag, hashes.keep_tags) or inside(token.dep, hashes.leave_dep) \
 */
      __pyx_t_1 = (__pyx_v_debug != 0);
      if (__pyx_t_1) {
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "neuralcoref/document.pyx":183
 *         if use_no_coref_list and inside(token.lex.lower, hashes.no_coref_list):
 *             if debug: print("token in no_coref_list")
 *             continue             # <<<<<<<<<<<<<<
 *         if (not inside(token.tag, hashes.keep_tags) or inside(token.dep, hashes.leave_dep) \
 *             and not inside(token.dep, hashes.keep_dep)):
 */
      goto __pyx_L4_continue;

      /* "neuralcoref/document.pyx":181
 *         if debug: print(" tok:", store[token.lex.lower], "tok.tag:", store[token.tag],
 *                         "tok.pos:", store[token.pos], "tok.dep:", store[token.dep])
 *         if use_no_coref_list and inside(token.lex.lower, hashes.no_coref_list):             # <<<<<<<<<<<<<<
 *             if debug: print("token in no_coref_list")
 *             continue
 */
    }

    /* "neuralcoref/document.pyx":184
 *             if debug: print("token in no_coref_list")
 *             continue
 *         if (not inside(token.tag, hashes.keep_tags) or inside(token.dep, hashes.leave_dep) \             # <<<<<<<<<<<<<<
 *             and not inside(token.dep, hashes.keep_dep)):
 *             if debug: print("not pronoun or no right dependency")
 */
    __pyx_t_11 = ((!(__pyx_f_11neuralcoref_8document_inside(__pyx_v_token.tag, __pyx_v_hashes.keep_tags) != 0)) != 0);
    if (!__pyx_t_11) {
    } else {
      __pyx_t_1 = __pyx_t_11;
      goto __pyx_L12_bool_binop_done;
    }

    /* "neuralcoref/document.pyx":185
 *             continue
 *         if (not inside(token.tag, hashes.keep_tags) or inside(token.dep, hashes.leave_dep) \
 *             and not inside(token.dep, hashes.keep_dep)):             # <<<<<<<<<<<<<<
 *             if debug: print("not pronoun or no right dependency")
 *             continue
 */
    __pyx_t_11 = (__pyx_f_11neuralcoref_8document_inside(__pyx_v_token.dep, __pyx_v_hashes.leave_dep) != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_1 = __pyx_t_11;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_11 = ((!(__pyx_f_11neuralcoref_8document_inside(__pyx_v_token.dep, __pyx_v_hashes.keep_dep) != 0)) != 0);
    __pyx_t_1 = __pyx_t_11;
    __pyx_L12_bool_binop_done:;

    /* "neuralcoref/document.pyx":184
 *             if debug: print("token in no_coref_list")
 *             continue
 *         if (not inside(token.tag, hashes.keep_tags) or inside(token.dep, hashes.leave_dep) \             # <<<<<<<<<<<<<<
 *             and not inside(token.dep, hashes.keep_dep)):
 *             if debug: print("not pronoun or no right dependency")
 */
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":186
 *         if (not inside(token.tag, hashes.keep_tags) or inside(token.dep, hashes.leave_dep) \
 *             and not inside(token.dep, hashes.keep_dep)):
 *             if debug: print("not pronoun or no right dependency")             # <<<<<<<<<<<<<<
 *             continue
 *         # pronoun
 */
      __pyx_t_1 = (__pyx_v_debug != 0);
      if (__pyx_t_1) {
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 186, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "neuralcoref/document.pyx":187
 *             and not inside(token.dep, hashes.keep_dep)):
 *             if debug: print("not pronoun or no right dependency")
 *             continue             # <<<<<<<<<<<<<<
 *         # pronoun
 *         if inside(token.tag, hashes.PRP_tags): #re.match(r"PRP.*", token.tag_):
 */
      goto __pyx_L4_continue;

      /* "neuralcoref/document.pyx":184
 *             if debug: print("token in no_coref_list")
 *             continue
 *         if (not inside(token.tag, hashes.keep_tags) or inside(token.dep, hashes.leave_dep) \             # <<<<<<<<<<<<<<
 *             and not inside(token.dep, hashes.keep_dep)):
 *             if debug: print("not pronoun or no right dependency")
 */
    }

    /* "neuralcoref/document.pyx":189
 *             continue
 *         # pronoun
 *         if inside(token.tag, hashes.PRP_tags): #re.match(r"PRP.*", token.tag_):             # <<<<<<<<<<<<<<
 *             if debug: print("PRP")
 *             endIdx = i + 1
 */
    __pyx_t_1 = (__pyx_f_11neuralcoref_8document_inside(__pyx_v_token.tag, __pyx_v_hashes.PRP_tags) != 0);
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":190
 *         # pronoun
 *         if inside(token.tag, hashes.PRP_tags): #re.match(r"PRP.*", token.tag_):
 *             if debug: print("PRP")             # <<<<<<<<<<<<<<
 *             endIdx = i + 1
 *             #span = doc_c[i: endIdx]
 */
      __pyx_t_1 = (__pyx_v_debug != 0);
      if (__pyx_t_1) {
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "neuralcoref/document.pyx":191
 *         if inside(token.tag, hashes.PRP_tags): #re.match(r"PRP.*", token.tag_):
 *             if debug: print("PRP")
 *             endIdx = i + 1             # <<<<<<<<<<<<<<
 *             #span = doc_c[i: endIdx]
 *             #if debug: print("==-- PRP store:", span)
 */
      __pyx_v_endIdx = (__pyx_v_i + 1);

      /* "neuralcoref/document.pyx":194
 *             #span = doc_c[i: endIdx]
 *             #if debug: print("==-- PRP store:", span)
 *             test = add_span(i, i+1, mentions_spans, doc_c, store)             # <<<<<<<<<<<<<<
 *             if test: return
 *             # when pronoun is a part of conjunction (e.g., you and I)
 */
      __pyx_t_2 = __pyx_f_11neuralcoref_8document_add_span(__pyx_v_i, (__pyx_v_i + 1), __pyx_v_mentions_spans, __pyx_v_doc_c, __pyx_v_store, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_test = __pyx_t_1;

      /* "neuralcoref/document.pyx":195
 *             #if debug: print("==-- PRP store:", span)
 *             test = add_span(i, i+1, mentions_spans, doc_c, store)
 *             if test: return             # <<<<<<<<<<<<<<
 *             # when pronoun is a part of conjunction (e.g., you and I)
 *             if token.r_kids > 0 or token.l_kids > 0:
 */
      __pyx_t_1 = (__pyx_v_test != 0);
      if (__pyx_t_1) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        goto __pyx_L0;
      }

      /* "neuralcoref/document.pyx":197
 *             if test: return
 *             # when pronoun is a part of conjunction (e.g., you and I)
 *             if token.r_kids > 0 or token.l_kids > 0:             # <<<<<<<<<<<<<<
 *                 #span = doc[token.l_edge : token.r_edge+1]
 *                 #if debug: print("==-- in conj store:", span)
 */
      __pyx_t_11 = ((__pyx_v_token.r_kids > 0) != 0);
      if (!__pyx_t_11) {
      } else {
        __pyx_t_1 = __pyx_t_11;
        goto __pyx_L20_bool_binop_done;
      }
      __pyx_t_11 = ((__pyx_v_token.l_kids > 0) != 0);
      __pyx_t_1 = __pyx_t_11;
      __pyx_L20_bool_binop_done:;
      if (__pyx_t_1) {

        /* "neuralcoref/document.pyx":200
 *                 #span = doc[token.l_edge : token.r_edge+1]
 *                 #if debug: print("==-- in conj store:", span)
 *                 test = add_span(token.l_edge, token.r_edge+1, mentions_spans, doc_c, store)             # <<<<<<<<<<<<<<
 *                 if test: return
 *             continue
 */
        __pyx_t_2 = __pyx_f_11neuralcoref_8document_add_span(__pyx_v_token.l_edge, (__pyx_v_token.r_edge + 1), __pyx_v_mentions_spans, __pyx_v_doc_c, __pyx_v_store, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 200, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_test = __pyx_t_1;

        /* "neuralcoref/document.pyx":201
 *                 #if debug: print("==-- in conj store:", span)
 *                 test = add_span(token.l_edge, token.r_edge+1, mentions_spans, doc_c, store)
 *                 if test: return             # <<<<<<<<<<<<<<
 *             continue
 *         # Add NP mention
 */
        __pyx_t_1 = (__pyx_v_test != 0);
        if (__pyx_t_1) {
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = Py_None; __Pyx_INCREF(Py_None);
          goto __pyx_L0;
        }

        /* "neuralcoref/document.pyx":197
 *             if test: return
 *             # when pronoun is a part of conjunction (e.g., you and I)
 *             if token.r_kids > 0 or token.l_kids > 0:             # <<<<<<<<<<<<<<
 *                 #span = doc[token.l_edge : token.r_edge+1]
 *                 #if debug: print("==-- in conj store:", span)
 */
      }

      /* "neuralcoref/document.pyx":202
 *                 test = add_span(token.l_edge, token.r_edge+1, mentions_spans, doc_c, store)
 *                 if test: return
 *             continue             # <<<<<<<<<<<<<<
 *         # Add NP mention
 *         if debug:
 */
      goto __pyx_L4_continue;

      /* "neuralcoref/document.pyx":189
 *             continue
 *         # pronoun
 *         if inside(token.tag, hashes.PRP_tags): #re.match(r"PRP.*", token.tag_):             # <<<<<<<<<<<<<<
 *             if debug: print("PRP")
 *             endIdx = i + 1
 */
    }

    /* "neuralcoref/document.pyx":204
 *             continue
 *         # Add NP mention
 *         if debug:             # <<<<<<<<<<<<<<
 *             print("NP or IN:", store[token.lex.lower])
 *             if store[token.tag] == 'IN':
 */
    __pyx_t_1 = (__pyx_v_debug != 0);
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":205
 *         # Add NP mention
 *         if debug:
 *             print("NP or IN:", store[token.lex.lower])             # <<<<<<<<<<<<<<
 *             if store[token.tag] == 'IN':
 *                 print("IN tag")
 */
      __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), __pyx_v_token.lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_kp_u_NP_or_IN);
      __Pyx_GIVEREF(__pyx_kp_u_NP_or_IN);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_NP_or_IN);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "neuralcoref/document.pyx":206
 *         if debug:
 *             print("NP or IN:", store[token.lex.lower])
 *             if store[token.tag] == 'IN':             # <<<<<<<<<<<<<<
 *                 print("IN tag")
 *         # Take care of 's
 */
      __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), __pyx_v_token.tag, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_IN, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "neuralcoref/document.pyx":207
 *             print("NP or IN:", store[token.lex.lower])
 *             if store[token.tag] == 'IN':
 *                 print("IN tag")             # <<<<<<<<<<<<<<
 *         # Take care of 's
 *         if token.lex.lower == hashes.POSSESSIVE_MARK:
 */
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "neuralcoref/document.pyx":206
 *         if debug:
 *             print("NP or IN:", store[token.lex.lower])
 *             if store[token.tag] == 'IN':             # <<<<<<<<<<<<<<
 *                 print("IN tag")
 *         # Take care of 's
 */
      }

      /* "neuralcoref/document.pyx":204
 *             continue
 *         # Add NP mention
 *         if debug:             # <<<<<<<<<<<<<<
 *             print("NP or IN:", store[token.lex.lower])
 *             if store[token.tag] == 'IN':
 */
    }

    /* "neuralcoref/document.pyx":209
 *                 print("IN tag")
 *         # Take care of 's
 *         if token.lex.lower == hashes.POSSESSIVE_MARK:             # <<<<<<<<<<<<<<
 *             if debug: print("'s detected")
 *             h = i + token.head
 */
    __pyx_t_1 = ((__pyx_v_token.lex->lower == __pyx_v_hashes.POSSESSIVE_MARK) != 0);
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":210
 *         # Take care of 's
 *         if token.lex.lower == hashes.POSSESSIVE_MARK:
 *             if debug: print("'s detected")             # <<<<<<<<<<<<<<
 *             h = i + token.head
 *             j = 0
 */
      __pyx_t_1 = (__pyx_v_debug != 0);
      if (__pyx_t_1) {
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "neuralcoref/document.pyx":211
 *         if token.lex.lower == hashes.POSSESSIVE_MARK:
 *             if debug: print("'s detected")
 *             h = i + token.head             # <<<<<<<<<<<<<<
 *             j = 0
 *             while h != 0 and j < MAX_ITER:
 */
      __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_i + __pyx_v_token.head)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_h, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "neuralcoref/document.pyx":212
 *             if debug: print("'s detected")
 *             h = i + token.head
 *             j = 0             # <<<<<<<<<<<<<<
 *             while h != 0 and j < MAX_ITER:
 *                 if debug:
 */
      __pyx_v_j = 0;

      /* "neuralcoref/document.pyx":213
 *             h = i + token.head
 *             j = 0
 *             while h != 0 and j < MAX_ITER:             # <<<<<<<<<<<<<<
 *                 if debug:
 *                     print("token head:", h, h.dep, "head:", h + h.head)
 */
      while (1) {
        __pyx_t_2 = PyObject_RichCompare(__pyx_v_h, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_11) {
        } else {
          __pyx_t_1 = __pyx_t_11;
          goto __pyx_L29_bool_binop_done;
        }
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_ITER); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = PyObject_RichCompare(__pyx_t_2, __pyx_t_10, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_1 = __pyx_t_11;
        __pyx_L29_bool_binop_done:;
        if (!__pyx_t_1) break;

        /* "neuralcoref/document.pyx":214
 *             j = 0
 *             while h != 0 and j < MAX_ITER:
 *                 if debug:             # <<<<<<<<<<<<<<
 *                     print("token head:", h, h.dep, "head:", h + h.head)
 *                     print(id(h.head), id(h))
 */
        __pyx_t_1 = (__pyx_v_debug != 0);
        if (__pyx_t_1) {

          /* "neuralcoref/document.pyx":215
 *             while h != 0 and j < MAX_ITER:
 *                 if debug:
 *                     print("token head:", h, h.dep, "head:", h + h.head)             # <<<<<<<<<<<<<<
 *                     print(id(h.head), id(h))
 *                 if h.dep == hashes.NSUBJ_MARK:
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_dep); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 215, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_head_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 215, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_2 = PyNumber_Add(__pyx_v_h, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 215, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_kp_u_token_head);
          __Pyx_GIVEREF(__pyx_kp_u_token_head);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_token_head);
          __Pyx_INCREF(__pyx_v_h);
          __Pyx_GIVEREF(__pyx_v_h);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_h);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_9);
          __Pyx_INCREF(__pyx_kp_u_head);
          __Pyx_GIVEREF(__pyx_kp_u_head);
          PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_kp_u_head);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_2);
          __pyx_t_9 = 0;
          __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "neuralcoref/document.pyx":216
 *                 if debug:
 *                     print("token head:", h, h.dep, "head:", h + h.head)
 *                     print(id(h.head), id(h))             # <<<<<<<<<<<<<<
 *                 if h.dep == hashes.NSUBJ_MARK:
 *                     start, end = enlarge_span(doc_c, h, sent_start, sent_end, 1, hashes, store)
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_head_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 216, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, __pyx_v_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 216, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
          __pyx_t_10 = 0;
          __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "neuralcoref/document.pyx":214
 *             j = 0
 *             while h != 0 and j < MAX_ITER:
 *                 if debug:             # <<<<<<<<<<<<<<
 *                     print("token head:", h, h.dep, "head:", h + h.head)
 *                     print(id(h.head), id(h))
 */
        }

        /* "neuralcoref/document.pyx":217
 *                     print("token head:", h, h.dep, "head:", h + h.head)
 *                     print(id(h.head), id(h))
 *                 if h.dep == hashes.NSUBJ_MARK:             # <<<<<<<<<<<<<<
 *                     start, end = enlarge_span(doc_c, h, sent_start, sent_end, 1, hashes, store)
 *                     if debug: print("'s', i1:", store[doc_c[start].lex.lower], " i2:", store[doc_c[end].lex.lower])
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_dep); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyInt_From_uint64_t(__pyx_v_hashes.NSUBJ_MARK); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 217, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyObject_RichCompare(__pyx_t_2, __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 217, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 217, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_1) {

          /* "neuralcoref/document.pyx":218
 *                     print(id(h.head), id(h))
 *                 if h.dep == hashes.NSUBJ_MARK:
 *                     start, end = enlarge_span(doc_c, h, sent_start, sent_end, 1, hashes, store)             # <<<<<<<<<<<<<<
 *                     if debug: print("'s', i1:", store[doc_c[start].lex.lower], " i2:", store[doc_c[end].lex.lower])
 *                     #if debug: print("==-- 's' store:", span)
 */
          __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_h); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L1_error)
          __pyx_t_10 = __pyx_f_11neuralcoref_8document_enlarge_span(__pyx_v_doc_c, __pyx_t_8, __pyx_v_sent_start, __pyx_v_sent_end, 1, __pyx_v_hashes, __pyx_v_store, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 218, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
            PyObject* sequence = __pyx_t_10;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 218, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_2);
            #else
            __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 218, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_4 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_12 = Py_TYPE(__pyx_t_4)->tp_iternext;
            index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_4); if (unlikely(!__pyx_t_9)) goto __pyx_L33_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_9);
            index = 1; __pyx_t_2 = __pyx_t_12(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L33_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_2);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_4), 2) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
            __pyx_t_12 = NULL;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            goto __pyx_L34_unpacking_done;
            __pyx_L33_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_12 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 218, __pyx_L1_error)
            __pyx_L34_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_start, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_XDECREF_SET(__pyx_v_end, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "neuralcoref/document.pyx":219
 *                 if h.dep == hashes.NSUBJ_MARK:
 *                     start, end = enlarge_span(doc_c, h, sent_start, sent_end, 1, hashes, store)
 *                     if debug: print("'s', i1:", store[doc_c[start].lex.lower], " i2:", store[doc_c[end].lex.lower])             # <<<<<<<<<<<<<<
 *                     #if debug: print("==-- 's' store:", span)
 *                     test = add_span(start, end+1, mentions_spans, doc_c, store)
 */
          __pyx_t_1 = (__pyx_v_debug != 0);
          if (__pyx_t_1) {
            __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_start); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 219, __pyx_L1_error)
            __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_t_13]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 219, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_end); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 219, __pyx_L1_error)
            __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), (__pyx_v_doc_c[__pyx_t_13]).lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 219, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_INCREF(__pyx_kp_u_s_i1);
            __Pyx_GIVEREF(__pyx_kp_u_s_i1);
            PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_s_i1);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
            __Pyx_INCREF(__pyx_kp_u_i2);
            __Pyx_GIVEREF(__pyx_kp_u_i2);
            PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_i2);
            __Pyx_GIVEREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_2);
            __pyx_t_10 = 0;
            __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }

          /* "neuralcoref/document.pyx":221
 *                     if debug: print("'s', i1:", store[doc_c[start].lex.lower], " i2:", store[doc_c[end].lex.lower])
 *                     #if debug: print("==-- 's' store:", span)
 *                     test = add_span(start, end+1, mentions_spans, doc_c, store)             # <<<<<<<<<<<<<<
 *                     if test: return
 *                     break
 */
          __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_start); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L1_error)
          __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_end, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __pyx_f_11neuralcoref_8document_add_span(__pyx_t_8, __pyx_t_14, __pyx_v_mentions_spans, __pyx_v_doc_c, __pyx_v_store, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_v_test = __pyx_t_1;

          /* "neuralcoref/document.pyx":222
 *                     #if debug: print("==-- 's' store:", span)
 *                     test = add_span(start, end+1, mentions_spans, doc_c, store)
 *                     if test: return             # <<<<<<<<<<<<<<
 *                     break
 *                 h += h.head
 */
          __pyx_t_1 = (__pyx_v_test != 0);
          if (__pyx_t_1) {
            __Pyx_XDECREF(__pyx_r);
            __pyx_r = Py_None; __Pyx_INCREF(Py_None);
            goto __pyx_L0;
          }

          /* "neuralcoref/document.pyx":223
 *                     test = add_span(start, end+1, mentions_spans, doc_c, store)
 *                     if test: return
 *                     break             # <<<<<<<<<<<<<<
 *                 h += h.head
 *                 j += 1
 */
          goto __pyx_L28_break;

          /* "neuralcoref/document.pyx":217
 *                     print("token head:", h, h.dep, "head:", h + h.head)
 *                     print(id(h.head), id(h))
 *                 if h.dep == hashes.NSUBJ_MARK:             # <<<<<<<<<<<<<<
 *                     start, end = enlarge_span(doc_c, h, sent_start, sent_end, 1, hashes, store)
 *                     if debug: print("'s', i1:", store[doc_c[start].lex.lower], " i2:", store[doc_c[end].lex.lower])
 */
        }

        /* "neuralcoref/document.pyx":224
 *                     if test: return
 *                     break
 *                 h += h.head             # <<<<<<<<<<<<<<
 *                 j += 1
 *             assert j != MAX_ITER
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_head_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_v_h, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 224, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF_SET(__pyx_v_h, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "neuralcoref/document.pyx":225
 *                     break
 *                 h += h.head
 *                 j += 1             # <<<<<<<<<<<<<<
 *             assert j != MAX_ITER
 *             continue
 */
        __pyx_v_j = (__pyx_v_j + 1);
      }
      __pyx_L28_break:;

      /* "neuralcoref/document.pyx":226
 *                 h += h.head
 *                 j += 1
 *             assert j != MAX_ITER             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 226, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_ITER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = PyObject_RichCompare(__pyx_t_9, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 226, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 226, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_1)) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 226, __pyx_L1_error)
        }
      }
      #endif

      /* "neuralcoref/document.pyx":227
 *                 j += 1
 *             assert j != MAX_ITER
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         for j in range(sent_start, sent_end):
 */
      goto __pyx_L4_continue;

      /* "neuralcoref/document.pyx":209
 *                 print("IN tag")
 *         # Take care of 's
 *         if token.lex.lower == hashes.POSSESSIVE_MARK:             # <<<<<<<<<<<<<<
 *             if debug: print("'s detected")
 *             h = i + token.head
 */
    }

    /* "neuralcoref/document.pyx":229
 *             continue
 * 
 *         for j in range(sent_start, sent_end):             # <<<<<<<<<<<<<<
 *             c = doc_c[j]
 *             if debug and j + c.head == i:
 */
    __pyx_t_14 = __pyx_v_sent_end;
    __pyx_t_8 = __pyx_t_14;
    for (__pyx_t_15 = __pyx_v_sent_start; __pyx_t_15 < __pyx_t_8; __pyx_t_15+=1) {
      __pyx_v_j = __pyx_t_15;

      /* "neuralcoref/document.pyx":230
 * 
 *         for j in range(sent_start, sent_end):
 *             c = doc_c[j]             # <<<<<<<<<<<<<<
 *             if debug and j + c.head == i:
 *                 print(" token in span:", store[c.lex.lower])#, "- head & dep:", c.head, c.dep)
 */
      __pyx_v_c = (__pyx_v_doc_c[__pyx_v_j]);

      /* "neuralcoref/document.pyx":231
 *         for j in range(sent_start, sent_end):
 *             c = doc_c[j]
 *             if debug and j + c.head == i:             # <<<<<<<<<<<<<<
 *                 print(" token in span:", store[c.lex.lower])#, "- head & dep:", c.head, c.dep)
 *         start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)
 */
      __pyx_t_11 = (__pyx_v_debug != 0);
      if (__pyx_t_11) {
      } else {
        __pyx_t_1 = __pyx_t_11;
        goto __pyx_L40_bool_binop_done;
      }
      __pyx_t_11 = (((__pyx_v_j + __pyx_v_c.head) == __pyx_v_i) != 0);
      __pyx_t_1 = __pyx_t_11;
      __pyx_L40_bool_binop_done:;
      if (__pyx_t_1) {

        /* "neuralcoref/document.pyx":232
 *             c = doc_c[j]
 *             if debug and j + c.head == i:
 *                 print(" token in span:", store[c.lex.lower])#, "- head & dep:", c.head, c.dep)             # <<<<<<<<<<<<<<
 *         start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)
 *         if token.tag == hashes.IN_TAG and token.dep == hashes.MARK_DEP and start == end:
 */
        __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_store), __pyx_v_c.lex->lower, __pyx_t_5spacy_8typedefs_attr_t const , 0, __Pyx_PyInt_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_ustring__23);
        __Pyx_GIVEREF(__pyx_ustring__23);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_ustring__23);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "neuralcoref/document.pyx":231
 *         for j in range(sent_start, sent_end):
 *             c = doc_c[j]
 *             if debug and j + c.head == i:             # <<<<<<<<<<<<<<
 *                 print(" token in span:", store[c.lex.lower])#, "- head & dep:", c.head, c.dep)
 *         start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)
 */
      }
    }

    /* "neuralcoref/document.pyx":233
 *             if debug and j + c.head == i:
 *                 print(" token in span:", store[c.lex.lower])#, "- head & dep:", c.head, c.dep)
 *         start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)             # <<<<<<<<<<<<<<
 *         if token.tag == hashes.IN_TAG and token.dep == hashes.MARK_DEP and start == end:
 *             start, end = enlarge_span(doc_c, i + token.head, sent_start, sent_end, 0, hashes, store)
 */
    __pyx_t_10 = __pyx_f_11neuralcoref_8document_enlarge_span(__pyx_v_doc_c, __pyx_v_i, __pyx_v_sent_start, __pyx_v_sent_end, 0, __pyx_v_hashes, __pyx_v_store, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
      PyObject* sequence = __pyx_t_10;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 233, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 233, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 233, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_4)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_12(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L42_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_9 = __pyx_t_12(__pyx_t_4); if (unlikely(!__pyx_t_9)) goto __pyx_L42_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_4), 2) < 0) __PYX_ERR(0, 233, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L43_unpacking_done;
      __pyx_L42_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 233, __pyx_L1_error)
      __pyx_L43_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_start, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_end, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "neuralcoref/document.pyx":234
 *                 print(" token in span:", store[c.lex.lower])#, "- head & dep:", c.head, c.dep)
 *         start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)
 *         if token.tag == hashes.IN_TAG and token.dep == hashes.MARK_DEP and start == end:             # <<<<<<<<<<<<<<
 *             start, end = enlarge_span(doc_c, i + token.head, sent_start, sent_end, 0, hashes, store)
 *         #if debug:
 */
    __pyx_t_11 = ((__pyx_v_token.tag == __pyx_v_hashes.IN_TAG) != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_1 = __pyx_t_11;
      goto __pyx_L45_bool_binop_done;
    }
    __pyx_t_11 = ((__pyx_v_token.dep == __pyx_v_hashes.MARK_DEP) != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_1 = __pyx_t_11;
      goto __pyx_L45_bool_binop_done;
    }
    __pyx_t_10 = PyObject_RichCompare(__pyx_v_start, __pyx_v_end, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 234, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_1 = __pyx_t_11;
    __pyx_L45_bool_binop_done:;
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":235
 *         start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)
 *         if token.tag == hashes.IN_TAG and token.dep == hashes.MARK_DEP and start == end:
 *             start, end = enlarge_span(doc_c, i + token.head, sent_start, sent_end, 0, hashes, store)             # <<<<<<<<<<<<<<
 *         #if debug:
 *         #    print("left side:", left)
 */
      __pyx_t_10 = __pyx_f_11neuralcoref_8document_enlarge_span(__pyx_v_doc_c, (__pyx_v_i + __pyx_v_token.head), __pyx_v_sent_start, __pyx_v_sent_end, 0, __pyx_v_hashes, __pyx_v_store, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
        PyObject* sequence = __pyx_t_10;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 235, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_2);
        #else
        __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 235, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_4)->tp_iternext;
        index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_4); if (unlikely(!__pyx_t_9)) goto __pyx_L48_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        index = 1; __pyx_t_2 = __pyx_t_12(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L48_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_4), 2) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L49_unpacking_done;
        __pyx_L48_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 235, __pyx_L1_error)
        __pyx_L49_unpacking_done:;
      }
      __Pyx_DECREF_SET(__pyx_v_start, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_DECREF_SET(__pyx_v_end, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "neuralcoref/document.pyx":234
 *                 print(" token in span:", store[c.lex.lower])#, "- head & dep:", c.head, c.dep)
 *         start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)
 *         if token.tag == hashes.IN_TAG and token.dep == hashes.MARK_DEP and start == end:             # <<<<<<<<<<<<<<
 *             start, end = enlarge_span(doc_c, i + token.head, sent_start, sent_end, 0, hashes, store)
 *         #if debug:
 */
    }

    /* "neuralcoref/document.pyx":242
 *         #    maxchild_idx = max(right) if right else token.i
 *         #    print("full span:", doc[minchild_idx:maxchild_idx+1])
 *         if start == end:             # <<<<<<<<<<<<<<
 *             continue
 *         if doc_c[start].lex.lower == hashes.POSSESSIVE_MARK:
 */
    __pyx_t_10 = PyObject_RichCompare(__pyx_v_start, __pyx_v_end, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 242, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":243
 *         #    print("full span:", doc[minchild_idx:maxchild_idx+1])
 *         if start == end:
 *             continue             # <<<<<<<<<<<<<<
 *         if doc_c[start].lex.lower == hashes.POSSESSIVE_MARK:
 *             continue # we probably already have stored this mention
 */
      goto __pyx_L4_continue;

      /* "neuralcoref/document.pyx":242
 *         #    maxchild_idx = max(right) if right else token.i
 *         #    print("full span:", doc[minchild_idx:maxchild_idx+1])
 *         if start == end:             # <<<<<<<<<<<<<<
 *             continue
 *         if doc_c[start].lex.lower == hashes.POSSESSIVE_MARK:
 */
    }

    /* "neuralcoref/document.pyx":244
 *         if start == end:
 *             continue
 *         if doc_c[start].lex.lower == hashes.POSSESSIVE_MARK:             # <<<<<<<<<<<<<<
 *             continue # we probably already have stored this mention
 *         #span = doc_c[start:end]
 */
    __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_start); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 244, __pyx_L1_error)
    __pyx_t_1 = (((__pyx_v_doc_c[__pyx_t_13]).lex->lower == __pyx_v_hashes.POSSESSIVE_MARK) != 0);
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":245
 *             continue
 *         if doc_c[start].lex.lower == hashes.POSSESSIVE_MARK:
 *             continue # we probably already have stored this mention             # <<<<<<<<<<<<<<
 *         #span = doc_c[start:end]
 *         test = add_span(start, end, mentions_spans, doc_c, store)
 */
      goto __pyx_L4_continue;

      /* "neuralcoref/document.pyx":244
 *         if start == end:
 *             continue
 *         if doc_c[start].lex.lower == hashes.POSSESSIVE_MARK:             # <<<<<<<<<<<<<<
 *             continue # we probably already have stored this mention
 *         #span = doc_c[start:end]
 */
    }

    /* "neuralcoref/document.pyx":247
 *             continue # we probably already have stored this mention
 *         #span = doc_c[start:end]
 *         test = add_span(start, end, mentions_spans, doc_c, store)             # <<<<<<<<<<<<<<
 *         if test: return
 *         #if debug:
 */
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_start); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_end); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L1_error)
    __pyx_t_10 = __pyx_f_11neuralcoref_8document_add_span(__pyx_t_14, __pyx_t_8, __pyx_v_mentions_spans, __pyx_v_doc_c, __pyx_v_store, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_test = __pyx_t_1;

    /* "neuralcoref/document.pyx":248
 *         #span = doc_c[start:end]
 *         test = add_span(start, end, mentions_spans, doc_c, store)
 *         if test: return             # <<<<<<<<<<<<<<
 *         #if debug:
 *         #    print("cleaned endings span:", doc_c[start:end])
 */
    __pyx_t_1 = (__pyx_v_test != 0);
    if (__pyx_t_1) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;
    }

    /* "neuralcoref/document.pyx":252
 *         #    print("cleaned endings span:", doc_c[start:end])
 *         #    print("==-- full span store:", span)
 *         if debug and token.tag == hashes.IN_TAG:             # <<<<<<<<<<<<<<
 *             print("IN tag")
 *         test = False
 */
    __pyx_t_11 = (__pyx_v_debug != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_1 = __pyx_t_11;
      goto __pyx_L54_bool_binop_done;
    }
    __pyx_t_11 = ((__pyx_v_token.tag == __pyx_v_hashes.IN_TAG) != 0);
    __pyx_t_1 = __pyx_t_11;
    __pyx_L54_bool_binop_done:;
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":253
 *         #    print("==-- full span store:", span)
 *         if debug and token.tag == hashes.IN_TAG:
 *             print("IN tag")             # <<<<<<<<<<<<<<
 *         test = False
 *         for tok in doc_c[sent_start:sent_end]:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "neuralcoref/document.pyx":252
 *         #    print("cleaned endings span:", doc_c[start:end])
 *         #    print("==-- full span store:", span)
 *         if debug and token.tag == hashes.IN_TAG:             # <<<<<<<<<<<<<<
 *             print("IN tag")
 *         test = False
 */
    }

    /* "neuralcoref/document.pyx":254
 *         if debug and token.tag == hashes.IN_TAG:
 *             print("IN tag")
 *         test = False             # <<<<<<<<<<<<<<
 *         for tok in doc_c[sent_start:sent_end]:
 *             if inside(tok.dep, hashes.conj_or_prep):
 */
    __pyx_v_test = 0;

    /* "neuralcoref/document.pyx":255
 *             print("IN tag")
 *         test = False
 *         for tok in doc_c[sent_start:sent_end]:             # <<<<<<<<<<<<<<
 *             if inside(tok.dep, hashes.conj_or_prep):
 *                 test = True
 */
    __pyx_t_17 = (__pyx_v_doc_c + __pyx_v_sent_end);
    for (__pyx_t_18 = (__pyx_v_doc_c + __pyx_v_sent_start); __pyx_t_18 < __pyx_t_17; __pyx_t_18++) {
      __pyx_t_16 = __pyx_t_18;
      __pyx_v_tok = (__pyx_t_16[0]);

      /* "neuralcoref/document.pyx":256
 *         test = False
 *         for tok in doc_c[sent_start:sent_end]:
 *             if inside(tok.dep, hashes.conj_or_prep):             # <<<<<<<<<<<<<<
 *                 test = True
 *                 break
 */
      __pyx_t_1 = (__pyx_f_11neuralcoref_8document_inside(__pyx_v_tok.dep, __pyx_v_hashes.conj_or_prep) != 0);
      if (__pyx_t_1) {

        /* "neuralcoref/document.pyx":257
 *         for tok in doc_c[sent_start:sent_end]:
 *             if inside(tok.dep, hashes.conj_or_prep):
 *                 test = True             # <<<<<<<<<<<<<<
 *                 break
 *         if test:
 */
        __pyx_v_test = 1;

        /* "neuralcoref/document.pyx":258
 *             if inside(tok.dep, hashes.conj_or_prep):
 *                 test = True
 *                 break             # <<<<<<<<<<<<<<
 *         if test:
 *             if debug: print("Conjunction found, storing first element separately")
 */
        goto __pyx_L57_break;

        /* "neuralcoref/document.pyx":256
 *         test = False
 *         for tok in doc_c[sent_start:sent_end]:
 *             if inside(tok.dep, hashes.conj_or_prep):             # <<<<<<<<<<<<<<
 *                 test = True
 *                 break
 */
      }
    }
    __pyx_L57_break:;

    /* "neuralcoref/document.pyx":259
 *                 test = True
 *                 break
 *         if test:             # <<<<<<<<<<<<<<
 *             if debug: print("Conjunction found, storing first element separately")
 *             #for c in doc:
 */
    __pyx_t_1 = (__pyx_v_test != 0);
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":260
 *                 break
 *         if test:
 *             if debug: print("Conjunction found, storing first element separately")             # <<<<<<<<<<<<<<
 *             #for c in doc:
 *             #    if c.head.i == i and inside(c.dep, hashes.conj_or_prep):
 */
      __pyx_t_1 = (__pyx_v_debug != 0);
      if (__pyx_t_1) {
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 260, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }

      /* "neuralcoref/document.pyx":269
 *             #if debug: print("left side no conj:", [doc[i] for i in left_no_conj])
 *             #if debug: print("right side no conj:", [doc[i] for i in right_no_conj])
 *             start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)             # <<<<<<<<<<<<<<
 *             if start == end:
 *                 continue
 */
      __pyx_t_10 = __pyx_f_11neuralcoref_8document_enlarge_span(__pyx_v_doc_c, __pyx_v_i, __pyx_v_sent_start, __pyx_v_sent_end, 0, __pyx_v_hashes, __pyx_v_store, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
        PyObject* sequence = __pyx_t_10;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 269, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 269, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 269, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 269, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_4)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_12(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L61_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_9 = __pyx_t_12(__pyx_t_4); if (unlikely(!__pyx_t_9)) goto __pyx_L61_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_4), 2) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L62_unpacking_done;
        __pyx_L61_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 269, __pyx_L1_error)
        __pyx_L62_unpacking_done:;
      }
      __Pyx_DECREF_SET(__pyx_v_start, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_end, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "neuralcoref/document.pyx":270
 *             #if debug: print("right side no conj:", [doc[i] for i in right_no_conj])
 *             start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)
 *             if start == end:             # <<<<<<<<<<<<<<
 *                 continue
 *             test = add_span(start, end, mentions_spans, doc_c, store)
 */
      __pyx_t_10 = PyObject_RichCompare(__pyx_v_start, __pyx_v_end, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 270, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (__pyx_t_1) {

        /* "neuralcoref/document.pyx":271
 *             start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)
 *             if start == end:
 *                 continue             # <<<<<<<<<<<<<<
 *             test = add_span(start, end, mentions_spans, doc_c, store)
 *             if test: return
 */
        goto __pyx_L4_continue;

        /* "neuralcoref/document.pyx":270
 *             #if debug: print("right side no conj:", [doc[i] for i in right_no_conj])
 *             start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)
 *             if start == end:             # <<<<<<<<<<<<<<
 *                 continue
 *             test = add_span(start, end, mentions_spans, doc_c, store)
 */
      }

      /* "neuralcoref/document.pyx":272
 *             if start == end:
 *                 continue
 *             test = add_span(start, end, mentions_spans, doc_c, store)             # <<<<<<<<<<<<<<
 *             if test: return
 *             #if debug: print("==-- full span store:", span)
 */
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_start); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_end); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
      __pyx_t_10 = __pyx_f_11neuralcoref_8document_add_span(__pyx_t_8, __pyx_t_14, __pyx_v_mentions_spans, __pyx_v_doc_c, __pyx_v_store, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_test = __pyx_t_1;

      /* "neuralcoref/document.pyx":273
 *                 continue
 *             test = add_span(start, end, mentions_spans, doc_c, store)
 *             if test: return             # <<<<<<<<<<<<<<
 *             #if debug: print("==-- full span store:", span)
 *     #if debug: print("mentions_spans inside", mentions_spans)
 */
      __pyx_t_1 = (__pyx_v_test != 0);
      if (__pyx_t_1) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        goto __pyx_L0;
      }

      /* "neuralcoref/document.pyx":259
 *                 test = True
 *                 break
 *         if test:             # <<<<<<<<<<<<<<
 *             if debug: print("Conjunction found, storing first element separately")
 *             #for c in doc:
 */
    }
    __pyx_L4_continue:;
  }

  /* "neuralcoref/document.pyx":276
 *             #if debug: print("==-- full span store:", span)
 *     #if debug: print("mentions_spans inside", mentions_spans)
 *     return             # <<<<<<<<<<<<<<
 * 
 * cdef extract_mentions_spans(Doc doc, bint use_no_coref_list=True, bint debug=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":166
 *     return mentions_spans.num >= mentions_spans.max_spans
 * 
 * cdef _extract_from_sent(TokenC* doc_c, int sent_start, int sent_end, SentSpans* mentions_spans,             # <<<<<<<<<<<<<<
 *                         HashesList hashes, StringStore store, bint use_no_coref_list=True, bint debug=True):
 *     '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("neuralcoref.document._extract_from_sent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_start);
  __Pyx_XDECREF(__pyx_v_end);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_22extract_mentions_spans_2generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":292
 *         if debug: print(" span search:", c, "head:", c.head, "tag:", c.tag_, "pos:", c.pos_, "dep:", c.dep_)
 *     # Named entities
 *     mentions_spans = list(ent for ent in doc.ents if ent.label_ in ACCEPTED_ENTS)             # <<<<<<<<<<<<<<
 * 
 *     # Setup for fast scanning
 */

static PyObject *__pyx_pf_11neuralcoref_8document_22extract_mentions_spans_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_14_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_14_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 292, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_22extract_mentions_spans_2generator12, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_extract_mentions_spans_locals_ge, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.extract_mentions_spans.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_22extract_mentions_spans_2generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 292, 0, __PYX_ERR(0, 292, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 292, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_doc)) { __Pyx_RaiseClosureNameError("doc"); __PYX_ERR(0, 292, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_doc), __pyx_n_s_ents); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 292, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 292, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 292, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ent);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ent, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_ent, __pyx_n_s_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_ACCEPTED_ENTS); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_cur_scope->__pyx_v_ent))) __PYX_ERR(0, 292, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_22extract_mentions_spans_5generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":305
 *     hashes = get_hash_lookups(doc.vocab.strings)
 * 
 *     if debug: print("==-- ents:", list(((ent, ent.label_) for ent in mentions_spans)))             # <<<<<<<<<<<<<<
 *     for i, sent in enumerate(doc.sents):
 *         _extract_from_sent(doc.c, sent.start, sent.end, &sent_spans[i], hashes, doc.vocab.strings)
 */

static PyObject *__pyx_pf_11neuralcoref_8document_22extract_mentions_spans_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_15_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_15_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 305, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_22extract_mentions_spans_5generator13, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_extract_mentions_spans_locals_ge, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.extract_mentions_spans.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_22extract_mentions_spans_5generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 305, 0, __PYX_ERR(0, 305, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 305, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mentions_spans)) { __Pyx_RaiseClosureNameError("mentions_spans"); __PYX_ERR(0, 305, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mentions_spans == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 305, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_mentions_spans; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 305, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ent);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ent, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_ent, __pyx_n_s_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ent);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ent);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_ent);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":278
 *     return
 * 
 * cdef extract_mentions_spans(Doc doc, bint use_no_coref_list=True, bint debug=True):             # <<<<<<<<<<<<<<
 *     '''
 *     Extract potential mentions from a spacy parsed Doc
 */

static PyObject *__pyx_f_11neuralcoref_8document_extract_mentions_spans(struct __pyx_obj_5spacy_6tokens_3doc_Doc *__pyx_v_doc, struct __pyx_opt_args_11neuralcoref_8document_extract_mentions_spans *__pyx_optional_args) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *__pyx_cur_scope;
  int __pyx_v_debug = ((int)1);
  struct __pyx_obj_5cymem_5cymem_Pool *__pyx_v_mem = 0;
  int __pyx_v_i;
  int __pyx_v_max_spans;
  int __pyx_v_n_sents;
  struct __pyx_t_11neuralcoref_8document_HashesList __pyx_v_hashes;
  struct __pyx_t_11neuralcoref_8document_SpanC __pyx_v_spans_c;
  PyObject *__pyx_v_c = NULL;
  struct __pyx_t_11neuralcoref_8document_SentSpans *__pyx_v_sent_spans;
  PyObject *__pyx_v_sent = NULL;
  PyObject *__pyx_v_spans_set = NULL;
  PyObject *__pyx_v_cleaned_mentions_spans = NULL;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  void *__pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  __Pyx_RefNannySetupContext("extract_mentions_spans", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 278, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("extract_mentions_spans", __pyx_f[0], 278, 0, __PYX_ERR(0, 278, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 1) {
      __pyx_v_debug = __pyx_optional_args->debug;
    }
  }
  __pyx_cur_scope->__pyx_v_doc = __pyx_v_doc;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_doc);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_doc);

  /* "neuralcoref/document.pyx":282
 *     Extract potential mentions from a spacy parsed Doc
 *     '''
 *     cdef Pool mem = Pool()             # <<<<<<<<<<<<<<
 *     cdef int i, max_spans
 *     cdef int n_sents
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5cymem_5cymem_Pool)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":288
 *     cdef SpanC spans_c
 * 
 *     if debug: print('===== doc ====:', doc)             # <<<<<<<<<<<<<<
 *     for c in doc:
 *         if debug: print(" span search:", c, "head:", c.head, "tag:", c.tag_, "pos:", c.pos_, "dep:", c.dep_)
 */
  __pyx_t_2 = (__pyx_v_debug != 0);
  if (__pyx_t_2) {
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_u_doc);
    __Pyx_GIVEREF(__pyx_kp_u_doc);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_doc);
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_doc));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_doc));
    PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_cur_scope->__pyx_v_doc));
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "neuralcoref/document.pyx":289
 * 
 *     if debug: print('===== doc ====:', doc)
 *     for c in doc:             # <<<<<<<<<<<<<<
 *         if debug: print(" span search:", c, "head:", c.head, "tag:", c.tag_, "pos:", c.pos_, "dep:", c.dep_)
 *     # Named entities
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_v_doc))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_v_doc))) {
    __pyx_t_3 = ((PyObject *)__pyx_cur_scope->__pyx_v_doc); __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_v_doc)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 289, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 289, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 289, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":290
 *     if debug: print('===== doc ====:', doc)
 *     for c in doc:
 *         if debug: print(" span search:", c, "head:", c.head, "tag:", c.tag_, "pos:", c.pos_, "dep:", c.dep_)             # <<<<<<<<<<<<<<
 *     # Named entities
 *     mentions_spans = list(ent for ent in doc.ents if ent.label_ in ACCEPTED_ENTS)
 */
    __pyx_t_2 = (__pyx_v_debug != 0);
    if (__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_head_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_tag_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_pos_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_dep_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyTuple_New(10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_ustring__27);
      __Pyx_GIVEREF(__pyx_ustring__27);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_ustring__27);
      __Pyx_INCREF(__pyx_v_c);
      __Pyx_GIVEREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_c);
      __Pyx_INCREF(__pyx_kp_u_head);
      __Pyx_GIVEREF(__pyx_kp_u_head);
      PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_head);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_1);
      __Pyx_INCREF(__pyx_kp_u_tag);
      __Pyx_GIVEREF(__pyx_kp_u_tag);
      PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_kp_u_tag);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_6);
      __Pyx_INCREF(__pyx_kp_u_pos);
      __Pyx_GIVEREF(__pyx_kp_u_pos);
      PyTuple_SET_ITEM(__pyx_t_9, 6, __pyx_kp_u_pos);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 7, __pyx_t_7);
      __Pyx_INCREF(__pyx_kp_u_dep_2);
      __Pyx_GIVEREF(__pyx_kp_u_dep_2);
      PyTuple_SET_ITEM(__pyx_t_9, 8, __pyx_kp_u_dep_2);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 9, __pyx_t_8);
      __pyx_t_1 = 0;
      __pyx_t_6 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }

    /* "neuralcoref/document.pyx":289
 * 
 *     if debug: print('===== doc ====:', doc)
 *     for c in doc:             # <<<<<<<<<<<<<<
 *         if debug: print(" span search:", c, "head:", c.head, "tag:", c.tag_, "pos:", c.pos_, "dep:", c.dep_)
 *     # Named entities
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":292
 *         if debug: print(" span search:", c, "head:", c.head, "tag:", c.tag_, "pos:", c.pos_, "dep:", c.dep_)
 *     # Named entities
 *     mentions_spans = list(ent for ent in doc.ents if ent.label_ in ACCEPTED_ENTS)             # <<<<<<<<<<<<<<
 * 
 *     # Setup for fast scanning
 */
  __pyx_t_3 = __pyx_pf_11neuralcoref_8document_22extract_mentions_spans_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_cur_scope->__pyx_v_mentions_spans = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "neuralcoref/document.pyx":295
 * 
 *     # Setup for fast scanning
 *     n_sents = len(list(doc.sents))             # <<<<<<<<<<<<<<
 *     sent_spans = <SentSpans*>mem.alloc(n_sents, sizeof(SentSpans))
 *     for i, sent in enumerate(doc.sents):
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_doc), __pyx_n_s_sents); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PySequence_List(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_4 = PyList_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_n_sents = __pyx_t_4;

  /* "neuralcoref/document.pyx":296
 *     # Setup for fast scanning
 *     n_sents = len(list(doc.sents))
 *     sent_spans = <SentSpans*>mem.alloc(n_sents, sizeof(SentSpans))             # <<<<<<<<<<<<<<
 *     for i, sent in enumerate(doc.sents):
 *         max_spans = len(sent)*SPAN_FACTOR
 */
  __pyx_t_10 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_mem->__pyx_vtab)->alloc(__pyx_v_mem, __pyx_v_n_sents, (sizeof(struct __pyx_t_11neuralcoref_8document_SentSpans))); if (unlikely(__pyx_t_10 == ((void *)NULL))) __PYX_ERR(0, 296, __pyx_L1_error)
  __pyx_v_sent_spans = ((struct __pyx_t_11neuralcoref_8document_SentSpans *)__pyx_t_10);

  /* "neuralcoref/document.pyx":297
 *     n_sents = len(list(doc.sents))
 *     sent_spans = <SentSpans*>mem.alloc(n_sents, sizeof(SentSpans))
 *     for i, sent in enumerate(doc.sents):             # <<<<<<<<<<<<<<
 *         max_spans = len(sent)*SPAN_FACTOR
 *         sent_spans[i].spans = <SpanC*>mem.alloc(max_spans, sizeof(SpanC))
 */
  __pyx_t_11 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_doc), __pyx_n_s_sents); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_8 = __pyx_t_3; __Pyx_INCREF(__pyx_t_8); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 297, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 297, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_8);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 297, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_sent, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_v_i = __pyx_t_11;
    __pyx_t_11 = (__pyx_t_11 + 1);

    /* "neuralcoref/document.pyx":298
 *     sent_spans = <SentSpans*>mem.alloc(n_sents, sizeof(SentSpans))
 *     for i, sent in enumerate(doc.sents):
 *         max_spans = len(sent)*SPAN_FACTOR             # <<<<<<<<<<<<<<
 *         sent_spans[i].spans = <SpanC*>mem.alloc(max_spans, sizeof(SpanC))
 *         sent_spans[i].max_spans = max_spans
 */
    __pyx_t_12 = PyObject_Length(__pyx_v_sent); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 298, __pyx_L1_error)
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_SPAN_FACTOR); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_max_spans = __pyx_t_13;

    /* "neuralcoref/document.pyx":299
 *     for i, sent in enumerate(doc.sents):
 *         max_spans = len(sent)*SPAN_FACTOR
 *         sent_spans[i].spans = <SpanC*>mem.alloc(max_spans, sizeof(SpanC))             # <<<<<<<<<<<<<<
 *         sent_spans[i].max_spans = max_spans
 *         sent_spans[i].num = 0
 */
    __pyx_t_10 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_mem->__pyx_vtab)->alloc(__pyx_v_mem, __pyx_v_max_spans, (sizeof(struct __pyx_t_11neuralcoref_8document_SpanC))); if (unlikely(__pyx_t_10 == ((void *)NULL))) __PYX_ERR(0, 299, __pyx_L1_error)
    (__pyx_v_sent_spans[__pyx_v_i]).spans = ((struct __pyx_t_11neuralcoref_8document_SpanC *)__pyx_t_10);

    /* "neuralcoref/document.pyx":300
 *         max_spans = len(sent)*SPAN_FACTOR
 *         sent_spans[i].spans = <SpanC*>mem.alloc(max_spans, sizeof(SpanC))
 *         sent_spans[i].max_spans = max_spans             # <<<<<<<<<<<<<<
 *         sent_spans[i].num = 0
 * 
 */
    (__pyx_v_sent_spans[__pyx_v_i]).max_spans = __pyx_v_max_spans;

    /* "neuralcoref/document.pyx":301
 *         sent_spans[i].spans = <SpanC*>mem.alloc(max_spans, sizeof(SpanC))
 *         sent_spans[i].max_spans = max_spans
 *         sent_spans[i].num = 0             # <<<<<<<<<<<<<<
 * 
 *     hashes = get_hash_lookups(doc.vocab.strings)
 */
    (__pyx_v_sent_spans[__pyx_v_i]).num = 0;

    /* "neuralcoref/document.pyx":297
 *     n_sents = len(list(doc.sents))
 *     sent_spans = <SentSpans*>mem.alloc(n_sents, sizeof(SentSpans))
 *     for i, sent in enumerate(doc.sents):             # <<<<<<<<<<<<<<
 *         max_spans = len(sent)*SPAN_FACTOR
 *         sent_spans[i].spans = <SpanC*>mem.alloc(max_spans, sizeof(SpanC))
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "neuralcoref/document.pyx":303
 *         sent_spans[i].num = 0
 * 
 *     hashes = get_hash_lookups(doc.vocab.strings)             # <<<<<<<<<<<<<<
 * 
 *     if debug: print("==-- ents:", list(((ent, ent.label_) for ent in mentions_spans)))
 */
  __pyx_t_8 = ((PyObject *)__pyx_cur_scope->__pyx_v_doc->vocab->strings);
  __Pyx_INCREF(__pyx_t_8);
  __pyx_v_hashes = __pyx_f_11neuralcoref_8document_get_hash_lookups(((struct __pyx_obj_5spacy_7strings_StringStore *)__pyx_t_8));
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "neuralcoref/document.pyx":305
 *     hashes = get_hash_lookups(doc.vocab.strings)
 * 
 *     if debug: print("==-- ents:", list(((ent, ent.label_) for ent in mentions_spans)))             # <<<<<<<<<<<<<<
 *     for i, sent in enumerate(doc.sents):
 *         _extract_from_sent(doc.c, sent.start, sent.end, &sent_spans[i], hashes, doc.vocab.strings)
 */
  __pyx_t_2 = (__pyx_v_debug != 0);
  if (__pyx_t_2) {
    __pyx_t_8 = __pyx_pf_11neuralcoref_8document_22extract_mentions_spans_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_Generator_Next(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_kp_u_ents_2);
    __Pyx_GIVEREF(__pyx_kp_u_ents_2);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_ents_2);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }

  /* "neuralcoref/document.pyx":306
 * 
 *     if debug: print("==-- ents:", list(((ent, ent.label_) for ent in mentions_spans)))
 *     for i, sent in enumerate(doc.sents):             # <<<<<<<<<<<<<<
 *         _extract_from_sent(doc.c, sent.start, sent.end, &sent_spans[i], hashes, doc.vocab.strings)
 *     #for spans in parallel_process([{'span': sent,
 */
  __pyx_t_11 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_doc), __pyx_n_s_sents); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
    __pyx_t_8 = __pyx_t_7; __Pyx_INCREF(__pyx_t_8); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 306, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_4); __Pyx_INCREF(__pyx_t_7); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 306, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 306, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_4); __Pyx_INCREF(__pyx_t_7); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 306, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 306, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_5(__pyx_t_8);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 306, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_sent, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_v_i = __pyx_t_11;
    __pyx_t_11 = (__pyx_t_11 + 1);

    /* "neuralcoref/document.pyx":307
 *     if debug: print("==-- ents:", list(((ent, ent.label_) for ent in mentions_spans)))
 *     for i, sent in enumerate(doc.sents):
 *         _extract_from_sent(doc.c, sent.start, sent.end, &sent_spans[i], hashes, doc.vocab.strings)             # <<<<<<<<<<<<<<
 *     #for spans in parallel_process([{'span': sent,
 *     #                                'use_no_coref_list': use_no_coref_list} for sent in doc.sents],
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_sent, __pyx_n_s_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_sent, __pyx_n_s_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = ((PyObject *)__pyx_cur_scope->__pyx_v_doc->vocab->strings);
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_9 = __pyx_f_11neuralcoref_8document__extract_from_sent(__pyx_cur_scope->__pyx_v_doc->c, __pyx_t_13, __pyx_t_14, (&(__pyx_v_sent_spans[__pyx_v_i])), __pyx_v_hashes, ((struct __pyx_obj_5spacy_7strings_StringStore *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "neuralcoref/document.pyx":306
 * 
 *     if debug: print("==-- ents:", list(((ent, ent.label_) for ent in mentions_spans)))
 *     for i, sent in enumerate(doc.sents):             # <<<<<<<<<<<<<<
 *         _extract_from_sent(doc.c, sent.start, sent.end, &sent_spans[i], hashes, doc.vocab.strings)
 *     #for spans in parallel_process([{'span': sent,
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "neuralcoref/document.pyx":312
 *     #                            _extract_from_sent, use_kwargs=True, n_jobs=4, front_num=0):
 *     #    mentions_spans = mentions_spans + spans
 *     spans_set = set()             # <<<<<<<<<<<<<<
 *     cleaned_mentions_spans = []
 *     for i in range(n_sents):
 */
  __pyx_t_8 = PySet_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_spans_set = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "neuralcoref/document.pyx":313
 *     #    mentions_spans = mentions_spans + spans
 *     spans_set = set()
 *     cleaned_mentions_spans = []             # <<<<<<<<<<<<<<
 *     for i in range(n_sents):
 *         for j in range(sent_spans[i].num):
 */
  __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_cleaned_mentions_spans = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "neuralcoref/document.pyx":314
 *     spans_set = set()
 *     cleaned_mentions_spans = []
 *     for i in range(n_sents):             # <<<<<<<<<<<<<<
 *         for j in range(sent_spans[i].num):
 *             spans_c = sent_spans[i].spans[j]
 */
  __pyx_t_11 = __pyx_v_n_sents;
  __pyx_t_14 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_14; __pyx_t_13+=1) {
    __pyx_v_i = __pyx_t_13;

    /* "neuralcoref/document.pyx":315
 *     cleaned_mentions_spans = []
 *     for i in range(n_sents):
 *         for j in range(sent_spans[i].num):             # <<<<<<<<<<<<<<
 *             spans_c = sent_spans[i].spans[j]
 *             if spans_c.end > spans_c.start and (spans_c.start, spans_c.end) not in spans_set:
 */
    __pyx_t_15 = (__pyx_v_sent_spans[__pyx_v_i]).num;
    __pyx_t_16 = __pyx_t_15;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_j = __pyx_t_17;

      /* "neuralcoref/document.pyx":316
 *     for i in range(n_sents):
 *         for j in range(sent_spans[i].num):
 *             spans_c = sent_spans[i].spans[j]             # <<<<<<<<<<<<<<
 *             if spans_c.end > spans_c.start and (spans_c.start, spans_c.end) not in spans_set:
 *                 cleaned_mentions_spans.append(doc[spans_c.start:spans_c.end])
 */
      __pyx_v_spans_c = ((__pyx_v_sent_spans[__pyx_v_i]).spans[__pyx_v_j]);

      /* "neuralcoref/document.pyx":317
 *         for j in range(sent_spans[i].num):
 *             spans_c = sent_spans[i].spans[j]
 *             if spans_c.end > spans_c.start and (spans_c.start, spans_c.end) not in spans_set:             # <<<<<<<<<<<<<<
 *                 cleaned_mentions_spans.append(doc[spans_c.start:spans_c.end])
 *                 spans_set.add((spans_c.start, spans_c.end))
 */
      __pyx_t_18 = ((__pyx_v_spans_c.end > __pyx_v_spans_c.start) != 0);
      if (__pyx_t_18) {
      } else {
        __pyx_t_2 = __pyx_t_18;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_spans_c.start); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_spans_c.end); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_9);
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_18 = (__Pyx_PySet_ContainsTF(__pyx_t_7, __pyx_v_spans_set, Py_NE)); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_19 = (__pyx_t_18 != 0);
      __pyx_t_2 = __pyx_t_19;
      __pyx_L17_bool_binop_done:;
      if (__pyx_t_2) {

        /* "neuralcoref/document.pyx":318
 *             spans_c = sent_spans[i].spans[j]
 *             if spans_c.end > spans_c.start and (spans_c.start, spans_c.end) not in spans_set:
 *                 cleaned_mentions_spans.append(doc[spans_c.start:spans_c.end])             # <<<<<<<<<<<<<<
 *                 spans_set.add((spans_c.start, spans_c.end))
 *     print("cleaned_mentions_spans", cleaned_mentions_spans)
 */
        __pyx_t_7 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_cur_scope->__pyx_v_doc), __pyx_v_spans_c.start, __pyx_v_spans_c.end, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 318, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_cleaned_mentions_spans, __pyx_t_7); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(0, 318, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "neuralcoref/document.pyx":319
 *             if spans_c.end > spans_c.start and (spans_c.start, spans_c.end) not in spans_set:
 *                 cleaned_mentions_spans.append(doc[spans_c.start:spans_c.end])
 *                 spans_set.add((spans_c.start, spans_c.end))             # <<<<<<<<<<<<<<
 *     print("cleaned_mentions_spans", cleaned_mentions_spans)
 *     return cleaned_mentions_spans
 */
        __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_spans_c.start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_spans_c.end); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
        __pyx_t_7 = 0;
        __pyx_t_9 = 0;
        __pyx_t_20 = PySet_Add(__pyx_v_spans_set, __pyx_t_8); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "neuralcoref/document.pyx":317
 *         for j in range(sent_spans[i].num):
 *             spans_c = sent_spans[i].spans[j]
 *             if spans_c.end > spans_c.start and (spans_c.start, spans_c.end) not in spans_set:             # <<<<<<<<<<<<<<
 *                 cleaned_mentions_spans.append(doc[spans_c.start:spans_c.end])
 *                 spans_set.add((spans_c.start, spans_c.end))
 */
      }
    }
  }

  /* "neuralcoref/document.pyx":320
 *                 cleaned_mentions_spans.append(doc[spans_c.start:spans_c.end])
 *                 spans_set.add((spans_c.start, spans_c.end))
 *     print("cleaned_mentions_spans", cleaned_mentions_spans)             # <<<<<<<<<<<<<<
 *     return cleaned_mentions_spans
 * 
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_n_u_cleaned_mentions_spans);
  __Pyx_GIVEREF(__pyx_n_u_cleaned_mentions_spans);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_u_cleaned_mentions_spans);
  __Pyx_INCREF(__pyx_v_cleaned_mentions_spans);
  __Pyx_GIVEREF(__pyx_v_cleaned_mentions_spans);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_cleaned_mentions_spans);
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "neuralcoref/document.pyx":321
 *                 spans_set.add((spans_c.start, spans_c.end))
 *     print("cleaned_mentions_spans", cleaned_mentions_spans)
 *     return cleaned_mentions_spans             # <<<<<<<<<<<<<<
 * 
 * #########################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_cleaned_mentions_spans);
  __pyx_r = __pyx_v_cleaned_mentions_spans;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":278
 *     return
 * 
 * cdef extract_mentions_spans(Doc doc, bint use_no_coref_list=True, bint debug=True):             # <<<<<<<<<<<<<<
 *     '''
 *     Extract potential mentions from a spacy parsed Doc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuralcoref.document.extract_mentions_spans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mem);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_sent);
  __Pyx_XDECREF(__pyx_v_spans_set);
  __Pyx_XDECREF(__pyx_v_cleaned_mentions_spans);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":326
 * ####### CLASSES #########
 * 
 * cdef get_span_sent_number(Span span):             # <<<<<<<<<<<<<<
 *     ''' Index of the sentence of a Span in its Doc'''
 *     cdef int n = 0
 */

static PyObject *__pyx_f_11neuralcoref_8document_get_span_sent_number(struct __pyx_obj_5spacy_6tokens_4span_Span *__pyx_v_span) {
  int __pyx_v_n;
  int __pyx_v_i;
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_v_root;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  long __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_span_sent_number", 0);
  __Pyx_TraceCall("get_span_sent_number", __pyx_f[0], 326, 0, __PYX_ERR(0, 326, __pyx_L1_error));

  /* "neuralcoref/document.pyx":328
 * cdef get_span_sent_number(Span span):
 *     ''' Index of the sentence of a Span in its Doc'''
 *     cdef int n = 0             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef const TokenC* root = &span.doc.c[span.start]
 */
  __pyx_v_n = 0;

  /* "neuralcoref/document.pyx":330
 *     cdef int n = 0
 *     cdef int i
 *     cdef const TokenC* root = &span.doc.c[span.start]             # <<<<<<<<<<<<<<
 *     while root.head != 0: # find left edge
 *         root += root.head
 */
  __pyx_v_root = (&(__pyx_v_span->doc->c[__pyx_v_span->start]));

  /* "neuralcoref/document.pyx":331
 *     cdef int i
 *     cdef const TokenC* root = &span.doc.c[span.start]
 *     while root.head != 0: # find left edge             # <<<<<<<<<<<<<<
 *         root += root.head
 *         n += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_root->head != 0) != 0);
    if (!__pyx_t_1) break;

    /* "neuralcoref/document.pyx":332
 *     cdef const TokenC* root = &span.doc.c[span.start]
 *     while root.head != 0: # find left edge
 *         root += root.head             # <<<<<<<<<<<<<<
 *         n += 1
 *         if n >= span.doc.length:
 */
    __pyx_v_root = (__pyx_v_root + __pyx_v_root->head);

    /* "neuralcoref/document.pyx":333
 *     while root.head != 0: # find left edge
 *         root += root.head
 *         n += 1             # <<<<<<<<<<<<<<
 *         if n >= span.doc.length:
 *             raise RuntimeError("Error while getting Mention sentence index")
 */
    __pyx_v_n = (__pyx_v_n + 1);

    /* "neuralcoref/document.pyx":334
 *         root += root.head
 *         n += 1
 *         if n >= span.doc.length:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Error while getting Mention sentence index")
 *     n = -1
 */
    __pyx_t_1 = ((__pyx_v_n >= __pyx_v_span->doc->length) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "neuralcoref/document.pyx":335
 *         n += 1
 *         if n >= span.doc.length:
 *             raise RuntimeError("Error while getting Mention sentence index")             # <<<<<<<<<<<<<<
 *     n = -1
 *     for i in range(root.l_edge+1):
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 335, __pyx_L1_error)

      /* "neuralcoref/document.pyx":334
 *         root += root.head
 *         n += 1
 *         if n >= span.doc.length:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Error while getting Mention sentence index")
 *     n = -1
 */
    }
  }

  /* "neuralcoref/document.pyx":336
 *         if n >= span.doc.length:
 *             raise RuntimeError("Error while getting Mention sentence index")
 *     n = -1             # <<<<<<<<<<<<<<
 *     for i in range(root.l_edge+1):
 *         if span.doc.c[i].sent_start == 1:
 */
  __pyx_v_n = -1;

  /* "neuralcoref/document.pyx":337
 *             raise RuntimeError("Error while getting Mention sentence index")
 *     n = -1
 *     for i in range(root.l_edge+1):             # <<<<<<<<<<<<<<
 *         if span.doc.c[i].sent_start == 1:
 *             n += 1
 */
  __pyx_t_3 = (__pyx_v_root->l_edge + 1);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "neuralcoref/document.pyx":338
 *     n = -1
 *     for i in range(root.l_edge+1):
 *         if span.doc.c[i].sent_start == 1:             # <<<<<<<<<<<<<<
 *             n += 1
 *     return n
 */
    __pyx_t_1 = (((__pyx_v_span->doc->c[__pyx_v_i]).sent_start == 1) != 0);
    if (__pyx_t_1) {

      /* "neuralcoref/document.pyx":339
 *     for i in range(root.l_edge+1):
 *         if span.doc.c[i].sent_start == 1:
 *             n += 1             # <<<<<<<<<<<<<<
 *     return n
 * 
 */
      __pyx_v_n = (__pyx_v_n + 1);

      /* "neuralcoref/document.pyx":338
 *     n = -1
 *     for i in range(root.l_edge+1):
 *         if span.doc.c[i].sent_start == 1:             # <<<<<<<<<<<<<<
 *             n += 1
 *     return n
 */
    }
  }

  /* "neuralcoref/document.pyx":340
 *         if span.doc.c[i].sent_start == 1:
 *             n += 1
 *     return n             # <<<<<<<<<<<<<<
 * 
 * cdef get_span_type(Span span):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":326
 * ####### CLASSES #########
 * 
 * cdef get_span_sent_number(Span span):             # <<<<<<<<<<<<<<
 *     ''' Index of the sentence of a Span in its Doc'''
 *     cdef int n = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuralcoref.document.get_span_sent_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_13get_span_type_2generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":347
 *     prp = ["PRP", "PRP$"]
 *     proper = ["NNP", "NNPS"]
 *     if any(t.tag_ in conj and t.ent_type_ not in ACCEPTED_ENTS for t in span):             # <<<<<<<<<<<<<<
 *         mention_type = MENTION_TYPE["LIST"]
 *     elif span.root.tag_ in prp:
 */

static PyObject *__pyx_pf_11neuralcoref_8document_13get_span_type_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_17_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_17_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 347, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_13get_span_type_2generator14, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_span_type_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.get_span_type.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_13get_span_type_2generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 347, 0, __PYX_ERR(0, 347, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 347, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_span)) { __Pyx_RaiseClosureNameError("span"); __PYX_ERR(0, 347, __pyx_L1_error) }
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_span))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_span))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_span); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_span)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 347, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 347, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 347, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_t);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_t, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_t, __pyx_n_s_tag_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_conj)) { __Pyx_RaiseClosureNameError("conj"); __PYX_ERR(0, 347, __pyx_L1_error) }
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_conj, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_t, __pyx_n_s_ent_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_ACCEPTED_ENTS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_t_8, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":342
 *     return n
 * 
 * cdef get_span_type(Span span):             # <<<<<<<<<<<<<<
 *     ''' Find the type of a Span '''
 *     conj = ["CC", ","]
 */

static PyObject *__pyx_f_11neuralcoref_8document_get_span_type(struct __pyx_obj_5spacy_6tokens_4span_Span *__pyx_v_span) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *__pyx_cur_scope;
  PyObject *__pyx_v_prp = NULL;
  PyObject *__pyx_v_proper = NULL;
  PyObject *__pyx_v_mention_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_span_type", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 342, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("get_span_type", __pyx_f[0], 342, 0, __PYX_ERR(0, 342, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_span = __pyx_v_span;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_span);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_span);

  /* "neuralcoref/document.pyx":344
 * cdef get_span_type(Span span):
 *     ''' Find the type of a Span '''
 *     conj = ["CC", ","]             # <<<<<<<<<<<<<<
 *     prp = ["PRP", "PRP$"]
 *     proper = ["NNP", "NNPS"]
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_CC);
  __Pyx_GIVEREF(__pyx_n_u_CC);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_CC);
  __Pyx_INCREF(__pyx_kp_u__30);
  __Pyx_GIVEREF(__pyx_kp_u__30);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u__30);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_conj = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":345
 *     ''' Find the type of a Span '''
 *     conj = ["CC", ","]
 *     prp = ["PRP", "PRP$"]             # <<<<<<<<<<<<<<
 *     proper = ["NNP", "NNPS"]
 *     if any(t.tag_ in conj and t.ent_type_ not in ACCEPTED_ENTS for t in span):
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_PRP);
  __Pyx_GIVEREF(__pyx_n_u_PRP);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_PRP);
  __Pyx_INCREF(__pyx_kp_u_PRP_2);
  __Pyx_GIVEREF(__pyx_kp_u_PRP_2);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_PRP_2);
  __pyx_v_prp = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":346
 *     conj = ["CC", ","]
 *     prp = ["PRP", "PRP$"]
 *     proper = ["NNP", "NNPS"]             # <<<<<<<<<<<<<<
 *     if any(t.tag_ in conj and t.ent_type_ not in ACCEPTED_ENTS for t in span):
 *         mention_type = MENTION_TYPE["LIST"]
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_NNP);
  __Pyx_GIVEREF(__pyx_n_u_NNP);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_NNP);
  __Pyx_INCREF(__pyx_n_u_NNPS);
  __Pyx_GIVEREF(__pyx_n_u_NNPS);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_NNPS);
  __pyx_v_proper = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":347
 *     prp = ["PRP", "PRP$"]
 *     proper = ["NNP", "NNPS"]
 *     if any(t.tag_ in conj and t.ent_type_ not in ACCEPTED_ENTS for t in span):             # <<<<<<<<<<<<<<
 *         mention_type = MENTION_TYPE["LIST"]
 *     elif span.root.tag_ in prp:
 */
  __pyx_t_1 = __pyx_pf_11neuralcoref_8document_13get_span_type_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "neuralcoref/document.pyx":348
 *     proper = ["NNP", "NNPS"]
 *     if any(t.tag_ in conj and t.ent_type_ not in ACCEPTED_ENTS for t in span):
 *         mention_type = MENTION_TYPE["LIST"]             # <<<<<<<<<<<<<<
 *     elif span.root.tag_ in prp:
 *         mention_type = MENTION_TYPE["PRONOMINAL"]
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_MENTION_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_LIST); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_mention_type = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":347
 *     prp = ["PRP", "PRP$"]
 *     proper = ["NNP", "NNPS"]
 *     if any(t.tag_ in conj and t.ent_type_ not in ACCEPTED_ENTS for t in span):             # <<<<<<<<<<<<<<
 *         mention_type = MENTION_TYPE["LIST"]
 *     elif span.root.tag_ in prp:
 */
    goto __pyx_L3;
  }

  /* "neuralcoref/document.pyx":349
 *     if any(t.tag_ in conj and t.ent_type_ not in ACCEPTED_ENTS for t in span):
 *         mention_type = MENTION_TYPE["LIST"]
 *     elif span.root.tag_ in prp:             # <<<<<<<<<<<<<<
 *         mention_type = MENTION_TYPE["PRONOMINAL"]
 *     elif span.root.ent_type_ in ACCEPTED_ENTS or span.root.tag_ in proper:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_span), __pyx_n_s_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_tag_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_v_prp, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "neuralcoref/document.pyx":350
 *         mention_type = MENTION_TYPE["LIST"]
 *     elif span.root.tag_ in prp:
 *         mention_type = MENTION_TYPE["PRONOMINAL"]             # <<<<<<<<<<<<<<
 *     elif span.root.ent_type_ in ACCEPTED_ENTS or span.root.tag_ in proper:
 *         mention_type = MENTION_TYPE["PROPER"]
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_MENTION_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_PRONOMINAL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_mention_type = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":349
 *     if any(t.tag_ in conj and t.ent_type_ not in ACCEPTED_ENTS for t in span):
 *         mention_type = MENTION_TYPE["LIST"]
 *     elif span.root.tag_ in prp:             # <<<<<<<<<<<<<<
 *         mention_type = MENTION_TYPE["PRONOMINAL"]
 *     elif span.root.ent_type_ in ACCEPTED_ENTS or span.root.tag_ in proper:
 */
    goto __pyx_L3;
  }

  /* "neuralcoref/document.pyx":351
 *     elif span.root.tag_ in prp:
 *         mention_type = MENTION_TYPE["PRONOMINAL"]
 *     elif span.root.ent_type_ in ACCEPTED_ENTS or span.root.tag_ in proper:             # <<<<<<<<<<<<<<
 *         mention_type = MENTION_TYPE["PROPER"]
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_span), __pyx_n_s_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ent_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ACCEPTED_ENTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_span), __pyx_n_s_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_tag_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_v_proper, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_5 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "neuralcoref/document.pyx":352
 *         mention_type = MENTION_TYPE["PRONOMINAL"]
 *     elif span.root.ent_type_ in ACCEPTED_ENTS or span.root.tag_ in proper:
 *         mention_type = MENTION_TYPE["PROPER"]             # <<<<<<<<<<<<<<
 *     else:
 *         mention_type = MENTION_TYPE["NOMINAL"]
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_MENTION_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_PROPER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_mention_type = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":351
 *     elif span.root.tag_ in prp:
 *         mention_type = MENTION_TYPE["PRONOMINAL"]
 *     elif span.root.ent_type_ in ACCEPTED_ENTS or span.root.tag_ in proper:             # <<<<<<<<<<<<<<
 *         mention_type = MENTION_TYPE["PROPER"]
 *     else:
 */
    goto __pyx_L3;
  }

  /* "neuralcoref/document.pyx":354
 *         mention_type = MENTION_TYPE["PROPER"]
 *     else:
 *         mention_type = MENTION_TYPE["NOMINAL"]             # <<<<<<<<<<<<<<
 *     return mention_type
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MENTION_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_NOMINAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_mention_type = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "neuralcoref/document.pyx":355
 *     else:
 *         mention_type = MENTION_TYPE["NOMINAL"]
 *     return mention_type             # <<<<<<<<<<<<<<
 * 
 * cdef get_span_entity_label(Span span):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_mention_type);
  __pyx_r = __pyx_v_mention_type;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":342
 *     return n
 * 
 * cdef get_span_type(Span span):             # <<<<<<<<<<<<<<
 *     ''' Find the type of a Span '''
 *     conj = ["CC", ","]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuralcoref.document.get_span_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_prp);
  __Pyx_XDECREF(__pyx_v_proper);
  __Pyx_XDECREF(__pyx_v_mention_type);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":357
 *     return mention_type
 * 
 * cdef get_span_entity_label(Span span):             # <<<<<<<<<<<<<<
 *     ''' Label of a detected named entity the Mention is nested in if any'''
 *     cdef int i
 */

static PyObject *__pyx_f_11neuralcoref_8document_get_span_entity_label(struct __pyx_obj_5spacy_6tokens_4span_Span *__pyx_v_span) {
  int __pyx_v_i;
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_v_token;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_label;
  int __pyx_v_has_label;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("get_span_entity_label", 0);
  __Pyx_TraceCall("get_span_entity_label", __pyx_f[0], 357, 0, __PYX_ERR(0, 357, __pyx_L1_error));

  /* "neuralcoref/document.pyx":362
 *     cdef const TokenC* token
 *     cdef hash_t label
 *     cdef bint has_label = False             # <<<<<<<<<<<<<<
 *     for i in range(span.start, span.end):
 *         token = &span.doc.c[i]
 */
  __pyx_v_has_label = 0;

  /* "neuralcoref/document.pyx":363
 *     cdef hash_t label
 *     cdef bint has_label = False
 *     for i in range(span.start, span.end):             # <<<<<<<<<<<<<<
 *         token = &span.doc.c[i]
 *         if token.ent_iob == 1: # Inside
 */
  __pyx_t_1 = __pyx_v_span->end;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = __pyx_v_span->start; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "neuralcoref/document.pyx":364
 *     cdef bint has_label = False
 *     for i in range(span.start, span.end):
 *         token = &span.doc.c[i]             # <<<<<<<<<<<<<<
 *         if token.ent_iob == 1: # Inside
 *             if not has_label:
 */
    __pyx_v_token = (&(__pyx_v_span->doc->c[__pyx_v_i]));

    /* "neuralcoref/document.pyx":365
 *     for i in range(span.start, span.end):
 *         token = &span.doc.c[i]
 *         if token.ent_iob == 1: # Inside             # <<<<<<<<<<<<<<
 *             if not has_label:
 *                 label = token.ent_id
 */
    switch (__pyx_v_token->ent_iob) {
      case 1:

      /* "neuralcoref/document.pyx":366
 *         token = &span.doc.c[i]
 *         if token.ent_iob == 1: # Inside
 *             if not has_label:             # <<<<<<<<<<<<<<
 *                 label = token.ent_id
 *                 has_label = True
 */
      __pyx_t_4 = ((!(__pyx_v_has_label != 0)) != 0);
      if (__pyx_t_4) {

        /* "neuralcoref/document.pyx":367
 *         if token.ent_iob == 1: # Inside
 *             if not has_label:
 *                 label = token.ent_id             # <<<<<<<<<<<<<<
 *                 has_label = True
 *         elif token.ent_iob == 2 or token.ent_iob == 0: # Outside
 */
        __pyx_t_5 = __pyx_v_token->ent_id;
        __pyx_v_label = __pyx_t_5;

        /* "neuralcoref/document.pyx":368
 *             if not has_label:
 *                 label = token.ent_id
 *                 has_label = True             # <<<<<<<<<<<<<<
 *         elif token.ent_iob == 2 or token.ent_iob == 0: # Outside
 *             return -1 # Not nested in entity
 */
        __pyx_v_has_label = 1;

        /* "neuralcoref/document.pyx":366
 *         token = &span.doc.c[i]
 *         if token.ent_iob == 1: # Inside
 *             if not has_label:             # <<<<<<<<<<<<<<
 *                 label = token.ent_id
 *                 has_label = True
 */
      }

      /* "neuralcoref/document.pyx":365
 *     for i in range(span.start, span.end):
 *         token = &span.doc.c[i]
 *         if token.ent_iob == 1: # Inside             # <<<<<<<<<<<<<<
 *             if not has_label:
 *                 label = token.ent_id
 */
      break;

      /* "neuralcoref/document.pyx":369
 *                 label = token.ent_id
 *                 has_label = True
 *         elif token.ent_iob == 2 or token.ent_iob == 0: # Outside             # <<<<<<<<<<<<<<
 *             return -1 # Not nested in entity
 *         elif token.ent_iob == 3: # Beggining
 */
      case 2:
      case 0:

      /* "neuralcoref/document.pyx":370
 *                 has_label = True
 *         elif token.ent_iob == 2 or token.ent_iob == 0: # Outside
 *             return -1 # Not nested in entity             # <<<<<<<<<<<<<<
 *         elif token.ent_iob == 3: # Beggining
 *             if has_label:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_int_neg_1);
      __pyx_r = __pyx_int_neg_1;
      goto __pyx_L0;

      /* "neuralcoref/document.pyx":369
 *                 label = token.ent_id
 *                 has_label = True
 *         elif token.ent_iob == 2 or token.ent_iob == 0: # Outside             # <<<<<<<<<<<<<<
 *             return -1 # Not nested in entity
 *         elif token.ent_iob == 3: # Beggining
 */
      break;

      /* "neuralcoref/document.pyx":371
 *         elif token.ent_iob == 2 or token.ent_iob == 0: # Outside
 *             return -1 # Not nested in entity
 *         elif token.ent_iob == 3: # Beggining             # <<<<<<<<<<<<<<
 *             if has_label:
 *                 return -1 # Not nested in entity
 */
      case 3:

      /* "neuralcoref/document.pyx":372
 *             return -1 # Not nested in entity
 *         elif token.ent_iob == 3: # Beggining
 *             if has_label:             # <<<<<<<<<<<<<<
 *                 return -1 # Not nested in entity
 *             has_label = True
 */
      __pyx_t_4 = (__pyx_v_has_label != 0);
      if (__pyx_t_4) {

        /* "neuralcoref/document.pyx":373
 *         elif token.ent_iob == 3: # Beggining
 *             if has_label:
 *                 return -1 # Not nested in entity             # <<<<<<<<<<<<<<
 *             has_label = True
 *             label = token.ent_id
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_int_neg_1);
        __pyx_r = __pyx_int_neg_1;
        goto __pyx_L0;

        /* "neuralcoref/document.pyx":372
 *             return -1 # Not nested in entity
 *         elif token.ent_iob == 3: # Beggining
 *             if has_label:             # <<<<<<<<<<<<<<
 *                 return -1 # Not nested in entity
 *             has_label = True
 */
      }

      /* "neuralcoref/document.pyx":374
 *             if has_label:
 *                 return -1 # Not nested in entity
 *             has_label = True             # <<<<<<<<<<<<<<
 *             label = token.ent_id
 *     return label
 */
      __pyx_v_has_label = 1;

      /* "neuralcoref/document.pyx":375
 *                 return -1 # Not nested in entity
 *             has_label = True
 *             label = token.ent_id             # <<<<<<<<<<<<<<
 *     return label
 * 
 */
      __pyx_t_5 = __pyx_v_token->ent_id;
      __pyx_v_label = __pyx_t_5;

      /* "neuralcoref/document.pyx":371
 *         elif token.ent_iob == 2 or token.ent_iob == 0: # Outside
 *             return -1 # Not nested in entity
 *         elif token.ent_iob == 3: # Beggining             # <<<<<<<<<<<<<<
 *             if has_label:
 *                 return -1 # Not nested in entity
 */
      break;
      default: break;
    }
  }

  /* "neuralcoref/document.pyx":376
 *             has_label = True
 *             label = token.ent_id
 *     return label             # <<<<<<<<<<<<<<
 * 
 * cdef class Mention():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyInt_From_uint64_t(__pyx_v_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":357
 *     return mention_type
 * 
 * cdef get_span_entity_label(Span span):             # <<<<<<<<<<<<<<
 *     ''' Label of a detected named entity the Mention is nested in if any'''
 *     cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuralcoref.document.get_span_entity_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":382
 *     A mention (possible anaphor) comprise a spacy Span class with additional informations
 *     '''
 *     def __cinit__(self, Span span, int mention_index, int utterance_index, int utterances_start_sent):             # <<<<<<<<<<<<<<
 *         '''
 *         Arguments:
 */

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5spacy_6tokens_4span_Span *__pyx_v_span = 0;
  int __pyx_v_mention_index;
  int __pyx_v_utterance_index;
  int __pyx_v_utterances_start_sent;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_span,&__pyx_n_s_mention_index,&__pyx_n_s_utterance_index,&__pyx_n_s_utterances_start_sent,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_span)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mention_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 1); __PYX_ERR(0, 382, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_utterance_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 2); __PYX_ERR(0, 382, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_utterances_start_sent)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 3); __PYX_ERR(0, 382, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 382, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_span = ((struct __pyx_obj_5spacy_6tokens_4span_Span *)values[0]);
    __pyx_v_mention_index = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_mention_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L3_error)
    __pyx_v_utterance_index = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_utterance_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L3_error)
    __pyx_v_utterances_start_sent = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_utterances_start_sent == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 382, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_span), __pyx_ptype_5spacy_6tokens_4span_Span, 1, "span", 0))) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention___cinit__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), __pyx_v_span, __pyx_v_mention_index, __pyx_v_utterance_index, __pyx_v_utterances_start_sent);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention___cinit__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_5spacy_6tokens_4span_Span *__pyx_v_span, int __pyx_v_mention_index, int __pyx_v_utterance_index, int __pyx_v_utterances_start_sent) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 382, 0, __PYX_ERR(0, 382, __pyx_L1_error));

  /* "neuralcoref/document.pyx":391
 *                 (an utterance can comprise several sentences)
 *         '''
 *         self.span = span             # <<<<<<<<<<<<<<
 *         self.index = mention_index
 *         self.utterance_index = utterance_index
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_span));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_span));
  __Pyx_GOTREF(__pyx_v_self->span);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->span));
  __pyx_v_self->span = __pyx_v_span;

  /* "neuralcoref/document.pyx":392
 *         '''
 *         self.span = span
 *         self.index = mention_index             # <<<<<<<<<<<<<<
 *         self.utterance_index = utterance_index
 * 
 */
  __pyx_v_self->index = __pyx_v_mention_index;

  /* "neuralcoref/document.pyx":393
 *         self.span = span
 *         self.index = mention_index
 *         self.utterance_index = utterance_index             # <<<<<<<<<<<<<<
 * 
 *         self.utterances_sent = utterances_start_sent + get_span_sent_number(span)
 */
  __pyx_v_self->utterance_index = __pyx_v_utterance_index;

  /* "neuralcoref/document.pyx":395
 *         self.utterance_index = utterance_index
 * 
 *         self.utterances_sent = utterances_start_sent + get_span_sent_number(span)             # <<<<<<<<<<<<<<
 *         self.spans_embeddings = None
 *         self.words_embeddings = None
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_utterances_start_sent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_11neuralcoref_8document_get_span_sent_number(__pyx_v_span); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->utterances_sent = __pyx_t_4;

  /* "neuralcoref/document.pyx":396
 * 
 *         self.utterances_sent = utterances_start_sent + get_span_sent_number(span)
 *         self.spans_embeddings = None             # <<<<<<<<<<<<<<
 *         self.words_embeddings = None
 *         self.embeddings = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->spans_embeddings);
  __Pyx_DECREF(__pyx_v_self->spans_embeddings);
  __pyx_v_self->spans_embeddings = Py_None;

  /* "neuralcoref/document.pyx":397
 *         self.utterances_sent = utterances_start_sent + get_span_sent_number(span)
 *         self.spans_embeddings = None
 *         self.words_embeddings = None             # <<<<<<<<<<<<<<
 *         self.embeddings = None
 *         self.features = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->words_embeddings);
  __Pyx_DECREF(__pyx_v_self->words_embeddings);
  __pyx_v_self->words_embeddings = Py_None;

  /* "neuralcoref/document.pyx":398
 *         self.spans_embeddings = None
 *         self.words_embeddings = None
 *         self.embeddings = None             # <<<<<<<<<<<<<<
 *         self.features = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->embeddings);
  __Pyx_DECREF(__pyx_v_self->embeddings);
  __pyx_v_self->embeddings = Py_None;

  /* "neuralcoref/document.pyx":399
 *         self.words_embeddings = None
 *         self.embeddings = None
 *         self.features = None             # <<<<<<<<<<<<<<
 * 
 *         self.spans_embeddings_ = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->features);
  __Pyx_DECREF(__pyx_v_self->features);
  __pyx_v_self->features = Py_None;

  /* "neuralcoref/document.pyx":401
 *         self.features = None
 * 
 *         self.spans_embeddings_ = None             # <<<<<<<<<<<<<<
 *         self.words_embeddings_ = None
 *         self.features_ = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->spans_embeddings_);
  __Pyx_DECREF(__pyx_v_self->spans_embeddings_);
  __pyx_v_self->spans_embeddings_ = Py_None;

  /* "neuralcoref/document.pyx":402
 * 
 *         self.spans_embeddings_ = None
 *         self.words_embeddings_ = None             # <<<<<<<<<<<<<<
 *         self.features_ = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->words_embeddings_);
  __Pyx_DECREF(__pyx_v_self->words_embeddings_);
  __pyx_v_self->words_embeddings_ = Py_None;

  /* "neuralcoref/document.pyx":403
 *         self.spans_embeddings_ = None
 *         self.words_embeddings_ = None
 *         self.features_ = None             # <<<<<<<<<<<<<<
 * 
 *         self.mention_type = get_span_type(span)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->features_);
  __Pyx_DECREF(__pyx_v_self->features_);
  __pyx_v_self->features_ = Py_None;

  /* "neuralcoref/document.pyx":405
 *         self.features_ = None
 * 
 *         self.mention_type = get_span_type(span)             # <<<<<<<<<<<<<<
 *         self.propers = set(self.content_words)
 *         self.entity_label = get_span_entity_label(span)
 */
  __pyx_t_3 = __pyx_f_11neuralcoref_8document_get_span_type(__pyx_v_span); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->mention_type = __pyx_t_4;

  /* "neuralcoref/document.pyx":406
 * 
 *         self.mention_type = get_span_type(span)
 *         self.propers = set(self.content_words)             # <<<<<<<<<<<<<<
 *         self.entity_label = get_span_entity_label(span)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_content_words); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->propers);
  __Pyx_DECREF(__pyx_v_self->propers);
  __pyx_v_self->propers = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":407
 *         self.mention_type = get_span_type(span)
 *         self.propers = set(self.content_words)
 *         self.entity_label = get_span_entity_label(span)             # <<<<<<<<<<<<<<
 * 
 *     property content_words:
 */
  __pyx_t_2 = __pyx_f_11neuralcoref_8document_get_span_entity_label(__pyx_v_span); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->entity_label = __pyx_t_5;

  /* "neuralcoref/document.pyx":382
 *     A mention (possible anaphor) comprise a spacy Span class with additional informations
 *     '''
 *     def __cinit__(self, Span span, int mention_index, int utterance_index, int utterances_start_sent):             # <<<<<<<<<<<<<<
 *         '''
 *         Arguments:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("neuralcoref.document.Mention.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":411
 *     property content_words:
 *         ''' Returns an iterator of nouns/proper nouns in the Mention '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (tok.lower_ for tok in self.span if tok.tag_ in PROPERS_TAGS)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_13content_words_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_13content_words_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_13content_words___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_7Mention_13content_words_7__get___2generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":412
 *         ''' Returns an iterator of nouns/proper nouns in the Mention '''
 *         def __get__(self):
 *             return (tok.lower_ for tok in self.span if tok.tag_ in PROPERS_TAGS)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_13content_words_7__get___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_19_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_19_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 412, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_7Mention_13content_words_7__get___2generator15, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_Mention___get___locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.content_words.__get__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_7Mention_13content_words_7__get___2generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 412, 0, __PYX_ERR(0, 412, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 412, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 412, __pyx_L1_error) }
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->span))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->span))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->span); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->span)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 412, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 412, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 412, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tok);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tok, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tok, __pyx_n_s_tag_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_PROPERS_TAGS); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tok, __pyx_n_s_lower); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_TraceReturn(__pyx_r, 0);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 412, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":411
 *     property content_words:
 *         ''' Returns an iterator of nouns/proper nouns in the Mention '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (tok.lower_ for tok in self.span if tok.tag_ in PROPERS_TAGS)
 * 
 */

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_13content_words___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_18___get__(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_18___get__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 411, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("__get__", __pyx_f[0], 411, 0, __PYX_ERR(0, 411, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "neuralcoref/document.pyx":412
 *         ''' Returns an iterator of nouns/proper nouns in the Mention '''
 *         def __get__(self):
 *             return (tok.lower_ for tok in self.span if tok.tag_ in PROPERS_TAGS)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_11neuralcoref_8document_7Mention_13content_words_7__get___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":411
 *     property content_words:
 *         ''' Returns an iterator of nouns/proper nouns in the Mention '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (tok.lower_ for tok in self.span if tok.tag_ in PROPERS_TAGS)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.content_words.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":414
 *             return (tok.lower_ for tok in self.span if tok.tag_ in PROPERS_TAGS)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.span.__repr__()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_2__repr__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_2__repr__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 414, 0, __PYX_ERR(0, 414, __pyx_L1_error));

  /* "neuralcoref/document.pyx":415
 * 
 *     def __repr__(self):
 *         return self.span.__repr__()             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->span), __pyx_n_s_repr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":414
 *             return (tok.lower_ for tok in self.span if tok.tag_ in PROPERS_TAGS)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.span.__repr__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("neuralcoref.document.Mention.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":417
 *         return self.span.__repr__()
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return len(self.span)
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_11neuralcoref_8document_7Mention_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_11neuralcoref_8document_7Mention_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_4__len__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_11neuralcoref_8document_7Mention_4__len__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  __Pyx_RefNannySetupContext("__len__", 0);
  __Pyx_TraceCall("__len__", __pyx_f[0], 417, 0, __PYX_ERR(0, 417, __pyx_L1_error));

  /* "neuralcoref/document.pyx":418
 * 
 *     def __len__(self):
 *         return len(self.span)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, x):
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->span);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":417
 *         return self.span.__repr__()
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return len(self.span)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":420
 *         return len(self.span)
 * 
 *     def __getitem__(self, x):             # <<<<<<<<<<<<<<
 *         return self.span[x]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_6__getitem__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_6__getitem__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 420, 0, __PYX_ERR(0, 420, __pyx_L1_error));

  /* "neuralcoref/document.pyx":421
 * 
 *     def __getitem__(self, x):
 *         return self.span[x]             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->span), __pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":420
 *         return len(self.span)
 * 
 *     def __getitem__(self, x):             # <<<<<<<<<<<<<<
 *         return self.span[x]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":423
 *         return self.span[x]
 * 
 *     def __contains__(self, x):             # <<<<<<<<<<<<<<
 *         return x in self.span
 * 
 */

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_9__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_9__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_8__contains__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_8__contains__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_x) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__contains__", 0);
  __Pyx_TraceCall("__contains__", __pyx_f[0], 423, 0, __PYX_ERR(0, 423, __pyx_L1_error));

  /* "neuralcoref/document.pyx":424
 * 
 *     def __contains__(self, x):
 *         return x in self.span             # <<<<<<<<<<<<<<
 * 
 *     cpdef int heads_agree(self, Mention mention2):
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_x, ((PyObject *)__pyx_v_self->span), Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 424, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":423
 *         return self.span[x]
 * 
 *     def __contains__(self, x):             # <<<<<<<<<<<<<<
 *         return x in self.span
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":426
 *         return x in self.span
 * 
 *     cpdef int heads_agree(self, Mention mention2):             # <<<<<<<<<<<<<<
 *         ''' Does the root of the Mention match the root of another Mention/Span'''
 *         # we allow same-type NEs to not match perfectly,
 */

static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_11heads_agree(PyObject *__pyx_v_self, PyObject *__pyx_v_mention2); /*proto*/
static int __pyx_f_11neuralcoref_8document_7Mention_heads_agree(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("heads_agree", 0);
  __Pyx_TraceCall("heads_agree", __pyx_f[0], 426, 0, __PYX_ERR(0, 426, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_heads_agree); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_11neuralcoref_8document_7Mention_11heads_agree)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_mention2)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_mention2)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_mention2)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 426, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_mention2));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mention2));
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_mention2));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 426, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "neuralcoref/document.pyx":430
 *         # we allow same-type NEs to not match perfectly,
 *         # but rather one could be included in the other, e.g., "George" -> "George Bush"
 *         if (self.entity_label != -1 and mention2.entity_label != -1 and             # <<<<<<<<<<<<<<
 *                 self.entity_label == mention2.entity_label and
 *                 (self.span.root.lower_ in mention2.span.lower_ \
 */
  __pyx_t_8 = ((__pyx_v_self->entity_label != -1L) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = ((__pyx_v_mention2->entity_label != -1L) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }

  /* "neuralcoref/document.pyx":431
 *         # but rather one could be included in the other, e.g., "George" -> "George Bush"
 *         if (self.entity_label != -1 and mention2.entity_label != -1 and
 *                 self.entity_label == mention2.entity_label and             # <<<<<<<<<<<<<<
 *                 (self.span.root.lower_ in mention2.span.lower_ \
 *                  or mention2.span.root.lower_ in self.span.lower_)):
 */
  __pyx_t_8 = ((__pyx_v_self->entity_label == __pyx_v_mention2->entity_label) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }

  /* "neuralcoref/document.pyx":432
 *         if (self.entity_label != -1 and mention2.entity_label != -1 and
 *                 self.entity_label == mention2.entity_label and
 *                 (self.span.root.lower_ in mention2.span.lower_ \             # <<<<<<<<<<<<<<
 *                  or mention2.span.root.lower_ in self.span.lower_)):
 *             return 1
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->span), __pyx_n_s_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_mention2->span), __pyx_n_s_lower); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = (__pyx_t_8 != 0);
  if (!__pyx_t_9) {
  } else {
    __pyx_t_7 = __pyx_t_9;
    goto __pyx_L4_bool_binop_done;
  }

  /* "neuralcoref/document.pyx":433
 *                 self.entity_label == mention2.entity_label and
 *                 (self.span.root.lower_ in mention2.span.lower_ \
 *                  or mention2.span.root.lower_ in self.span.lower_)):             # <<<<<<<<<<<<<<
 *             return 1
 *         return 1 if self.span.root.lower_ == mention2.span.root.lower_ else 0
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_mention2->span), __pyx_n_s_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->span), __pyx_n_s_lower); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = (__pyx_t_9 != 0);
  __pyx_t_7 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;

  /* "neuralcoref/document.pyx":430
 *         # we allow same-type NEs to not match perfectly,
 *         # but rather one could be included in the other, e.g., "George" -> "George Bush"
 *         if (self.entity_label != -1 and mention2.entity_label != -1 and             # <<<<<<<<<<<<<<
 *                 self.entity_label == mention2.entity_label and
 *                 (self.span.root.lower_ in mention2.span.lower_ \
 */
  if (__pyx_t_7) {

    /* "neuralcoref/document.pyx":434
 *                 (self.span.root.lower_ in mention2.span.lower_ \
 *                  or mention2.span.root.lower_ in self.span.lower_)):
 *             return 1             # <<<<<<<<<<<<<<
 *         return 1 if self.span.root.lower_ == mention2.span.root.lower_ else 0
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "neuralcoref/document.pyx":430
 *         # we allow same-type NEs to not match perfectly,
 *         # but rather one could be included in the other, e.g., "George" -> "George Bush"
 *         if (self.entity_label != -1 and mention2.entity_label != -1 and             # <<<<<<<<<<<<<<
 *                 self.entity_label == mention2.entity_label and
 *                 (self.span.root.lower_ in mention2.span.lower_ \
 */
  }

  /* "neuralcoref/document.pyx":435
 *                  or mention2.span.root.lower_ in self.span.lower_)):
 *             return 1
 *         return 1 if self.span.root.lower_ == mention2.span.root.lower_ else 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef int exact_match(self, Mention mention2):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->span), __pyx_n_s_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_mention2->span), __pyx_n_s_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {
    __pyx_t_6 = 1;
  } else {
    __pyx_t_6 = 0;
  }
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":426
 *         return x in self.span
 * 
 *     cpdef int heads_agree(self, Mention mention2):             # <<<<<<<<<<<<<<
 *         ''' Does the root of the Mention match the root of another Mention/Span'''
 *         # we allow same-type NEs to not match perfectly,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("neuralcoref.document.Mention.heads_agree", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_11heads_agree(PyObject *__pyx_v_self, PyObject *__pyx_v_mention2); /*proto*/
static char __pyx_doc_11neuralcoref_8document_7Mention_10heads_agree[] = " Does the root of the Mention match the root of another Mention/Span";
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_11heads_agree(PyObject *__pyx_v_self, PyObject *__pyx_v_mention2) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("heads_agree (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mention2), __pyx_ptype_11neuralcoref_8document_Mention, 1, "mention2", 0))) __PYX_ERR(0, 426, __pyx_L1_error)
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_10heads_agree(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_mention2));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_10heads_agree(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("heads_agree", 0);
  __Pyx_TraceCall("heads_agree (wrapper)", __pyx_f[0], 426, 0, __PYX_ERR(0, 426, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_11neuralcoref_8document_7Mention_heads_agree(__pyx_v_self, __pyx_v_mention2, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.heads_agree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":437
 *         return 1 if self.span.root.lower_ == mention2.span.root.lower_ else 0
 * 
 *     cpdef int exact_match(self, Mention mention2):             # <<<<<<<<<<<<<<
 *         ''' Does the Mention lowercase text matches another Mention/Span lowercase text'''
 *         return 1 if self.span.lower_ == mention2.span.lower_ else 0
 */

static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_13exact_match(PyObject *__pyx_v_self, PyObject *__pyx_v_mention2); /*proto*/
static int __pyx_f_11neuralcoref_8document_7Mention_exact_match(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("exact_match", 0);
  __Pyx_TraceCall("exact_match", __pyx_f[0], 437, 0, __PYX_ERR(0, 437, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_exact_match); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_11neuralcoref_8document_7Mention_13exact_match)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_mention2)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_mention2)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_mention2)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 437, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_mention2));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mention2));
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_mention2));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "neuralcoref/document.pyx":439
 *     cpdef int exact_match(self, Mention mention2):
 *         ''' Does the Mention lowercase text matches another Mention/Span lowercase text'''
 *         return 1 if self.span.lower_ == mention2.span.lower_ else 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef int relaxed_match(self, Mention mention2):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->span), __pyx_n_s_lower); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_mention2->span), __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __pyx_t_6 = 1;
  } else {
    __pyx_t_6 = 0;
  }
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":437
 *         return 1 if self.span.root.lower_ == mention2.span.root.lower_ else 0
 * 
 *     cpdef int exact_match(self, Mention mention2):             # <<<<<<<<<<<<<<
 *         ''' Does the Mention lowercase text matches another Mention/Span lowercase text'''
 *         return 1 if self.span.lower_ == mention2.span.lower_ else 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("neuralcoref.document.Mention.exact_match", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_13exact_match(PyObject *__pyx_v_self, PyObject *__pyx_v_mention2); /*proto*/
static char __pyx_doc_11neuralcoref_8document_7Mention_12exact_match[] = " Does the Mention lowercase text matches another Mention/Span lowercase text";
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_13exact_match(PyObject *__pyx_v_self, PyObject *__pyx_v_mention2) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exact_match (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mention2), __pyx_ptype_11neuralcoref_8document_Mention, 1, "mention2", 0))) __PYX_ERR(0, 437, __pyx_L1_error)
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_12exact_match(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_mention2));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_12exact_match(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("exact_match", 0);
  __Pyx_TraceCall("exact_match (wrapper)", __pyx_f[0], 437, 0, __PYX_ERR(0, 437, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_11neuralcoref_8document_7Mention_exact_match(__pyx_v_self, __pyx_v_mention2, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.exact_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":441
 *         return 1 if self.span.lower_ == mention2.span.lower_ else 0
 * 
 *     cpdef int relaxed_match(self, Mention mention2):             # <<<<<<<<<<<<<<
 *         ''' Does the nouns/proper nous in the Mention match another Mention/Span nouns/propers'''
 *         return 1 if not self.propers.isdisjoint(mention2.propers) else 0
 */

static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_15relaxed_match(PyObject *__pyx_v_self, PyObject *__pyx_v_mention2); /*proto*/
static int __pyx_f_11neuralcoref_8document_7Mention_relaxed_match(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("relaxed_match", 0);
  __Pyx_TraceCall("relaxed_match", __pyx_f[0], 441, 0, __PYX_ERR(0, 441, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_relaxed_match); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_11neuralcoref_8document_7Mention_15relaxed_match)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_mention2)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_mention2)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_mention2)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_mention2));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mention2));
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_mention2));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 441, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "neuralcoref/document.pyx":443
 *     cpdef int relaxed_match(self, Mention mention2):
 *         ''' Does the nouns/proper nous in the Mention match another Mention/Span nouns/propers'''
 *         return 1 if not self.propers.isdisjoint(mention2.propers) else 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef int overlapping(self, Mention m2):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->propers, __pyx_n_s_isdisjoint); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_mention2->propers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_mention2->propers};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_mention2->propers};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_mention2->propers);
      __Pyx_GIVEREF(__pyx_v_mention2->propers);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_mention2->propers);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (((!__pyx_t_7) != 0)) {
    __pyx_t_6 = 1;
  } else {
    __pyx_t_6 = 0;
  }
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":441
 *         return 1 if self.span.lower_ == mention2.span.lower_ else 0
 * 
 *     cpdef int relaxed_match(self, Mention mention2):             # <<<<<<<<<<<<<<
 *         ''' Does the nouns/proper nous in the Mention match another Mention/Span nouns/propers'''
 *         return 1 if not self.propers.isdisjoint(mention2.propers) else 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("neuralcoref.document.Mention.relaxed_match", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_15relaxed_match(PyObject *__pyx_v_self, PyObject *__pyx_v_mention2); /*proto*/
static char __pyx_doc_11neuralcoref_8document_7Mention_14relaxed_match[] = " Does the nouns/proper nous in the Mention match another Mention/Span nouns/propers";
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_15relaxed_match(PyObject *__pyx_v_self, PyObject *__pyx_v_mention2) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("relaxed_match (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mention2), __pyx_ptype_11neuralcoref_8document_Mention, 1, "mention2", 0))) __PYX_ERR(0, 441, __pyx_L1_error)
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_14relaxed_match(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_mention2));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_14relaxed_match(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_mention2) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("relaxed_match", 0);
  __Pyx_TraceCall("relaxed_match (wrapper)", __pyx_f[0], 441, 0, __PYX_ERR(0, 441, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_11neuralcoref_8document_7Mention_relaxed_match(__pyx_v_self, __pyx_v_mention2, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.relaxed_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":445
 *         return 1 if not self.propers.isdisjoint(mention2.propers) else 0
 * 
 *     cpdef int overlapping(self, Mention m2):             # <<<<<<<<<<<<<<
 *         return 1 if (self.utterances_sent == m2.utterances_sent \
 *                      and self.span.end > m2.span.start) else 0
 */

static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_17overlapping(PyObject *__pyx_v_self, PyObject *__pyx_v_m2); /*proto*/
static int __pyx_f_11neuralcoref_8document_7Mention_overlapping(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_m2, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("overlapping", 0);
  __Pyx_TraceCall("overlapping", __pyx_f[0], 445, 0, __PYX_ERR(0, 445, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlapping); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_11neuralcoref_8document_7Mention_17overlapping)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_m2)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 445, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_m2)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 445, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_m2)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 445, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 445, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_m2));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_m2));
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_m2));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 445, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "neuralcoref/document.pyx":446
 * 
 *     cpdef int overlapping(self, Mention m2):
 *         return 1 if (self.utterances_sent == m2.utterances_sent \             # <<<<<<<<<<<<<<
 *                      and self.span.end > m2.span.start) else 0
 * 
 */
  __pyx_t_8 = ((__pyx_v_self->utterances_sent == __pyx_v_m2->utterances_sent) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L3_bool_binop_done;
  }

  /* "neuralcoref/document.pyx":447
 *     cpdef int overlapping(self, Mention m2):
 *         return 1 if (self.utterances_sent == m2.utterances_sent \
 *                      and self.span.end > m2.span.start) else 0             # <<<<<<<<<<<<<<
 * 
 * class EmbeddingExtractor:
 */
  __pyx_t_8 = ((__pyx_v_self->span->end > __pyx_v_m2->span->start) != 0);
  __pyx_t_7 = __pyx_t_8;
  __pyx_L3_bool_binop_done:;
  if (__pyx_t_7) {
    __pyx_t_6 = 1;
  } else {
    __pyx_t_6 = 0;
  }
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":445
 *         return 1 if not self.propers.isdisjoint(mention2.propers) else 0
 * 
 *     cpdef int overlapping(self, Mention m2):             # <<<<<<<<<<<<<<
 *         return 1 if (self.utterances_sent == m2.utterances_sent \
 *                      and self.span.end > m2.span.start) else 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("neuralcoref.document.Mention.overlapping", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_17overlapping(PyObject *__pyx_v_self, PyObject *__pyx_v_m2); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_17overlapping(PyObject *__pyx_v_self, PyObject *__pyx_v_m2) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlapping (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m2), __pyx_ptype_11neuralcoref_8document_Mention, 1, "m2", 0))) __PYX_ERR(0, 445, __pyx_L1_error)
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_16overlapping(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_m2));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_16overlapping(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_m2) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("overlapping", 0);
  __Pyx_TraceCall("overlapping (wrapper)", __pyx_f[0], 445, 0, __PYX_ERR(0, 445, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_11neuralcoref_8document_7Mention_overlapping(__pyx_v_self, __pyx_v_m2, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.overlapping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":41
 * 
 * cdef class Mention:
 *     cdef readonly Span span             # <<<<<<<<<<<<<<
 *     cdef readonly long entity_label
 *     cdef readonly int in_ent
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_4span_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_4span_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_4span___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_4span___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 41, 0, __PYX_ERR(2, 41, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->span));
  __pyx_r = ((PyObject *)__pyx_v_self->span);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.span.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":42
 * cdef class Mention:
 *     cdef readonly Span span
 *     cdef readonly long entity_label             # <<<<<<<<<<<<<<
 *     cdef readonly int in_ent
 *     cdef readonly int index
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_12entity_label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_12entity_label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_12entity_label___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_12entity_label___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 42, 0, __PYX_ERR(2, 42, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->entity_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.entity_label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":43
 *     cdef readonly Span span
 *     cdef readonly long entity_label
 *     cdef readonly int in_ent             # <<<<<<<<<<<<<<
 *     cdef readonly int index
 *     cdef readonly int utterance_index
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_6in_ent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_6in_ent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_6in_ent___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_6in_ent___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 43, 0, __PYX_ERR(2, 43, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->in_ent); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.in_ent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":44
 *     cdef readonly long entity_label
 *     cdef readonly int in_ent
 *     cdef readonly int index             # <<<<<<<<<<<<<<
 *     cdef readonly int utterance_index
 *     cdef readonly int utterances_sent
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_5index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_5index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_5index___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_5index___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 44, 0, __PYX_ERR(2, 44, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":45
 *     cdef readonly int in_ent
 *     cdef readonly int index
 *     cdef readonly int utterance_index             # <<<<<<<<<<<<<<
 *     cdef readonly int utterances_sent
 *     cdef readonly int mention_type
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_15utterance_index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_15utterance_index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_15utterance_index___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_15utterance_index___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 45, 0, __PYX_ERR(2, 45, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->utterance_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.utterance_index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":46
 *     cdef readonly int index
 *     cdef readonly int utterance_index
 *     cdef readonly int utterances_sent             # <<<<<<<<<<<<<<
 *     cdef readonly int mention_type
 *     cdef readonly propers
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_15utterances_sent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_15utterances_sent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_15utterances_sent___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_15utterances_sent___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 46, 0, __PYX_ERR(2, 46, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->utterances_sent); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.utterances_sent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":47
 *     cdef readonly int utterance_index
 *     cdef readonly int utterances_sent
 *     cdef readonly int mention_type             # <<<<<<<<<<<<<<
 *     cdef readonly propers
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_12mention_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_12mention_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_12mention_type___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_12mention_type___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 47, 0, __PYX_ERR(2, 47, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->mention_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.mention_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":48
 *     cdef readonly int utterances_sent
 *     cdef readonly int mention_type
 *     cdef readonly propers             # <<<<<<<<<<<<<<
 * 
 *     cdef public object spans_embeddings
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_7propers_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_7propers_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_7propers___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_7propers___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 48, 0, __PYX_ERR(2, 48, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->propers);
  __pyx_r = __pyx_v_self->propers;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.propers.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":50
 *     cdef readonly propers
 * 
 *     cdef public object spans_embeddings             # <<<<<<<<<<<<<<
 *     cdef public object words_embeddings
 *     cdef public object embeddings
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_16spans_embeddings_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_16spans_embeddings_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_16spans_embeddings___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_16spans_embeddings___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 50, 0, __PYX_ERR(2, 50, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->spans_embeddings);
  __pyx_r = __pyx_v_self->spans_embeddings;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.spans_embeddings.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_16spans_embeddings_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_16spans_embeddings_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_16spans_embeddings_2__set__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_16spans_embeddings_2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 50, 0, __PYX_ERR(2, 50, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->spans_embeddings);
  __Pyx_DECREF(__pyx_v_self->spans_embeddings);
  __pyx_v_self->spans_embeddings = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.spans_embeddings.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_16spans_embeddings_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_16spans_embeddings_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_16spans_embeddings_4__del__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_16spans_embeddings_4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 50, 0, __PYX_ERR(2, 50, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->spans_embeddings);
  __Pyx_DECREF(__pyx_v_self->spans_embeddings);
  __pyx_v_self->spans_embeddings = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.spans_embeddings.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":51
 * 
 *     cdef public object spans_embeddings
 *     cdef public object words_embeddings             # <<<<<<<<<<<<<<
 *     cdef public object embeddings
 *     cdef public object features
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_16words_embeddings_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_16words_embeddings_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_16words_embeddings___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_16words_embeddings___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 51, 0, __PYX_ERR(2, 51, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->words_embeddings);
  __pyx_r = __pyx_v_self->words_embeddings;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.words_embeddings.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_16words_embeddings_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_16words_embeddings_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_16words_embeddings_2__set__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_16words_embeddings_2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 51, 0, __PYX_ERR(2, 51, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->words_embeddings);
  __Pyx_DECREF(__pyx_v_self->words_embeddings);
  __pyx_v_self->words_embeddings = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.words_embeddings.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_16words_embeddings_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_16words_embeddings_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_16words_embeddings_4__del__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_16words_embeddings_4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 51, 0, __PYX_ERR(2, 51, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->words_embeddings);
  __Pyx_DECREF(__pyx_v_self->words_embeddings);
  __pyx_v_self->words_embeddings = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.words_embeddings.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":52
 *     cdef public object spans_embeddings
 *     cdef public object words_embeddings
 *     cdef public object embeddings             # <<<<<<<<<<<<<<
 *     cdef public object features
 *     cdef public object spans_embeddings_
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_10embeddings_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_10embeddings_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_10embeddings___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_10embeddings___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->embeddings);
  __pyx_r = __pyx_v_self->embeddings;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.embeddings.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_10embeddings_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_10embeddings_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_10embeddings_2__set__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_10embeddings_2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->embeddings);
  __Pyx_DECREF(__pyx_v_self->embeddings);
  __pyx_v_self->embeddings = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.embeddings.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_10embeddings_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_10embeddings_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_10embeddings_4__del__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_10embeddings_4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->embeddings);
  __Pyx_DECREF(__pyx_v_self->embeddings);
  __pyx_v_self->embeddings = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.embeddings.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":53
 *     cdef public object words_embeddings
 *     cdef public object embeddings
 *     cdef public object features             # <<<<<<<<<<<<<<
 *     cdef public object spans_embeddings_
 *     cdef public object words_embeddings_
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_8features_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_8features_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_8features___get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_8features___get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 53, 0, __PYX_ERR(2, 53, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->features);
  __pyx_r = __pyx_v_self->features;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.features.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_8features_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_8features_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_8features_2__set__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_8features_2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 53, 0, __PYX_ERR(2, 53, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->features);
  __Pyx_DECREF(__pyx_v_self->features);
  __pyx_v_self->features = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.features.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_8features_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_8features_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_8features_4__del__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_8features_4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 53, 0, __PYX_ERR(2, 53, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->features);
  __Pyx_DECREF(__pyx_v_self->features);
  __pyx_v_self->features = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.features.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":54
 *     cdef public object embeddings
 *     cdef public object features
 *     cdef public object spans_embeddings_             # <<<<<<<<<<<<<<
 *     cdef public object words_embeddings_
 *     cdef public object features_
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_17spans_embeddings__1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_17spans_embeddings__1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_17spans_embeddings____get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_17spans_embeddings____get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 54, 0, __PYX_ERR(2, 54, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->spans_embeddings_);
  __pyx_r = __pyx_v_self->spans_embeddings_;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.spans_embeddings_.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_17spans_embeddings__3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_17spans_embeddings__3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_17spans_embeddings__2__set__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_17spans_embeddings__2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 54, 0, __PYX_ERR(2, 54, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->spans_embeddings_);
  __Pyx_DECREF(__pyx_v_self->spans_embeddings_);
  __pyx_v_self->spans_embeddings_ = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.spans_embeddings_.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_17spans_embeddings__5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_17spans_embeddings__5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_17spans_embeddings__4__del__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_17spans_embeddings__4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 54, 0, __PYX_ERR(2, 54, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->spans_embeddings_);
  __Pyx_DECREF(__pyx_v_self->spans_embeddings_);
  __pyx_v_self->spans_embeddings_ = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.spans_embeddings_.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":55
 *     cdef public object features
 *     cdef public object spans_embeddings_
 *     cdef public object words_embeddings_             # <<<<<<<<<<<<<<
 *     cdef public object features_
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_17words_embeddings__1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_17words_embeddings__1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_17words_embeddings____get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_17words_embeddings____get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->words_embeddings_);
  __pyx_r = __pyx_v_self->words_embeddings_;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.words_embeddings_.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_17words_embeddings__3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_17words_embeddings__3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_17words_embeddings__2__set__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_17words_embeddings__2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->words_embeddings_);
  __Pyx_DECREF(__pyx_v_self->words_embeddings_);
  __pyx_v_self->words_embeddings_ = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.words_embeddings_.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_17words_embeddings__5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_17words_embeddings__5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_17words_embeddings__4__del__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_17words_embeddings__4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->words_embeddings_);
  __Pyx_DECREF(__pyx_v_self->words_embeddings_);
  __pyx_v_self->words_embeddings_ = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.words_embeddings_.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":56
 *     cdef public object spans_embeddings_
 *     cdef public object words_embeddings_
 *     cdef public object features_             # <<<<<<<<<<<<<<
 * 
 *     cpdef int heads_agree(self, Mention mention2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_9features__1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_9features__1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_9features____get__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_9features____get__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 56, 0, __PYX_ERR(2, 56, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->features_);
  __pyx_r = __pyx_v_self->features_;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.features_.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_9features__3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_9features__3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_9features__2__set__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_9features__2__set__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 56, 0, __PYX_ERR(2, 56, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->features_);
  __Pyx_DECREF(__pyx_v_self->features_);
  __pyx_v_self->features_ = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.features_.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_7Mention_9features__5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_11neuralcoref_8document_7Mention_9features__5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_9features__4__del__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_7Mention_9features__4__del__(struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 56, 0, __PYX_ERR(2, 56, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->features_);
  __Pyx_DECREF(__pyx_v_self->features_);
  __pyx_v_self->features_ = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Mention.features_.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_18__reduce_cython__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_7Mention_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_7Mention_20__setstate_cython__(((struct __pyx_obj_11neuralcoref_8document_Mention *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_7Mention_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11neuralcoref_8document_Mention *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Mention.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":453
 *     Compute words embedding features for mentions
 *     '''
 *     def __init__(self, pretrained_model_path):             # <<<<<<<<<<<<<<
 *         _, self.static_embeddings, self.stat_idx, self.stat_voc = self.load_embeddings_from_file(pretrained_model_path + "static_word")
 *         _, self.tuned_embeddings, self.tun_idx, self.tun_voc = self.load_embeddings_from_file(pretrained_model_path + "tuned_word")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_1__init__ = {"__init__", (PyCFunction)__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_pretrained_model_path = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_pretrained_model_path,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pretrained_model_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 453, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 453, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_pretrained_model_path = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 453, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_18EmbeddingExtractor___init__(__pyx_self, __pyx_v_self, __pyx_v_pretrained_model_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_pretrained_model_path) {
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_shape2 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  __Pyx_TraceFrameInit(__pyx_codeobj__33)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 453, 0, __PYX_ERR(0, 453, __pyx_L1_error));

  /* "neuralcoref/document.pyx":454
 *     '''
 *     def __init__(self, pretrained_model_path):
 *         _, self.static_embeddings, self.stat_idx, self.stat_voc = self.load_embeddings_from_file(pretrained_model_path + "static_word")             # <<<<<<<<<<<<<<
 *         _, self.tuned_embeddings, self.tun_idx, self.tun_voc = self.load_embeddings_from_file(pretrained_model_path + "tuned_word")
 *         self.fallback = self.static_embeddings.get(UNKNOWN_WORD)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_load_embeddings_from_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_v_pretrained_model_path, __pyx_n_u_static_word); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 454, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_5,&__pyx_t_3,&__pyx_t_4};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_5,&__pyx_t_3,&__pyx_t_4};
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_7(__pyx_t_6); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 4) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 454, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v__ = __pyx_t_2;
  __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_static_embeddings, __pyx_t_5) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_stat_idx, __pyx_t_3) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_stat_voc, __pyx_t_4) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":455
 *     def __init__(self, pretrained_model_path):
 *         _, self.static_embeddings, self.stat_idx, self.stat_voc = self.load_embeddings_from_file(pretrained_model_path + "static_word")
 *         _, self.tuned_embeddings, self.tun_idx, self.tun_voc = self.load_embeddings_from_file(pretrained_model_path + "tuned_word")             # <<<<<<<<<<<<<<
 *         self.fallback = self.static_embeddings.get(UNKNOWN_WORD)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_load_embeddings_from_file); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Add(__pyx_v_pretrained_model_path, __pyx_n_u_tuned_word); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 455, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_2,&__pyx_t_3,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 455, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_2,&__pyx_t_3,&__pyx_t_5};
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_7(__pyx_t_6); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 4) < 0) __PYX_ERR(0, 455, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 455, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __Pyx_DECREF_SET(__pyx_v__, __pyx_t_4);
  __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_tuned_embeddings, __pyx_t_2) < 0) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_tun_idx, __pyx_t_3) < 0) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_tun_voc, __pyx_t_5) < 0) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "neuralcoref/document.pyx":456
 *         _, self.static_embeddings, self.stat_idx, self.stat_voc = self.load_embeddings_from_file(pretrained_model_path + "static_word")
 *         _, self.tuned_embeddings, self.tun_idx, self.tun_voc = self.load_embeddings_from_file(pretrained_model_path + "tuned_word")
 *         self.fallback = self.static_embeddings.get(UNKNOWN_WORD)             # <<<<<<<<<<<<<<
 * 
 *         self.shape = self.static_embeddings[UNKNOWN_WORD].shape
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_static_embeddings); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_UNKNOWN_WORD); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_fallback, __pyx_t_1) < 0) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":458
 *         self.fallback = self.static_embeddings.get(UNKNOWN_WORD)
 * 
 *         self.shape = self.static_embeddings[UNKNOWN_WORD].shape             # <<<<<<<<<<<<<<
 *         shape2 = self.tuned_embeddings[UNKNOWN_WORD].shape
 *         assert self.shape == shape2
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_static_embeddings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UNKNOWN_WORD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_shape, __pyx_t_3) < 0) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":459
 * 
 *         self.shape = self.static_embeddings[UNKNOWN_WORD].shape
 *         shape2 = self.tuned_embeddings[UNKNOWN_WORD].shape             # <<<<<<<<<<<<<<
 *         assert self.shape == shape2
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_tuned_embeddings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_UNKNOWN_WORD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_shape2 = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":460
 *         self.shape = self.static_embeddings[UNKNOWN_WORD].shape
 *         shape2 = self.tuned_embeddings[UNKNOWN_WORD].shape
 *         assert self.shape == shape2             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_v_shape2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_8)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 460, __pyx_L1_error)
    }
  }
  #endif

  /* "neuralcoref/document.pyx":453
 *     Compute words embedding features for mentions
 *     '''
 *     def __init__(self, pretrained_model_path):             # <<<<<<<<<<<<<<
 *         _, self.static_embeddings, self.stat_idx, self.stat_voc = self.load_embeddings_from_file(pretrained_model_path + "static_word")
 *         _, self.tuned_embeddings, self.tun_idx, self.tun_voc = self.load_embeddings_from_file(pretrained_model_path + "tuned_word")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_shape2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":463
 * 
 *     @staticmethod
 *     def load_embeddings_from_file(name):             # <<<<<<<<<<<<<<
 *         print("Loading embeddings from", name)
 *         embeddings = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_3load_embeddings_from_file(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static PyMethodDef __pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_3load_embeddings_from_file = {"load_embeddings_from_file", (PyCFunction)__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_3load_embeddings_from_file, METH_O, 0};
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_3load_embeddings_from_file(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_embeddings_from_file (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_2load_embeddings_from_file(__pyx_self, ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_2load_embeddings_from_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_embeddings = NULL;
  PyObject *__pyx_v_voc_to_idx = NULL;
  PyObject *__pyx_v_idx_to_voc = NULL;
  PyObject *__pyx_v_mat = NULL;
  PyObject *__pyx_v_average_mean = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  int __pyx_t_17;
  __Pyx_TraceFrameInit(__pyx_codeobj__34)
  __Pyx_RefNannySetupContext("load_embeddings_from_file", 0);
  __Pyx_TraceCall("load_embeddings_from_file", __pyx_f[0], 463, 0, __PYX_ERR(0, 463, __pyx_L1_error));

  /* "neuralcoref/document.pyx":464
 *     @staticmethod
 *     def load_embeddings_from_file(name):
 *         print("Loading embeddings from", name)             # <<<<<<<<<<<<<<
 *         embeddings = {}
 *         voc_to_idx = {}
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_u_Loading_embeddings_from);
  __Pyx_GIVEREF(__pyx_kp_u_Loading_embeddings_from);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Loading_embeddings_from);
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_name);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":465
 *     def load_embeddings_from_file(name):
 *         print("Loading embeddings from", name)
 *         embeddings = {}             # <<<<<<<<<<<<<<
 *         voc_to_idx = {}
 *         idx_to_voc = []
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_embeddings = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":466
 *         print("Loading embeddings from", name)
 *         embeddings = {}
 *         voc_to_idx = {}             # <<<<<<<<<<<<<<
 *         idx_to_voc = []
 *         mat = numpy.load(name+"_embeddings.npy").astype(dtype='float32')
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_voc_to_idx = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":467
 *         embeddings = {}
 *         voc_to_idx = {}
 *         idx_to_voc = []             # <<<<<<<<<<<<<<
 *         mat = numpy.load(name+"_embeddings.npy").astype(dtype='float32')
 *         average_mean = numpy.average(mat, axis=0, weights=numpy.sum(mat, axis=1))
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_idx_to_voc = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":468
 *         voc_to_idx = {}
 *         idx_to_voc = []
 *         mat = numpy.load(name+"_embeddings.npy").astype(dtype='float32')             # <<<<<<<<<<<<<<
 *         average_mean = numpy.average(mat, axis=0, weights=numpy.sum(mat, axis=1))
 *         with io.open(name+"_vocabulary.txt", 'r', encoding='utf-8') as f:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_load); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_v_name, __pyx_kp_u_embeddings_npy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_astype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mat = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "neuralcoref/document.pyx":469
 *         idx_to_voc = []
 *         mat = numpy.load(name+"_embeddings.npy").astype(dtype='float32')
 *         average_mean = numpy.average(mat, axis=0, weights=numpy.sum(mat, axis=1))             # <<<<<<<<<<<<<<
 *         with io.open(name+"_vocabulary.txt", 'r', encoding='utf-8') as f:
 *             for i, line in enumerate(f):
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_average); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_mat);
  __Pyx_GIVEREF(__pyx_v_mat);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_mat);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_mat);
  __Pyx_GIVEREF(__pyx_v_mat);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_mat);
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_weights, __pyx_t_7) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_average_mean = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":470
 *         mat = numpy.load(name+"_embeddings.npy").astype(dtype='float32')
 *         average_mean = numpy.average(mat, axis=0, weights=numpy.sum(mat, axis=1))
 *         with io.open(name+"_vocabulary.txt", 'r', encoding='utf-8') as f:             # <<<<<<<<<<<<<<
 *             for i, line in enumerate(f):
 *                 embeddings[line.strip()] = mat[i, :]
 */
  /*with:*/ {
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_io); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_open); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_v_name, __pyx_kp_u_vocabulary_txt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
    __Pyx_INCREF(__pyx_n_u_r);
    __Pyx_GIVEREF(__pyx_n_u_r);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_u_r);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_encoding, __pyx_kp_u_utf_8) < 0) __PYX_ERR(0, 470, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 470, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 470, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 470, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        /*try:*/ {
          __pyx_v_f = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "neuralcoref/document.pyx":471
 *         average_mean = numpy.average(mat, axis=0, weights=numpy.sum(mat, axis=1))
 *         with io.open(name+"_vocabulary.txt", 'r', encoding='utf-8') as f:
 *             for i, line in enumerate(f):             # <<<<<<<<<<<<<<
 *                 embeddings[line.strip()] = mat[i, :]
 *                 voc_to_idx[line.strip()] = i
 */
          __Pyx_INCREF(__pyx_int_0);
          __pyx_t_5 = __pyx_int_0;
          if (likely(PyList_CheckExact(__pyx_v_f)) || PyTuple_CheckExact(__pyx_v_f)) {
            __pyx_t_2 = __pyx_v_f; __Pyx_INCREF(__pyx_t_2); __pyx_t_12 = 0;
            __pyx_t_13 = NULL;
          } else {
            __pyx_t_12 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_f); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 471, __pyx_L7_error)
          }
          for (;;) {
            if (likely(!__pyx_t_13)) {
              if (likely(PyList_CheckExact(__pyx_t_2))) {
                if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 471, __pyx_L7_error)
                #else
                __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 471, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_7);
                #endif
              } else {
                if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 471, __pyx_L7_error)
                #else
                __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 471, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_7);
                #endif
              }
            } else {
              __pyx_t_7 = __pyx_t_13(__pyx_t_2);
              if (unlikely(!__pyx_t_7)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 471, __pyx_L7_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_7);
            }
            __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_7);
            __pyx_t_7 = 0;
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
            __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 471, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_5);
            __pyx_t_5 = __pyx_t_7;
            __pyx_t_7 = 0;

            /* "neuralcoref/document.pyx":472
 *         with io.open(name+"_vocabulary.txt", 'r', encoding='utf-8') as f:
 *             for i, line in enumerate(f):
 *                 embeddings[line.strip()] = mat[i, :]             # <<<<<<<<<<<<<<
 *                 voc_to_idx[line.strip()] = i
 *                 idx_to_voc.append(line.strip())
 */
            __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 472, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_INCREF(__pyx_v_i);
            __Pyx_GIVEREF(__pyx_v_i);
            PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_i);
            __Pyx_INCREF(__pyx_slice__35);
            __Pyx_GIVEREF(__pyx_slice__35);
            PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_slice__35);
            __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_mat, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 472, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            if (__pyx_t_1) {
              __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 472, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            } else {
              __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 472, __pyx_L7_error)
            }
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(PyDict_SetItem(__pyx_v_embeddings, __pyx_t_7, __pyx_t_3) < 0)) __PYX_ERR(0, 472, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "neuralcoref/document.pyx":473
 *             for i, line in enumerate(f):
 *                 embeddings[line.strip()] = mat[i, :]
 *                 voc_to_idx[line.strip()] = i             # <<<<<<<<<<<<<<
 *                 idx_to_voc.append(line.strip())
 *         return average_mean, embeddings, voc_to_idx, idx_to_voc
 */
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 473, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_7, function);
              }
            }
            if (__pyx_t_6) {
              __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            } else {
              __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L7_error)
            }
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(PyDict_SetItem(__pyx_v_voc_to_idx, __pyx_t_3, __pyx_v_i) < 0)) __PYX_ERR(0, 473, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "neuralcoref/document.pyx":474
 *                 embeddings[line.strip()] = mat[i, :]
 *                 voc_to_idx[line.strip()] = i
 *                 idx_to_voc.append(line.strip())             # <<<<<<<<<<<<<<
 *         return average_mean, embeddings, voc_to_idx, idx_to_voc
 * 
 */
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 474, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_7, function);
              }
            }
            if (__pyx_t_6) {
              __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            } else {
              __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L7_error)
            }
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_idx_to_voc, __pyx_t_3); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 474, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "neuralcoref/document.pyx":471
 *         average_mean = numpy.average(mat, axis=0, weights=numpy.sum(mat, axis=1))
 *         with io.open(name+"_vocabulary.txt", 'r', encoding='utf-8') as f:
 *             for i, line in enumerate(f):             # <<<<<<<<<<<<<<
 *                 embeddings[line.strip()] = mat[i, :]
 *                 voc_to_idx[line.strip()] = i
 */
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "neuralcoref/document.pyx":470
 *         mat = numpy.load(name+"_embeddings.npy").astype(dtype='float32')
 *         average_mean = numpy.average(mat, axis=0, weights=numpy.sum(mat, axis=1))
 *         with io.open(name+"_vocabulary.txt", 'r', encoding='utf-8') as f:             # <<<<<<<<<<<<<<
 *             for i, line in enumerate(f):
 *                 embeddings[line.strip()] = mat[i, :]
 */
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.load_embeddings_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 470, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 470, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 470, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (__pyx_t_16 < 0) __PYX_ERR(0, 470, __pyx_L9_except_error)
          __pyx_t_17 = ((!(__pyx_t_16 != 0)) != 0);
          if (__pyx_t_17) {
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_2, __pyx_t_3);
            __pyx_t_5 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 470, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_8) {
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__36, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 470, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L18;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L1_error;
    __pyx_L18:;
  }

  /* "neuralcoref/document.pyx":475
 *                 voc_to_idx[line.strip()] = i
 *                 idx_to_voc.append(line.strip())
 *         return average_mean, embeddings, voc_to_idx, idx_to_voc             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_average_mean);
  __Pyx_GIVEREF(__pyx_v_average_mean);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_average_mean);
  __Pyx_INCREF(__pyx_v_embeddings);
  __Pyx_GIVEREF(__pyx_v_embeddings);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_embeddings);
  __Pyx_INCREF(__pyx_v_voc_to_idx);
  __Pyx_GIVEREF(__pyx_v_voc_to_idx);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_voc_to_idx);
  __Pyx_INCREF(__pyx_v_idx_to_voc);
  __Pyx_GIVEREF(__pyx_v_idx_to_voc);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_idx_to_voc);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":463
 * 
 *     @staticmethod
 *     def load_embeddings_from_file(name):             # <<<<<<<<<<<<<<
 *         print("Loading embeddings from", name)
 *         embeddings = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.load_embeddings_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_embeddings);
  __Pyx_XDECREF(__pyx_v_voc_to_idx);
  __Pyx_XDECREF(__pyx_v_idx_to_voc);
  __Pyx_XDECREF(__pyx_v_mat);
  __Pyx_XDECREF(__pyx_v_average_mean);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":478
 * 
 *     @staticmethod
 *     def normalize_word(w):             # <<<<<<<<<<<<<<
 *         if w is None:
 *             return MISSING_WORD
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_5normalize_word(PyObject *__pyx_self, PyObject *__pyx_v_w); /*proto*/
static PyMethodDef __pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_5normalize_word = {"normalize_word", (PyCFunction)__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_5normalize_word, METH_O, 0};
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_5normalize_word(PyObject *__pyx_self, PyObject *__pyx_v_w) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize_word (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_4normalize_word(__pyx_self, ((PyObject *)__pyx_v_w));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_4normalize_word(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_w) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__37)
  __Pyx_RefNannySetupContext("normalize_word", 0);
  __Pyx_TraceCall("normalize_word", __pyx_f[0], 478, 0, __PYX_ERR(0, 478, __pyx_L1_error));

  /* "neuralcoref/document.pyx":479
 *     @staticmethod
 *     def normalize_word(w):
 *         if w is None:             # <<<<<<<<<<<<<<
 *             return MISSING_WORD
 *         return re.sub(r"\d", u"0", w.lower_)
 */
  __pyx_t_1 = (__pyx_v_w == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "neuralcoref/document.pyx":480
 *     def normalize_word(w):
 *         if w is None:
 *             return MISSING_WORD             # <<<<<<<<<<<<<<
 *         return re.sub(r"\d", u"0", w.lower_)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_MISSING_WORD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "neuralcoref/document.pyx":479
 *     @staticmethod
 *     def normalize_word(w):
 *         if w is None:             # <<<<<<<<<<<<<<
 *             return MISSING_WORD
 *         return re.sub(r"\d", u"0", w.lower_)
 */
  }

  /* "neuralcoref/document.pyx":481
 *         if w is None:
 *             return MISSING_WORD
 *         return re.sub(r"\d", u"0", w.lower_)             # <<<<<<<<<<<<<<
 * 
 *     def get_document_embedding(self, utterances_list):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sub); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_w, __pyx_n_s_lower); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_kp_u_d, __pyx_kp_u_0, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_kp_u_d, __pyx_kp_u_0, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_kp_u_d);
    __Pyx_GIVEREF(__pyx_kp_u_d);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_kp_u_d);
    __Pyx_INCREF(__pyx_kp_u_0);
    __Pyx_GIVEREF(__pyx_kp_u_0);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_kp_u_0);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":478
 * 
 *     @staticmethod
 *     def normalize_word(w):             # <<<<<<<<<<<<<<
 *         if w is None:
 *             return MISSING_WORD
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.normalize_word", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":483
 *         return re.sub(r"\d", u"0", w.lower_)
 * 
 *     def get_document_embedding(self, utterances_list):             # <<<<<<<<<<<<<<
 *         ''' Embedding for the document '''
 *     #    We could also use this: embed_vector = numpy.copy(self.average_mean)#numpy.zeros(self.shape)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_7get_document_embedding(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11neuralcoref_8document_18EmbeddingExtractor_6get_document_embedding[] = " Embedding for the document ";
static PyMethodDef __pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_7get_document_embedding = {"get_document_embedding", (PyCFunction)__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_7get_document_embedding, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11neuralcoref_8document_18EmbeddingExtractor_6get_document_embedding};
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_7get_document_embedding(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_utterances_list = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_document_embedding (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_utterances_list,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_utterances_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_document_embedding", 1, 2, 2, 1); __PYX_ERR(0, 483, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_document_embedding") < 0)) __PYX_ERR(0, 483, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_utterances_list = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_document_embedding", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 483, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_document_embedding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_6get_document_embedding(__pyx_self, __pyx_v_self, __pyx_v_utterances_list);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_6get_document_embedding(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_utterances_list) {
  PyObject *__pyx_v_embed_vector = NULL;
  PyObject *__pyx_v_utt = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_utt_embed = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  long __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  __Pyx_TraceFrameInit(__pyx_codeobj__38)
  __Pyx_RefNannySetupContext("get_document_embedding", 0);
  __Pyx_TraceCall("get_document_embedding", __pyx_f[0], 483, 0, __PYX_ERR(0, 483, __pyx_L1_error));

  /* "neuralcoref/document.pyx":487
 *     #    We could also use this: embed_vector = numpy.copy(self.average_mean)#numpy.zeros(self.shape)
 *     #    return embed_vector
 *         embed_vector = numpy.zeros(self.shape, dtype='float32')             # <<<<<<<<<<<<<<
 *         for utt in utterances_list:
 *             _, utt_embed = self.get_average_embedding(utt)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_embed_vector = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":488
 *     #    return embed_vector
 *         embed_vector = numpy.zeros(self.shape, dtype='float32')
 *         for utt in utterances_list:             # <<<<<<<<<<<<<<
 *             _, utt_embed = self.get_average_embedding(utt)
 *             embed_vector += utt_embed
 */
  if (likely(PyList_CheckExact(__pyx_v_utterances_list)) || PyTuple_CheckExact(__pyx_v_utterances_list)) {
    __pyx_t_4 = __pyx_v_utterances_list; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_utterances_list); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 488, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 488, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 488, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 488, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_utt, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":489
 *         embed_vector = numpy.zeros(self.shape, dtype='float32')
 *         for utt in utterances_list:
 *             _, utt_embed = self.get_average_embedding(utt)             # <<<<<<<<<<<<<<
 *             embed_vector += utt_embed
 *         return embed_vector/max(len(utterances_list), 1)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_average_embedding); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_utt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_utt};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_utt};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 489, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_INCREF(__pyx_v_utt);
        __Pyx_GIVEREF(__pyx_v_utt);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_utt);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 489, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_7 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_2), 2) < 0) __PYX_ERR(0, 489, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 489, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_utt_embed, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "neuralcoref/document.pyx":490
 *         for utt in utterances_list:
 *             _, utt_embed = self.get_average_embedding(utt)
 *             embed_vector += utt_embed             # <<<<<<<<<<<<<<
 *         return embed_vector/max(len(utterances_list), 1)
 * 
 */
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_embed_vector, __pyx_v_utt_embed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_embed_vector, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":488
 *     #    return embed_vector
 *         embed_vector = numpy.zeros(self.shape, dtype='float32')
 *         for utt in utterances_list:             # <<<<<<<<<<<<<<
 *             _, utt_embed = self.get_average_embedding(utt)
 *             embed_vector += utt_embed
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":491
 *             _, utt_embed = self.get_average_embedding(utt)
 *             embed_vector += utt_embed
 *         return embed_vector/max(len(utterances_list), 1)             # <<<<<<<<<<<<<<
 * 
 *     def get_stat_word(self, word):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_9 = 1;
  __pyx_t_5 = PyObject_Length(__pyx_v_utterances_list); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 491, __pyx_L1_error)
  if (((__pyx_t_9 > __pyx_t_5) != 0)) {
    __pyx_t_10 = __pyx_t_9;
  } else {
    __pyx_t_10 = __pyx_t_5;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_embed_vector, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":483
 *         return re.sub(r"\d", u"0", w.lower_)
 * 
 *     def get_document_embedding(self, utterances_list):             # <<<<<<<<<<<<<<
 *         ''' Embedding for the document '''
 *     #    We could also use this: embed_vector = numpy.copy(self.average_mean)#numpy.zeros(self.shape)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_document_embedding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_embed_vector);
  __Pyx_XDECREF(__pyx_v_utt);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_utt_embed);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":493
 *         return embed_vector/max(len(utterances_list), 1)
 * 
 *     def get_stat_word(self, word):             # <<<<<<<<<<<<<<
 *         if word in self.static_embeddings:
 *             return word, self.static_embeddings.get(word)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_9get_stat_word(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_9get_stat_word = {"get_stat_word", (PyCFunction)__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_9get_stat_word, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_9get_stat_word(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_word = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_stat_word (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_word,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_word)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_stat_word", 1, 2, 2, 1); __PYX_ERR(0, 493, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_stat_word") < 0)) __PYX_ERR(0, 493, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_word = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_stat_word", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 493, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_stat_word", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_8get_stat_word(__pyx_self, __pyx_v_self, __pyx_v_word);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_8get_stat_word(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_word) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__39)
  __Pyx_RefNannySetupContext("get_stat_word", 0);
  __Pyx_TraceCall("get_stat_word", __pyx_f[0], 493, 0, __PYX_ERR(0, 493, __pyx_L1_error));

  /* "neuralcoref/document.pyx":494
 * 
 *     def get_stat_word(self, word):
 *         if word in self.static_embeddings:             # <<<<<<<<<<<<<<
 *             return word, self.static_embeddings.get(word)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_static_embeddings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_word, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "neuralcoref/document.pyx":495
 *     def get_stat_word(self, word):
 *         if word in self.static_embeddings:
 *             return word, self.static_embeddings.get(word)             # <<<<<<<<<<<<<<
 *         else:
 *             return UNKNOWN_WORD, self.fallback
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_static_embeddings); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_word); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_word};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_word};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 495, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_word);
        __Pyx_GIVEREF(__pyx_v_word);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_word);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_word);
    __Pyx_GIVEREF(__pyx_v_word);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_word);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "neuralcoref/document.pyx":494
 * 
 *     def get_stat_word(self, word):
 *         if word in self.static_embeddings:             # <<<<<<<<<<<<<<
 *             return word, self.static_embeddings.get(word)
 *         else:
 */
  }

  /* "neuralcoref/document.pyx":497
 *             return word, self.static_embeddings.get(word)
 *         else:
 *             return UNKNOWN_WORD, self.fallback             # <<<<<<<<<<<<<<
 * 
 *     def get_word_embedding(self, word, static=False):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_UNKNOWN_WORD); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fallback); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "neuralcoref/document.pyx":493
 *         return embed_vector/max(len(utterances_list), 1)
 * 
 *     def get_stat_word(self, word):             # <<<<<<<<<<<<<<
 *         if word in self.static_embeddings:
 *             return word, self.static_embeddings.get(word)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_stat_word", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":499
 *             return UNKNOWN_WORD, self.fallback
 * 
 *     def get_word_embedding(self, word, static=False):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a single word (tuned if possible, otherwise static) '''
 *         norm_word = self.normalize_word(word)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_11get_word_embedding(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11neuralcoref_8document_18EmbeddingExtractor_10get_word_embedding[] = " Embedding for a single word (tuned if possible, otherwise static) ";
static PyMethodDef __pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_11get_word_embedding = {"get_word_embedding", (PyCFunction)__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_11get_word_embedding, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11neuralcoref_8document_18EmbeddingExtractor_10get_word_embedding};
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_11get_word_embedding(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_word = 0;
  PyObject *__pyx_v_static = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_word_embedding (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_word,&__pyx_n_s_static,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_False));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_word)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_word_embedding", 0, 2, 3, 1); __PYX_ERR(0, 499, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_static);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_word_embedding") < 0)) __PYX_ERR(0, 499, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_word = values[1];
    __pyx_v_static = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_word_embedding", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 499, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_word_embedding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_10get_word_embedding(__pyx_self, __pyx_v_self, __pyx_v_word, __pyx_v_static);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_10get_word_embedding(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_word, PyObject *__pyx_v_static) {
  PyObject *__pyx_v_norm_word = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_TraceFrameInit(__pyx_codeobj__40)
  __Pyx_RefNannySetupContext("get_word_embedding", 0);
  __Pyx_TraceCall("get_word_embedding", __pyx_f[0], 499, 0, __PYX_ERR(0, 499, __pyx_L1_error));

  /* "neuralcoref/document.pyx":501
 *     def get_word_embedding(self, word, static=False):
 *         ''' Embedding for a single word (tuned if possible, otherwise static) '''
 *         norm_word = self.normalize_word(word)             # <<<<<<<<<<<<<<
 *         if static:
 *             return self.get_stat_word(norm_word)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_normalize_word); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_word); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_word};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_word};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_word);
      __Pyx_GIVEREF(__pyx_v_word);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_word);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_norm_word = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":502
 *         ''' Embedding for a single word (tuned if possible, otherwise static) '''
 *         norm_word = self.normalize_word(word)
 *         if static:             # <<<<<<<<<<<<<<
 *             return self.get_stat_word(norm_word)
 *         else:
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_static); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 502, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "neuralcoref/document.pyx":503
 *         norm_word = self.normalize_word(word)
 *         if static:
 *             return self.get_stat_word(norm_word)             # <<<<<<<<<<<<<<
 *         else:
 *             if norm_word in self.tuned_embeddings:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_stat_word); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_norm_word); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_norm_word};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_norm_word};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 503, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_norm_word);
        __Pyx_GIVEREF(__pyx_v_norm_word);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_norm_word);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "neuralcoref/document.pyx":502
 *         ''' Embedding for a single word (tuned if possible, otherwise static) '''
 *         norm_word = self.normalize_word(word)
 *         if static:             # <<<<<<<<<<<<<<
 *             return self.get_stat_word(norm_word)
 *         else:
 */
  }

  /* "neuralcoref/document.pyx":505
 *             return self.get_stat_word(norm_word)
 *         else:
 *             if norm_word in self.tuned_embeddings:             # <<<<<<<<<<<<<<
 *                 return norm_word, self.tuned_embeddings.get(norm_word)
 *             else:
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_tuned_embeddings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_norm_word, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "neuralcoref/document.pyx":506
 *         else:
 *             if norm_word in self.tuned_embeddings:
 *                 return norm_word, self.tuned_embeddings.get(norm_word)             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.get_stat_word(norm_word)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_tuned_embeddings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 506, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_2) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_norm_word); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_norm_word};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_norm_word};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        {
          __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 506, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
          __Pyx_INCREF(__pyx_v_norm_word);
          __Pyx_GIVEREF(__pyx_v_norm_word);
          PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_norm_word);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 506, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_norm_word);
      __Pyx_GIVEREF(__pyx_v_norm_word);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_norm_word);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "neuralcoref/document.pyx":505
 *             return self.get_stat_word(norm_word)
 *         else:
 *             if norm_word in self.tuned_embeddings:             # <<<<<<<<<<<<<<
 *                 return norm_word, self.tuned_embeddings.get(norm_word)
 *             else:
 */
    }

    /* "neuralcoref/document.pyx":508
 *                 return norm_word, self.tuned_embeddings.get(norm_word)
 *             else:
 *                 return self.get_stat_word(norm_word)             # <<<<<<<<<<<<<<
 * 
 *     def get_word_in_sentence(self, word_idx, sentence):
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_stat_word); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_norm_word); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_norm_word};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_norm_word};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        {
          __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_norm_word);
          __Pyx_GIVEREF(__pyx_v_norm_word);
          PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_norm_word);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;
    }
  }

  /* "neuralcoref/document.pyx":499
 *             return UNKNOWN_WORD, self.fallback
 * 
 *     def get_word_embedding(self, word, static=False):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a single word (tuned if possible, otherwise static) '''
 *         norm_word = self.normalize_word(word)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_word_embedding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_norm_word);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":510
 *                 return self.get_stat_word(norm_word)
 * 
 *     def get_word_in_sentence(self, word_idx, sentence):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a word in a sentence '''
 *         if word_idx < sentence.start or word_idx >= sentence.end:
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_13get_word_in_sentence(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11neuralcoref_8document_18EmbeddingExtractor_12get_word_in_sentence[] = " Embedding for a word in a sentence ";
static PyMethodDef __pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_13get_word_in_sentence = {"get_word_in_sentence", (PyCFunction)__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_13get_word_in_sentence, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11neuralcoref_8document_18EmbeddingExtractor_12get_word_in_sentence};
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_13get_word_in_sentence(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_word_idx = 0;
  PyObject *__pyx_v_sentence = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_word_in_sentence (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_word_idx,&__pyx_n_s_sentence,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_word_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_word_in_sentence", 1, 3, 3, 1); __PYX_ERR(0, 510, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sentence)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_word_in_sentence", 1, 3, 3, 2); __PYX_ERR(0, 510, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_word_in_sentence") < 0)) __PYX_ERR(0, 510, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_word_idx = values[1];
    __pyx_v_sentence = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_word_in_sentence", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 510, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_word_in_sentence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_12get_word_in_sentence(__pyx_self, __pyx_v_self, __pyx_v_word_idx, __pyx_v_sentence);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_12get_word_in_sentence(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_word_idx, PyObject *__pyx_v_sentence) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__41)
  __Pyx_RefNannySetupContext("get_word_in_sentence", 0);
  __Pyx_TraceCall("get_word_in_sentence", __pyx_f[0], 510, 0, __PYX_ERR(0, 510, __pyx_L1_error));

  /* "neuralcoref/document.pyx":512
 *     def get_word_in_sentence(self, word_idx, sentence):
 *         ''' Embedding for a word in a sentence '''
 *         if word_idx < sentence.start or word_idx >= sentence.end:             # <<<<<<<<<<<<<<
 *             return self.get_word_embedding(None)
 *         return self.get_word_embedding(sentence.doc[word_idx])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sentence, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_word_idx, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sentence, __pyx_n_s_end); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_word_idx, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "neuralcoref/document.pyx":513
 *         ''' Embedding for a word in a sentence '''
 *         if word_idx < sentence.start or word_idx >= sentence.end:
 *             return self.get_word_embedding(None)             # <<<<<<<<<<<<<<
 *         return self.get_word_embedding(sentence.doc[word_idx])
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_word_embedding); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "neuralcoref/document.pyx":512
 *     def get_word_in_sentence(self, word_idx, sentence):
 *         ''' Embedding for a word in a sentence '''
 *         if word_idx < sentence.start or word_idx >= sentence.end:             # <<<<<<<<<<<<<<
 *             return self.get_word_embedding(None)
 *         return self.get_word_embedding(sentence.doc[word_idx])
 */
  }

  /* "neuralcoref/document.pyx":514
 *         if word_idx < sentence.start or word_idx >= sentence.end:
 *             return self.get_word_embedding(None)
 *         return self.get_word_embedding(sentence.doc[word_idx])             # <<<<<<<<<<<<<<
 * 
 *     def get_average_embedding(self, token_list):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_word_embedding); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_sentence, __pyx_n_s_doc_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_word_idx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":510
 *                 return self.get_stat_word(norm_word)
 * 
 *     def get_word_in_sentence(self, word_idx, sentence):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a word in a sentence '''
 *         if word_idx < sentence.start or word_idx >= sentence.end:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_word_in_sentence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":516
 *         return self.get_word_embedding(sentence.doc[word_idx])
 * 
 *     def get_average_embedding(self, token_list):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a list of words '''
 *         embed_vector = numpy.zeros(self.shape, dtype='float32') #We could also use numpy.copy(self.average_mean)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_15get_average_embedding(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11neuralcoref_8document_18EmbeddingExtractor_14get_average_embedding[] = " Embedding for a list of words ";
static PyMethodDef __pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_15get_average_embedding = {"get_average_embedding", (PyCFunction)__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_15get_average_embedding, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11neuralcoref_8document_18EmbeddingExtractor_14get_average_embedding};
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_15get_average_embedding(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_token_list = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_average_embedding (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_token_list,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_token_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_average_embedding", 1, 2, 2, 1); __PYX_ERR(0, 516, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_average_embedding") < 0)) __PYX_ERR(0, 516, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_token_list = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_average_embedding", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 516, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_average_embedding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_14get_average_embedding(__pyx_self, __pyx_v_self, __pyx_v_token_list);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_14get_average_embedding(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_token_list) {
  PyObject *__pyx_v_embed_vector = NULL;
  PyObject *__pyx_v_word_list = NULL;
  PyObject *__pyx_v_tok = NULL;
  PyObject *__pyx_v_word = NULL;
  PyObject *__pyx_v_embed = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  long __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  __Pyx_TraceFrameInit(__pyx_codeobj__43)
  __Pyx_RefNannySetupContext("get_average_embedding", 0);
  __Pyx_TraceCall("get_average_embedding", __pyx_f[0], 516, 0, __PYX_ERR(0, 516, __pyx_L1_error));

  /* "neuralcoref/document.pyx":518
 *     def get_average_embedding(self, token_list):
 *         ''' Embedding for a list of words '''
 *         embed_vector = numpy.zeros(self.shape, dtype='float32') #We could also use numpy.copy(self.average_mean)             # <<<<<<<<<<<<<<
 *         word_list = []
 *         for tok in token_list:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_embed_vector = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":519
 *         ''' Embedding for a list of words '''
 *         embed_vector = numpy.zeros(self.shape, dtype='float32') #We could also use numpy.copy(self.average_mean)
 *         word_list = []             # <<<<<<<<<<<<<<
 *         for tok in token_list:
 *             if tok.lower_ not in [".", "!", "?"]:
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_word_list = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":520
 *         embed_vector = numpy.zeros(self.shape, dtype='float32') #We could also use numpy.copy(self.average_mean)
 *         word_list = []
 *         for tok in token_list:             # <<<<<<<<<<<<<<
 *             if tok.lower_ not in [".", "!", "?"]:
 *                 word, embed = self.get_word_embedding(tok, static=True)
 */
  if (likely(PyList_CheckExact(__pyx_v_token_list)) || PyTuple_CheckExact(__pyx_v_token_list)) {
    __pyx_t_4 = __pyx_v_token_list; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_token_list); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 520, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 520, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 520, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 520, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_tok, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":521
 *         word_list = []
 *         for tok in token_list:
 *             if tok.lower_ not in [".", "!", "?"]:             # <<<<<<<<<<<<<<
 *                 word, embed = self.get_word_embedding(tok, static=True)
 *                 embed_vector += embed
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tok, __pyx_n_s_lower); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_kp_u__44, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 521, __pyx_L1_error)
    if (__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_kp_u__45, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 521, __pyx_L1_error)
    if (__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_kp_u__46, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 521, __pyx_L1_error)
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "neuralcoref/document.pyx":522
 *         for tok in token_list:
 *             if tok.lower_ not in [".", "!", "?"]:
 *                 word, embed = self.get_word_embedding(tok, static=True)             # <<<<<<<<<<<<<<
 *                 embed_vector += embed
 *                 word_list.append(word)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_word_embedding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_tok);
      __Pyx_GIVEREF(__pyx_v_tok);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_tok);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_static, Py_True) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
        PyObject* sequence = __pyx_t_9;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 522, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 522, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 522, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_1 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = Py_TYPE(__pyx_t_1)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_10(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_3 = __pyx_t_10(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_1), 2) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 522, __pyx_L1_error)
        __pyx_L10_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_word, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_embed, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "neuralcoref/document.pyx":523
 *             if tok.lower_ not in [".", "!", "?"]:
 *                 word, embed = self.get_word_embedding(tok, static=True)
 *                 embed_vector += embed             # <<<<<<<<<<<<<<
 *                 word_list.append(word)
 *         return word_list, (embed_vector/max(len(word_list), 1))
 */
      __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_v_embed_vector, __pyx_v_embed); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF_SET(__pyx_v_embed_vector, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "neuralcoref/document.pyx":524
 *                 word, embed = self.get_word_embedding(tok, static=True)
 *                 embed_vector += embed
 *                 word_list.append(word)             # <<<<<<<<<<<<<<
 *         return word_list, (embed_vector/max(len(word_list), 1))
 * 
 */
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_word_list, __pyx_v_word); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 524, __pyx_L1_error)

      /* "neuralcoref/document.pyx":521
 *         word_list = []
 *         for tok in token_list:
 *             if tok.lower_ not in [".", "!", "?"]:             # <<<<<<<<<<<<<<
 *                 word, embed = self.get_word_embedding(tok, static=True)
 *                 embed_vector += embed
 */
    }

    /* "neuralcoref/document.pyx":520
 *         embed_vector = numpy.zeros(self.shape, dtype='float32') #We could also use numpy.copy(self.average_mean)
 *         word_list = []
 *         for tok in token_list:             # <<<<<<<<<<<<<<
 *             if tok.lower_ not in [".", "!", "?"]:
 *                 word, embed = self.get_word_embedding(tok, static=True)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":525
 *                 embed_vector += embed
 *                 word_list.append(word)
 *         return word_list, (embed_vector/max(len(word_list), 1))             # <<<<<<<<<<<<<<
 * 
 *     def get_mention_embeddings(self, mention, doc_embedding):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_12 = 1;
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_word_list); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 525, __pyx_L1_error)
  if (((__pyx_t_12 > __pyx_t_5) != 0)) {
    __pyx_t_13 = __pyx_t_12;
  } else {
    __pyx_t_13 = __pyx_t_5;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_v_embed_vector, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_word_list);
  __Pyx_GIVEREF(__pyx_v_word_list);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_word_list);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":516
 *         return self.get_word_embedding(sentence.doc[word_idx])
 * 
 *     def get_average_embedding(self, token_list):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a list of words '''
 *         embed_vector = numpy.zeros(self.shape, dtype='float32') #We could also use numpy.copy(self.average_mean)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_average_embedding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_embed_vector);
  __Pyx_XDECREF(__pyx_v_word_list);
  __Pyx_XDECREF(__pyx_v_tok);
  __Pyx_XDECREF(__pyx_v_word);
  __Pyx_XDECREF(__pyx_v_embed);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":527
 *         return word_list, (embed_vector/max(len(word_list), 1))
 * 
 *     def get_mention_embeddings(self, mention, doc_embedding):             # <<<<<<<<<<<<<<
 *         ''' Get span (averaged) and word (single) embeddings of a mention '''
 *         ms = mention.span
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_17get_mention_embeddings(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11neuralcoref_8document_18EmbeddingExtractor_16get_mention_embeddings[] = " Get span (averaged) and word (single) embeddings of a mention ";
static PyMethodDef __pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_17get_mention_embeddings = {"get_mention_embeddings", (PyCFunction)__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_17get_mention_embeddings, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11neuralcoref_8document_18EmbeddingExtractor_16get_mention_embeddings};
static PyObject *__pyx_pw_11neuralcoref_8document_18EmbeddingExtractor_17get_mention_embeddings(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_mention = 0;
  PyObject *__pyx_v_doc_embedding = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mention_embeddings (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_mention,&__pyx_n_s_doc_embedding,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mention)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_mention_embeddings", 1, 3, 3, 1); __PYX_ERR(0, 527, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_doc_embedding)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_mention_embeddings", 1, 3, 3, 2); __PYX_ERR(0, 527, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_mention_embeddings") < 0)) __PYX_ERR(0, 527, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_mention = values[1];
    __pyx_v_doc_embedding = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_mention_embeddings", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 527, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_mention_embeddings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_16get_mention_embeddings(__pyx_self, __pyx_v_self, __pyx_v_mention, __pyx_v_doc_embedding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_18EmbeddingExtractor_16get_mention_embeddings(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_mention, PyObject *__pyx_v_doc_embedding) {
  PyObject *__pyx_v_ms = NULL;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_v_ms_lefts = NULL;
  PyObject *__pyx_v_ms_rights = NULL;
  PyObject *__pyx_v_head = NULL;
  PyObject *__pyx_v_spans = NULL;
  PyObject *__pyx_v_words = NULL;
  PyObject *__pyx_v_spans_embeddings_ = NULL;
  PyObject *__pyx_v_words_embeddings_ = NULL;
  PyObject *__pyx_v_em = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  __Pyx_TraceFrameInit(__pyx_codeobj__47)
  __Pyx_RefNannySetupContext("get_mention_embeddings", 0);
  __Pyx_TraceCall("get_mention_embeddings", __pyx_f[0], 527, 0, __PYX_ERR(0, 527, __pyx_L1_error));

  /* "neuralcoref/document.pyx":529
 *     def get_mention_embeddings(self, mention, doc_embedding):
 *         ''' Get span (averaged) and word (single) embeddings of a mention '''
 *         ms = mention.span             # <<<<<<<<<<<<<<
 *         st = ms.sent
 *         ms_lefts = ms.doc[max(ms.start-5, st.start):ms.start]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_mention, __pyx_n_s_span); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ms = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":530
 *         ''' Get span (averaged) and word (single) embeddings of a mention '''
 *         ms = mention.span
 *         st = ms.sent             # <<<<<<<<<<<<<<
 *         ms_lefts = ms.doc[max(ms.start-5, st.start):ms.start]
 *         ms_rights = ms.doc[ms.end:min(ms.end+5, st.end)]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_sent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_st = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":531
 *         ms = mention.span
 *         st = ms.sent
 *         ms_lefts = ms.doc[max(ms.start-5, st.start):ms.start]             # <<<<<<<<<<<<<<
 *         ms_rights = ms.doc[ms.end:min(ms.end+5, st.end)]
 *         head = ms.root.head
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_doc_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_st, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_5, 5, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 531, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, &__pyx_t_3, &__pyx_t_2, NULL, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ms_lefts = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":532
 *         st = ms.sent
 *         ms_lefts = ms.doc[max(ms.start-5, st.start):ms.start]
 *         ms_rights = ms.doc[ms.end:min(ms.end+5, st.end)]             # <<<<<<<<<<<<<<
 *         head = ms.root.head
 *         spans = [self.get_average_embedding(ms),
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_doc_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_end); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_st, __pyx_n_s_end); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_5, 5, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_3, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 532, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = __pyx_t_5;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_4, 0, 0, &__pyx_t_2, &__pyx_t_1, NULL, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ms_rights = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":533
 *         ms_lefts = ms.doc[max(ms.start-5, st.start):ms.start]
 *         ms_rights = ms.doc[ms.end:min(ms.end+5, st.end)]
 *         head = ms.root.head             # <<<<<<<<<<<<<<
 *         spans = [self.get_average_embedding(ms),
 *                  self.get_average_embedding(ms_lefts),
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_root); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_head_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_head = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":534
 *         ms_rights = ms.doc[ms.end:min(ms.end+5, st.end)]
 *         head = ms.root.head
 *         spans = [self.get_average_embedding(ms),             # <<<<<<<<<<<<<<
 *                  self.get_average_embedding(ms_lefts),
 *                  self.get_average_embedding(ms_rights),
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_average_embedding); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_ms); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_ms};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_ms};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_ms);
      __Pyx_GIVEREF(__pyx_v_ms);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_ms);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":535
 *         head = ms.root.head
 *         spans = [self.get_average_embedding(ms),
 *                  self.get_average_embedding(ms_lefts),             # <<<<<<<<<<<<<<
 *                  self.get_average_embedding(ms_rights),
 *                  self.get_average_embedding(st),
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_average_embedding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_ms_lefts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_ms_lefts};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_ms_lefts};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_ms_lefts);
      __Pyx_GIVEREF(__pyx_v_ms_lefts);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_ms_lefts);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":536
 *         spans = [self.get_average_embedding(ms),
 *                  self.get_average_embedding(ms_lefts),
 *                  self.get_average_embedding(ms_rights),             # <<<<<<<<<<<<<<
 *                  self.get_average_embedding(st),
 *                  (unicode_(doc_embedding[0:8]) + "...", doc_embedding)]
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_average_embedding); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_ms_rights); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_ms_rights};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 536, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_ms_rights};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 536, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_ms_rights);
      __Pyx_GIVEREF(__pyx_v_ms_rights);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_ms_rights);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "neuralcoref/document.pyx":537
 *                  self.get_average_embedding(ms_lefts),
 *                  self.get_average_embedding(ms_rights),
 *                  self.get_average_embedding(st),             # <<<<<<<<<<<<<<
 *                  (unicode_(doc_embedding[0:8]) + "...", doc_embedding)]
 *         words = [self.get_word_embedding(ms.root),
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_average_embedding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_st); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_st};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 537, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_st};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 537, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_st);
      __Pyx_GIVEREF(__pyx_v_st);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_st);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":538
 *                  self.get_average_embedding(ms_rights),
 *                  self.get_average_embedding(st),
 *                  (unicode_(doc_embedding[0:8]) + "...", doc_embedding)]             # <<<<<<<<<<<<<<
 *         words = [self.get_word_embedding(ms.root),
 *                  self.get_word_embedding(ms[0]),
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_doc_embedding, 0, 8, NULL, NULL, &__pyx_slice__48, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_9) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_2};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_2};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_kp_u__49); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __Pyx_INCREF(__pyx_v_doc_embedding);
  __Pyx_GIVEREF(__pyx_v_doc_embedding);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_doc_embedding);
  __pyx_t_8 = 0;

  /* "neuralcoref/document.pyx":534
 *         ms_rights = ms.doc[ms.end:min(ms.end+5, st.end)]
 *         head = ms.root.head
 *         spans = [self.get_average_embedding(ms),             # <<<<<<<<<<<<<<
 *                  self.get_average_embedding(ms_lefts),
 *                  self.get_average_embedding(ms_rights),
 */
  __pyx_t_8 = PyList_New(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_8, 4, __pyx_t_7);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_v_spans = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "neuralcoref/document.pyx":539
 *                  self.get_average_embedding(st),
 *                  (unicode_(doc_embedding[0:8]) + "...", doc_embedding)]
 *         words = [self.get_word_embedding(ms.root),             # <<<<<<<<<<<<<<
 *                  self.get_word_embedding(ms[0]),
 *                  self.get_word_embedding(ms[-1]),
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_word_embedding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_root); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_8);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":540
 *                  (unicode_(doc_embedding[0:8]) + "...", doc_embedding)]
 *         words = [self.get_word_embedding(ms.root),
 *                  self.get_word_embedding(ms[0]),             # <<<<<<<<<<<<<<
 *                  self.get_word_embedding(ms[-1]),
 *                  self.get_word_in_sentence(ms.start-1, st),
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_word_embedding); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_ms, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 540, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 540, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":541
 *         words = [self.get_word_embedding(ms.root),
 *                  self.get_word_embedding(ms[0]),
 *                  self.get_word_embedding(ms[-1]),             # <<<<<<<<<<<<<<
 *                  self.get_word_in_sentence(ms.start-1, st),
 *                  self.get_word_in_sentence(ms.end, st),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_word_embedding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_ms, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":542
 *                  self.get_word_embedding(ms[0]),
 *                  self.get_word_embedding(ms[-1]),
 *                  self.get_word_in_sentence(ms.start-1, st),             # <<<<<<<<<<<<<<
 *                  self.get_word_in_sentence(ms.end, st),
 *                  self.get_word_in_sentence(ms.start-2, st),
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_word_in_sentence); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_start); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_v_st};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_v_st};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_11, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_st);
    __Pyx_GIVEREF(__pyx_v_st);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_11, __pyx_v_st);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "neuralcoref/document.pyx":543
 *                  self.get_word_embedding(ms[-1]),
 *                  self.get_word_in_sentence(ms.start-1, st),
 *                  self.get_word_in_sentence(ms.end, st),             # <<<<<<<<<<<<<<
 *                  self.get_word_in_sentence(ms.start-2, st),
 *                  self.get_word_in_sentence(ms.end+1, st),
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_word_in_sentence); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_end); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_v_st};
    __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_v_st};
    __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_st);
    __Pyx_GIVEREF(__pyx_v_st);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_v_st);
    __pyx_t_4 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":544
 *                  self.get_word_in_sentence(ms.start-1, st),
 *                  self.get_word_in_sentence(ms.end, st),
 *                  self.get_word_in_sentence(ms.start-2, st),             # <<<<<<<<<<<<<<
 *                  self.get_word_in_sentence(ms.end+1, st),
 *                  self.get_word_embedding(head)]
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_word_in_sentence); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_start); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_5, __pyx_v_st};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_5, __pyx_v_st};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_st);
    __Pyx_GIVEREF(__pyx_v_st);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_v_st);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "neuralcoref/document.pyx":545
 *                  self.get_word_in_sentence(ms.end, st),
 *                  self.get_word_in_sentence(ms.start-2, st),
 *                  self.get_word_in_sentence(ms.end+1, st),             # <<<<<<<<<<<<<<
 *                  self.get_word_embedding(head)]
 *         spans_embeddings_ = {"00_Mention": spans[0][0],
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_word_in_sentence); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_end); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_12)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_v_st};
    __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_v_st};
    __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_13 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_11, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_st);
    __Pyx_GIVEREF(__pyx_v_st);
    PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_11, __pyx_v_st);
    __pyx_t_4 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_13, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neuralcoref/document.pyx":546
 *                  self.get_word_in_sentence(ms.start-2, st),
 *                  self.get_word_in_sentence(ms.end+1, st),
 *                  self.get_word_embedding(head)]             # <<<<<<<<<<<<<<
 *         spans_embeddings_ = {"00_Mention": spans[0][0],
 *                              "01_MentionLeft": spans[1][0],
 */
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_word_embedding); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_head); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_head};
      __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 546, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_12);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_head};
      __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 546, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_12);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_head);
      __Pyx_GIVEREF(__pyx_v_head);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_head);
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_5, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "neuralcoref/document.pyx":539
 *                  self.get_average_embedding(st),
 *                  (unicode_(doc_embedding[0:8]) + "...", doc_embedding)]
 *         words = [self.get_word_embedding(ms.root),             # <<<<<<<<<<<<<<
 *                  self.get_word_embedding(ms[0]),
 *                  self.get_word_embedding(ms[-1]),
 */
  __pyx_t_13 = PyList_New(8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_13, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_13, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_13, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_13, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_13, 4, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_13, 5, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_13, 6, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_13, 7, __pyx_t_12);
  __pyx_t_8 = 0;
  __pyx_t_7 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_10 = 0;
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;
  __pyx_t_12 = 0;
  __pyx_v_words = ((PyObject*)__pyx_t_13);
  __pyx_t_13 = 0;

  /* "neuralcoref/document.pyx":547
 *                  self.get_word_in_sentence(ms.end+1, st),
 *                  self.get_word_embedding(head)]
 *         spans_embeddings_ = {"00_Mention": spans[0][0],             # <<<<<<<<<<<<<<
 *                              "01_MentionLeft": spans[1][0],
 *                              "02_MentionRight": spans[2][0],
 */
  __pyx_t_13 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_v_spans, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_12, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_00_Mention, __pyx_t_9) < 0) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "neuralcoref/document.pyx":548
 *                  self.get_word_embedding(head)]
 *         spans_embeddings_ = {"00_Mention": spans[0][0],
 *                              "01_MentionLeft": spans[1][0],             # <<<<<<<<<<<<<<
 *                              "02_MentionRight": spans[2][0],
 *                              "03_Sentence": spans[3][0],
 */
  __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_spans, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_01_MentionLeft, __pyx_t_12) < 0) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neuralcoref/document.pyx":549
 *         spans_embeddings_ = {"00_Mention": spans[0][0],
 *                              "01_MentionLeft": spans[1][0],
 *                              "02_MentionRight": spans[2][0],             # <<<<<<<<<<<<<<
 *                              "03_Sentence": spans[3][0],
 *                              "04_Doc": spans[4][0]}
 */
  __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_v_spans, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_12, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_02_MentionRight, __pyx_t_9) < 0) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "neuralcoref/document.pyx":550
 *                              "01_MentionLeft": spans[1][0],
 *                              "02_MentionRight": spans[2][0],
 *                              "03_Sentence": spans[3][0],             # <<<<<<<<<<<<<<
 *                              "04_Doc": spans[4][0]}
 *         words_embeddings_ = {"00_MentionHead": words[0][0],
 */
  __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_spans, 3, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_03_Sentence, __pyx_t_12) < 0) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neuralcoref/document.pyx":551
 *                              "02_MentionRight": spans[2][0],
 *                              "03_Sentence": spans[3][0],
 *                              "04_Doc": spans[4][0]}             # <<<<<<<<<<<<<<
 *         words_embeddings_ = {"00_MentionHead": words[0][0],
 *                              "01_MentionFirstWord": words[1][0],
 */
  __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_v_spans, 4, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_12, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_04_Doc, __pyx_t_9) < 0) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_spans_embeddings_ = ((PyObject*)__pyx_t_13);
  __pyx_t_13 = 0;

  /* "neuralcoref/document.pyx":552
 *                              "03_Sentence": spans[3][0],
 *                              "04_Doc": spans[4][0]}
 *         words_embeddings_ = {"00_MentionHead": words[0][0],             # <<<<<<<<<<<<<<
 *                              "01_MentionFirstWord": words[1][0],
 *                              "02_MentionLastWord": words[2][0],
 */
  __pyx_t_13 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_words, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_00_MentionHead, __pyx_t_12) < 0) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neuralcoref/document.pyx":553
 *                              "04_Doc": spans[4][0]}
 *         words_embeddings_ = {"00_MentionHead": words[0][0],
 *                              "01_MentionFirstWord": words[1][0],             # <<<<<<<<<<<<<<
 *                              "02_MentionLastWord": words[2][0],
 *                              "03_PreviousWord": words[3][0],
 */
  __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_v_words, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_12, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_01_MentionFirstWord, __pyx_t_9) < 0) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "neuralcoref/document.pyx":554
 *         words_embeddings_ = {"00_MentionHead": words[0][0],
 *                              "01_MentionFirstWord": words[1][0],
 *                              "02_MentionLastWord": words[2][0],             # <<<<<<<<<<<<<<
 *                              "03_PreviousWord": words[3][0],
 *                              "04_NextWord": words[4][0],
 */
  __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_words, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_02_MentionLastWord, __pyx_t_12) < 0) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neuralcoref/document.pyx":555
 *                              "01_MentionFirstWord": words[1][0],
 *                              "02_MentionLastWord": words[2][0],
 *                              "03_PreviousWord": words[3][0],             # <<<<<<<<<<<<<<
 *                              "04_NextWord": words[4][0],
 *                              "05_SecondPreviousWord": words[5][0],
 */
  __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_v_words, 3, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_12, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_03_PreviousWord, __pyx_t_9) < 0) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "neuralcoref/document.pyx":556
 *                              "02_MentionLastWord": words[2][0],
 *                              "03_PreviousWord": words[3][0],
 *                              "04_NextWord": words[4][0],             # <<<<<<<<<<<<<<
 *                              "05_SecondPreviousWord": words[5][0],
 *                              "06_SecondNextWord": words[6][0],
 */
  __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_words, 4, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_04_NextWord, __pyx_t_12) < 0) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neuralcoref/document.pyx":557
 *                              "03_PreviousWord": words[3][0],
 *                              "04_NextWord": words[4][0],
 *                              "05_SecondPreviousWord": words[5][0],             # <<<<<<<<<<<<<<
 *                              "06_SecondNextWord": words[6][0],
 *                              "07_MentionRootHead": words[7][0]}
 */
  __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_v_words, 5, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_12, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_05_SecondPreviousWord, __pyx_t_9) < 0) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "neuralcoref/document.pyx":558
 *                              "04_NextWord": words[4][0],
 *                              "05_SecondPreviousWord": words[5][0],
 *                              "06_SecondNextWord": words[6][0],             # <<<<<<<<<<<<<<
 *                              "07_MentionRootHead": words[7][0]}
 *         return (spans_embeddings_,
 */
  __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_words, 6, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_06_SecondNextWord, __pyx_t_12) < 0) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neuralcoref/document.pyx":559
 *                              "05_SecondPreviousWord": words[5][0],
 *                              "06_SecondNextWord": words[6][0],
 *                              "07_MentionRootHead": words[7][0]}             # <<<<<<<<<<<<<<
 *         return (spans_embeddings_,
 *                 words_embeddings_,
 */
  __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_v_words, 7, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_12, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_kp_u_07_MentionRootHead, __pyx_t_9) < 0) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_words_embeddings_ = ((PyObject*)__pyx_t_13);
  __pyx_t_13 = 0;

  /* "neuralcoref/document.pyx":560
 *                              "06_SecondNextWord": words[6][0],
 *                              "07_MentionRootHead": words[7][0]}
 *         return (spans_embeddings_,             # <<<<<<<<<<<<<<
 *                 words_embeddings_,
 *                 numpy.concatenate([em[1] for em in spans], axis=0),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "neuralcoref/document.pyx":562
 *         return (spans_embeddings_,
 *                 words_embeddings_,
 *                 numpy.concatenate([em[1] for em in spans], axis=0),             # <<<<<<<<<<<<<<
 *                 numpy.concatenate([em[1] for em in words], axis=0))
 * 
 */
  __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = __pyx_v_spans; __Pyx_INCREF(__pyx_t_12); __pyx_t_14 = 0;
  for (;;) {
    if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_12)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 562, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_12, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_em, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_em, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_13);
  __pyx_t_13 = 0;
  __pyx_t_13 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "neuralcoref/document.pyx":563
 *                 words_embeddings_,
 *                 numpy.concatenate([em[1] for em in spans], axis=0),
 *                 numpy.concatenate([em[1] for em in words], axis=0))             # <<<<<<<<<<<<<<
 * 
 * cdef class Document:
 */
  __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_9 = __pyx_v_words; __Pyx_INCREF(__pyx_t_9); __pyx_t_14 = 0;
  for (;;) {
    if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_9)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_10 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_14); __Pyx_INCREF(__pyx_t_10); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 563, __pyx_L1_error)
    #else
    __pyx_t_10 = PySequence_ITEM(__pyx_t_9, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_em, __pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_em, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_13);
  __pyx_t_13 = 0;
  __pyx_t_13 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 563, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_9, __pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "neuralcoref/document.pyx":560
 *                              "06_SecondNextWord": words[6][0],
 *                              "07_MentionRootHead": words[7][0]}
 *         return (spans_embeddings_,             # <<<<<<<<<<<<<<
 *                 words_embeddings_,
 *                 numpy.concatenate([em[1] for em in spans], axis=0),
 */
  __pyx_t_13 = PyTuple_New(4); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_v_spans_embeddings_);
  __Pyx_GIVEREF(__pyx_v_spans_embeddings_);
  PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_spans_embeddings_);
  __Pyx_INCREF(__pyx_v_words_embeddings_);
  __Pyx_GIVEREF(__pyx_v_words_embeddings_);
  PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_v_words_embeddings_);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_13, 3, __pyx_t_10);
  __pyx_t_2 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_13;
  __pyx_t_13 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":527
 *         return word_list, (embed_vector/max(len(word_list), 1))
 * 
 *     def get_mention_embeddings(self, mention, doc_embedding):             # <<<<<<<<<<<<<<
 *         ''' Get span (averaged) and word (single) embeddings of a mention '''
 *         ms = mention.span
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("neuralcoref.document.EmbeddingExtractor.get_mention_embeddings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ms);
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XDECREF(__pyx_v_ms_lefts);
  __Pyx_XDECREF(__pyx_v_ms_rights);
  __Pyx_XDECREF(__pyx_v_head);
  __Pyx_XDECREF(__pyx_v_spans);
  __Pyx_XDECREF(__pyx_v_words);
  __Pyx_XDECREF(__pyx_v_spans_embeddings_);
  __Pyx_XDECREF(__pyx_v_words_embeddings_);
  __Pyx_XDECREF(__pyx_v_em);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":570
 *     Process utterances to extract mentions and pre-compute mentions features
 *     '''
 *     def __cinit__(self, nlp, utterances=None,             # <<<<<<<<<<<<<<
 *                  use_no_coref_list=False,
 *                  trained_embed_path=None, embedding_extractor=None,
 */

/* Python wrapper */
static int __pyx_pw_11neuralcoref_8document_8Document_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11neuralcoref_8document_8Document_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nlp = 0;
  PyObject *__pyx_v_utterances = 0;
  PyObject *__pyx_v_use_no_coref_list = 0;
  PyObject *__pyx_v_trained_embed_path = 0;
  PyObject *__pyx_v_embedding_extractor = 0;
  PyObject *__pyx_v_conll = 0;
  PyObject *__pyx_v_debug = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nlp,&__pyx_n_s_utterances,&__pyx_n_s_use_no_coref_list,&__pyx_n_s_trained_embed_path,&__pyx_n_s_embedding_extractor,&__pyx_n_s_conll,&__pyx_n_s_debug,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);

    /* "neuralcoref/document.pyx":571
 *     '''
 *     def __cinit__(self, nlp, utterances=None,
 *                  use_no_coref_list=False,             # <<<<<<<<<<<<<<
 *                  trained_embed_path=None, embedding_extractor=None,
 *                  conll=None, debug=False):
 */
    values[2] = ((PyObject *)Py_False);

    /* "neuralcoref/document.pyx":572
 *     def __cinit__(self, nlp, utterances=None,
 *                  use_no_coref_list=False,
 *                  trained_embed_path=None, embedding_extractor=None,             # <<<<<<<<<<<<<<
 *                  conll=None, debug=False):
 *         '''
 */
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);

    /* "neuralcoref/document.pyx":573
 *                  use_no_coref_list=False,
 *                  trained_embed_path=None, embedding_extractor=None,
 *                  conll=None, debug=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Arguments:
 */
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_utterances);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_use_no_coref_list);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trained_embed_path);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_embedding_extractor);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conll);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_debug);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 570, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nlp = values[0];
    __pyx_v_utterances = values[1];
    __pyx_v_use_no_coref_list = values[2];
    __pyx_v_trained_embed_path = values[3];
    __pyx_v_embedding_extractor = values[4];
    __pyx_v_conll = values[5];
    __pyx_v_debug = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 570, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document___cinit__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self), __pyx_v_nlp, __pyx_v_utterances, __pyx_v_use_no_coref_list, __pyx_v_trained_embed_path, __pyx_v_embedding_extractor, __pyx_v_conll, __pyx_v_debug);

  /* "neuralcoref/document.pyx":570
 *     Process utterances to extract mentions and pre-compute mentions features
 *     '''
 *     def __cinit__(self, nlp, utterances=None,             # <<<<<<<<<<<<<<
 *                  use_no_coref_list=False,
 *                  trained_embed_path=None, embedding_extractor=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11neuralcoref_8document_8Document___cinit__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_nlp, PyObject *__pyx_v_utterances, PyObject *__pyx_v_use_no_coref_list, PyObject *__pyx_v_trained_embed_path, PyObject *__pyx_v_embedding_extractor, PyObject *__pyx_v_conll, PyObject *__pyx_v_debug) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 570, 0, __PYX_ERR(0, 570, __pyx_L1_error));

  /* "neuralcoref/document.pyx":584
 *             debug (boolean): print debug informations
 *         '''
 *         self.nlp = nlp             # <<<<<<<<<<<<<<
 *         self.use_no_coref_list = use_no_coref_list
 *         self.debug = debug
 */
  __Pyx_INCREF(__pyx_v_nlp);
  __Pyx_GIVEREF(__pyx_v_nlp);
  __Pyx_GOTREF(__pyx_v_self->nlp);
  __Pyx_DECREF(__pyx_v_self->nlp);
  __pyx_v_self->nlp = __pyx_v_nlp;

  /* "neuralcoref/document.pyx":585
 *         '''
 *         self.nlp = nlp
 *         self.use_no_coref_list = use_no_coref_list             # <<<<<<<<<<<<<<
 *         self.debug = debug
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_use_no_coref_list); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L1_error)
  __pyx_v_self->use_no_coref_list = __pyx_t_1;

  /* "neuralcoref/document.pyx":586
 *         self.nlp = nlp
 *         self.use_no_coref_list = use_no_coref_list
 *         self.debug = debug             # <<<<<<<<<<<<<<
 * 
 *         self.utterances = []
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_debug); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L1_error)
  __pyx_v_self->debug = __pyx_t_1;

  /* "neuralcoref/document.pyx":588
 *         self.debug = debug
 * 
 *         self.utterances = []             # <<<<<<<<<<<<<<
 *         self.mentions = []
 *         self.n_sents = 0
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->utterances);
  __Pyx_DECREF(__pyx_v_self->utterances);
  __pyx_v_self->utterances = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":589
 * 
 *         self.utterances = []
 *         self.mentions = []             # <<<<<<<<<<<<<<
 *         self.n_sents = 0
 *         self.n_mentions = 0
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->mentions);
  __Pyx_DECREF(__pyx_v_self->mentions);
  __pyx_v_self->mentions = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":590
 *         self.utterances = []
 *         self.mentions = []
 *         self.n_sents = 0             # <<<<<<<<<<<<<<
 *         self.n_mentions = 0
 *         self.n_pairs = 0
 */
  __pyx_v_self->n_sents = 0;

  /* "neuralcoref/document.pyx":591
 *         self.mentions = []
 *         self.n_sents = 0
 *         self.n_mentions = 0             # <<<<<<<<<<<<<<
 *         self.n_pairs = 0
 *         self.pairs_ant = None
 */
  __pyx_v_self->n_mentions = 0;

  /* "neuralcoref/document.pyx":592
 *         self.n_sents = 0
 *         self.n_mentions = 0
 *         self.n_pairs = 0             # <<<<<<<<<<<<<<
 *         self.pairs_ant = None
 *         self.pairs_men = None
 */
  __pyx_v_self->n_pairs = 0;

  /* "neuralcoref/document.pyx":593
 *         self.n_mentions = 0
 *         self.n_pairs = 0
 *         self.pairs_ant = None             # <<<<<<<<<<<<<<
 *         self.pairs_men = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->pairs_ant);
  __Pyx_DECREF(__pyx_v_self->pairs_ant);
  __pyx_v_self->pairs_ant = Py_None;

  /* "neuralcoref/document.pyx":594
 *         self.n_pairs = 0
 *         self.pairs_ant = None
 *         self.pairs_men = None             # <<<<<<<<<<<<<<
 * 
 *         self.genre_, self.genre = self.set_genre(conll)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->pairs_men);
  __Pyx_DECREF(__pyx_v_self->pairs_men);
  __pyx_v_self->pairs_men = Py_None;

  /* "neuralcoref/document.pyx":596
 *         self.pairs_men = None
 * 
 *         self.genre_, self.genre = self.set_genre(conll)             # <<<<<<<<<<<<<<
 * 
 *         if trained_embed_path is not None and embedding_extractor is None:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_genre); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_conll); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_conll};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_conll};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 596, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_conll);
      __Pyx_GIVEREF(__pyx_v_conll);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_conll);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 596, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_5 = __pyx_t_6(__pyx_t_4); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_4), 2) < 0) __PYX_ERR(0, 596, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 596, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->genre_);
  __Pyx_DECREF(__pyx_v_self->genre_);
  __pyx_v_self->genre_ = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->genre);
  __Pyx_DECREF(__pyx_v_self->genre);
  __pyx_v_self->genre = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "neuralcoref/document.pyx":598
 *         self.genre_, self.genre = self.set_genre(conll)
 * 
 *         if trained_embed_path is not None and embedding_extractor is None:             # <<<<<<<<<<<<<<
 *             self.embed_extractor = EmbeddingExtractor(trained_embed_path)
 *         elif embedding_extractor is not None:
 */
  __pyx_t_7 = (__pyx_v_trained_embed_path != Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_1 = __pyx_t_8;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_8 = (__pyx_v_embedding_extractor == Py_None);
  __pyx_t_7 = (__pyx_t_8 != 0);
  __pyx_t_1 = __pyx_t_7;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "neuralcoref/document.pyx":599
 * 
 *         if trained_embed_path is not None and embedding_extractor is None:
 *             self.embed_extractor = EmbeddingExtractor(trained_embed_path)             # <<<<<<<<<<<<<<
 *         elif embedding_extractor is not None:
 *             self.embed_extractor = embedding_extractor
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_EmbeddingExtractor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 599, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_trained_embed_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_trained_embed_path};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_trained_embed_path};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 599, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_v_trained_embed_path);
        __Pyx_GIVEREF(__pyx_v_trained_embed_path);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_trained_embed_path);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->embed_extractor);
    __Pyx_DECREF(__pyx_v_self->embed_extractor);
    __pyx_v_self->embed_extractor = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "neuralcoref/document.pyx":598
 *         self.genre_, self.genre = self.set_genre(conll)
 * 
 *         if trained_embed_path is not None and embedding_extractor is None:             # <<<<<<<<<<<<<<
 *             self.embed_extractor = EmbeddingExtractor(trained_embed_path)
 *         elif embedding_extractor is not None:
 */
    goto __pyx_L5;
  }

  /* "neuralcoref/document.pyx":600
 *         if trained_embed_path is not None and embedding_extractor is None:
 *             self.embed_extractor = EmbeddingExtractor(trained_embed_path)
 *         elif embedding_extractor is not None:             # <<<<<<<<<<<<<<
 *             self.embed_extractor = embedding_extractor
 *         else:
 */
  __pyx_t_1 = (__pyx_v_embedding_extractor != Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "neuralcoref/document.pyx":601
 *             self.embed_extractor = EmbeddingExtractor(trained_embed_path)
 *         elif embedding_extractor is not None:
 *             self.embed_extractor = embedding_extractor             # <<<<<<<<<<<<<<
 *         else:
 *             self.embed_extractor = None
 */
    __Pyx_INCREF(__pyx_v_embedding_extractor);
    __Pyx_GIVEREF(__pyx_v_embedding_extractor);
    __Pyx_GOTREF(__pyx_v_self->embed_extractor);
    __Pyx_DECREF(__pyx_v_self->embed_extractor);
    __pyx_v_self->embed_extractor = __pyx_v_embedding_extractor;

    /* "neuralcoref/document.pyx":600
 *         if trained_embed_path is not None and embedding_extractor is None:
 *             self.embed_extractor = EmbeddingExtractor(trained_embed_path)
 *         elif embedding_extractor is not None:             # <<<<<<<<<<<<<<
 *             self.embed_extractor = embedding_extractor
 *         else:
 */
    goto __pyx_L5;
  }

  /* "neuralcoref/document.pyx":603
 *             self.embed_extractor = embedding_extractor
 *         else:
 *             self.embed_extractor = None             # <<<<<<<<<<<<<<
 * 
 *         if utterances:
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->embed_extractor);
    __Pyx_DECREF(__pyx_v_self->embed_extractor);
    __pyx_v_self->embed_extractor = Py_None;
  }
  __pyx_L5:;

  /* "neuralcoref/document.pyx":605
 *             self.embed_extractor = None
 * 
 *         if utterances:             # <<<<<<<<<<<<<<
 *             self.add_utterances(utterances)
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_utterances); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 605, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "neuralcoref/document.pyx":606
 * 
 *         if utterances:
 *             self.add_utterances(utterances)             # <<<<<<<<<<<<<<
 * 
 *     def set_genre(self, conll):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_utterances); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_utterances); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_utterances};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_utterances};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_utterances);
        __Pyx_GIVEREF(__pyx_v_utterances);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_utterances);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "neuralcoref/document.pyx":605
 *             self.embed_extractor = None
 * 
 *         if utterances:             # <<<<<<<<<<<<<<
 *             self.add_utterances(utterances)
 * 
 */
  }

  /* "neuralcoref/document.pyx":570
 *     Process utterances to extract mentions and pre-compute mentions features
 *     '''
 *     def __cinit__(self, nlp, utterances=None,             # <<<<<<<<<<<<<<
 *                  use_no_coref_list=False,
 *                  trained_embed_path=None, embedding_extractor=None,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("neuralcoref.document.Document.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":608
 *             self.add_utterances(utterances)
 * 
 *     def set_genre(self, conll):             # <<<<<<<<<<<<<<
 *         if conll is not None:
 *             genre = numpy.zeros((7,), dtype='float32')
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_3set_genre(PyObject *__pyx_v_self, PyObject *__pyx_v_conll); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_3set_genre(PyObject *__pyx_v_self, PyObject *__pyx_v_conll) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_genre (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_2set_genre(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self), ((PyObject *)__pyx_v_conll));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_2set_genre(CYTHON_UNUSED struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_conll) {
  PyObject *__pyx_v_genre = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("set_genre", 0);
  __Pyx_TraceCall("set_genre", __pyx_f[0], 608, 0, __PYX_ERR(0, 608, __pyx_L1_error));

  /* "neuralcoref/document.pyx":609
 * 
 *     def set_genre(self, conll):
 *         if conll is not None:             # <<<<<<<<<<<<<<
 *             genre = numpy.zeros((7,), dtype='float32')
 *             genre[conll] = 1
 */
  __pyx_t_1 = (__pyx_v_conll != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "neuralcoref/document.pyx":610
 *     def set_genre(self, conll):
 *         if conll is not None:
 *             genre = numpy.zeros((7,), dtype='float32')             # <<<<<<<<<<<<<<
 *             genre[conll] = 1
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__51, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_genre = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "neuralcoref/document.pyx":611
 *         if conll is not None:
 *             genre = numpy.zeros((7,), dtype='float32')
 *             genre[conll] = 1             # <<<<<<<<<<<<<<
 *         else:
 *             genre = numpy.array(0, ndmin=1, copy=False)
 */
    if (unlikely(PyObject_SetItem(__pyx_v_genre, __pyx_v_conll, __pyx_int_1) < 0)) __PYX_ERR(0, 611, __pyx_L1_error)

    /* "neuralcoref/document.pyx":609
 * 
 *     def set_genre(self, conll):
 *         if conll is not None:             # <<<<<<<<<<<<<<
 *             genre = numpy.zeros((7,), dtype='float32')
 *             genre[conll] = 1
 */
    goto __pyx_L3;
  }

  /* "neuralcoref/document.pyx":613
 *             genre[conll] = 1
 *         else:
 *             genre = numpy.array(0, ndmin=1, copy=False)             # <<<<<<<<<<<<<<
 *         return conll, genre
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_ndmin, __pyx_int_1) < 0) __PYX_ERR(0, 613, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 613, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__52, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_genre = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "neuralcoref/document.pyx":614
 *         else:
 *             genre = numpy.array(0, ndmin=1, copy=False)
 *         return conll, genre             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_conll);
  __Pyx_GIVEREF(__pyx_v_conll);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_conll);
  __Pyx_INCREF(__pyx_v_genre);
  __Pyx_GIVEREF(__pyx_v_genre);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_genre);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":608
 *             self.add_utterances(utterances)
 * 
 *     def set_genre(self, conll):             # <<<<<<<<<<<<<<
 *         if conll is not None:
 *             genre = numpy.zeros((7,), dtype='float32')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("neuralcoref.document.Document.set_genre", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_genre);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":616
 *         return conll, genre
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return '<utterances> \n {}\n<mentions> \n {}' \
 *                 .format('\n '.join(unicode_(i) for i in self.utterances),
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_5__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_5__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_4__str__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_8Document_7__str___2generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":618
 *     def __str__(self):
 *         return '<utterances> \n {}\n<mentions> \n {}' \
 *                 .format('\n '.join(unicode_(i) for i in self.utterances),             # <<<<<<<<<<<<<<
 *                         '\n '.join(unicode_(i) for i in self.mentions))
 * 
 */

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_7__str___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_21_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_21_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 618, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_8Document_7__str___2generator16, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_str___locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.__str__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_8Document_7__str___2generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 618, 0, __PYX_ERR(0, 618, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 618, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 618, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->utterances)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->utterances)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->utterances; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->utterances); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 618, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 618, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 618, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 618, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_i};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_i};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_i);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_8Document_7__str___5generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":619
 *         return '<utterances> \n {}\n<mentions> \n {}' \
 *                 .format('\n '.join(unicode_(i) for i in self.utterances),
 *                         '\n '.join(unicode_(i) for i in self.mentions))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_7__str___3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_22_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_22_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 619, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_8Document_7__str___5generator17, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_str___locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.__str__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_8Document_7__str___5generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 619, 0, __PYX_ERR(0, 619, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 619, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 619, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->mentions)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->mentions)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->mentions; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->mentions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 619, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 619, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 619, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 619, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_i};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_i};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 619, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_i);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":616
 *         return conll, genre
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return '<utterances> \n {}\n<mentions> \n {}' \
 *                 .format('\n '.join(unicode_(i) for i in self.utterances),
 */

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_4__str__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_20___str__(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_20___str__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 616, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("__str__", __pyx_f[0], 616, 0, __PYX_ERR(0, 616, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "neuralcoref/document.pyx":617
 * 
 *     def __str__(self):
 *         return '<utterances> \n {}\n<mentions> \n {}' \             # <<<<<<<<<<<<<<
 *                 .format('\n '.join(unicode_(i) for i in self.utterances),
 *                         '\n '.join(unicode_(i) for i in self.mentions))
 */
  __Pyx_XDECREF(__pyx_r);

  /* "neuralcoref/document.pyx":618
 *     def __str__(self):
 *         return '<utterances> \n {}\n<mentions> \n {}' \
 *                 .format('\n '.join(unicode_(i) for i in self.utterances),             # <<<<<<<<<<<<<<
 *                         '\n '.join(unicode_(i) for i in self.mentions))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_utterances_mentions, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_pf_11neuralcoref_8document_8Document_7__str___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyUnicode_Join(__pyx_kp_u__53, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":619
 *         return '<utterances> \n {}\n<mentions> \n {}' \
 *                 .format('\n '.join(unicode_(i) for i in self.utterances),
 *                         '\n '.join(unicode_(i) for i in self.mentions))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __pyx_t_4 = __pyx_pf_11neuralcoref_8document_8Document_7__str___3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyUnicode_Join(__pyx_kp_u__53, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":616
 *         return conll, genre
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return '<utterances> \n {}\n<mentions> \n {}' \
 *                 .format('\n '.join(unicode_(i) for i in self.utterances),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("neuralcoref.document.Document.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":621
 *                         '\n '.join(unicode_(i) for i in self.mentions))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         ''' Return the number of mentions (not utterances) since it is what we really care about '''
 *         return len(self.mentions)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_11neuralcoref_8document_8Document_7__len__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_11neuralcoref_8document_8Document_6__len__[] = " Return the number of mentions (not utterances) since it is what we really care about ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_11neuralcoref_8document_8Document_6__len__;
#endif
static Py_ssize_t __pyx_pw_11neuralcoref_8document_8Document_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_6__len__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_11neuralcoref_8document_8Document_6__len__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  __Pyx_RefNannySetupContext("__len__", 0);
  __Pyx_TraceCall("__len__", __pyx_f[0], 621, 0, __PYX_ERR(0, 621, __pyx_L1_error));

  /* "neuralcoref/document.pyx":623
 *     def __len__(self):
 *         ''' Return the number of mentions (not utterances) since it is what we really care about '''
 *         return len(self.mentions)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
  __pyx_t_1 = __pyx_v_self->mentions;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":621
 *                         '\n '.join(unicode_(i) for i in self.mentions))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         ''' Return the number of mentions (not utterances) since it is what we really care about '''
 *         return len(self.mentions)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Document.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":625
 *         return len(self.mentions)
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         ''' Return a specific mention (not utterance) '''
 *         return self.mentions[key]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_11neuralcoref_8document_8Document_8__getitem__[] = " Return a specific mention (not utterance) ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_11neuralcoref_8document_8Document_8__getitem__;
#endif
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_8__getitem__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_8__getitem__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 625, 0, __PYX_ERR(0, 625, __pyx_L1_error));

  /* "neuralcoref/document.pyx":627
 *     def __getitem__(self, key):
 *         ''' Return a specific mention (not utterance) '''
 *         return self.mentions[key]             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_self->mentions, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":625
 *         return len(self.mentions)
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         ''' Return a specific mention (not utterance) '''
 *         return self.mentions[key]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Document.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_8Document_12generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":629
 *         return self.mentions[key]
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         ''' Iterate over mentions (not utterances) '''
 *         for mention in self.mentions:
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_11__iter__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_11neuralcoref_8document_8Document_10__iter__[] = " Iterate over mentions (not utterances) ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_11neuralcoref_8document_8Document_10__iter__;
#endif
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_11__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_10__iter__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_10__iter__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_23___iter__(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_23___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 629, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_8Document_12generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_Document___iter, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_8Document_12generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __Pyx_TraceCall("__iter__", __pyx_f[0], 629, 0, __PYX_ERR(0, 629, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "neuralcoref/document.pyx":631
 *     def __iter__(self):
 *         ''' Iterate over mentions (not utterances) '''
 *         for mention in self.mentions:             # <<<<<<<<<<<<<<
 *             yield mention
 * 
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_self->mentions)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_self->mentions)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->mentions; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_self->mentions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 631, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 631, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 631, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 631, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 631, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 631, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_mention);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_mention, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "neuralcoref/document.pyx":632
 *         ''' Iterate over mentions (not utterances) '''
 *         for mention in self.mentions:
 *             yield mention             # <<<<<<<<<<<<<<
 * 
 *     #######################################
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_mention);
    __pyx_r = __pyx_cur_scope->__pyx_v_mention;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 632, __pyx_L1_error)

    /* "neuralcoref/document.pyx":631
 *     def __iter__(self):
 *         ''' Iterate over mentions (not utterances) '''
 *         for mention in self.mentions:             # <<<<<<<<<<<<<<
 *             yield mention
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "neuralcoref/document.pyx":629
 *         return self.mentions[key]
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         ''' Iterate over mentions (not utterances) '''
 *         for mention in self.mentions:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":638
 *     #######################################
 * 
 *     def set_utterances(self, utterances):             # <<<<<<<<<<<<<<
 *         self.utterances = []
 *         self.mentions = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_14set_utterances(PyObject *__pyx_v_self, PyObject *__pyx_v_utterances); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_14set_utterances(PyObject *__pyx_v_self, PyObject *__pyx_v_utterances) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_utterances (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_13set_utterances(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self), ((PyObject *)__pyx_v_utterances));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_13set_utterances(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_utterances) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("set_utterances", 0);
  __Pyx_TraceCall("set_utterances", __pyx_f[0], 638, 0, __PYX_ERR(0, 638, __pyx_L1_error));

  /* "neuralcoref/document.pyx":639
 * 
 *     def set_utterances(self, utterances):
 *         self.utterances = []             # <<<<<<<<<<<<<<
 *         self.mentions = []
 *         self.n_sents = 0
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->utterances);
  __Pyx_DECREF(__pyx_v_self->utterances);
  __pyx_v_self->utterances = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":640
 *     def set_utterances(self, utterances):
 *         self.utterances = []
 *         self.mentions = []             # <<<<<<<<<<<<<<
 *         self.n_sents = 0
 *         self.n_mentions = 0
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->mentions);
  __Pyx_DECREF(__pyx_v_self->mentions);
  __pyx_v_self->mentions = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":641
 *         self.utterances = []
 *         self.mentions = []
 *         self.n_sents = 0             # <<<<<<<<<<<<<<
 *         self.n_mentions = 0
 *         if utterances:
 */
  __pyx_v_self->n_sents = 0;

  /* "neuralcoref/document.pyx":642
 *         self.mentions = []
 *         self.n_sents = 0
 *         self.n_mentions = 0             # <<<<<<<<<<<<<<
 *         if utterances:
 *             self.add_utterances(utterances)
 */
  __pyx_v_self->n_mentions = 0;

  /* "neuralcoref/document.pyx":643
 *         self.n_sents = 0
 *         self.n_mentions = 0
 *         if utterances:             # <<<<<<<<<<<<<<
 *             self.add_utterances(utterances)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_utterances); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 643, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "neuralcoref/document.pyx":644
 *         self.n_mentions = 0
 *         if utterances:
 *             self.add_utterances(utterances)             # <<<<<<<<<<<<<<
 * 
 *     def add_utterances(self, utterances):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_utterances); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_utterances); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_utterances};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_utterances};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 644, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_utterances);
        __Pyx_GIVEREF(__pyx_v_utterances);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_utterances);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":643
 *         self.n_sents = 0
 *         self.n_mentions = 0
 *         if utterances:             # <<<<<<<<<<<<<<
 *             self.add_utterances(utterances)
 * 
 */
  }

  /* "neuralcoref/document.pyx":638
 *     #######################################
 * 
 *     def set_utterances(self, utterances):             # <<<<<<<<<<<<<<
 *         self.utterances = []
 *         self.mentions = []
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("neuralcoref.document.Document.set_utterances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":646
 *             self.add_utterances(utterances)
 * 
 *     def add_utterances(self, utterances):             # <<<<<<<<<<<<<<
 *         '''
 *         Add utterances to the utterance list and build mention list for these utterances
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_16add_utterances(PyObject *__pyx_v_self, PyObject *__pyx_v_utterances); /*proto*/
static char __pyx_doc_11neuralcoref_8document_8Document_15add_utterances[] = "\n        Add utterances to the utterance list and build mention list for these utterances\n\n        Arg:\n            utterances : iterator or list of string corresponding to successive utterances\n        Return:\n            List of indexes of added utterances in the docs\n        ";
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_16add_utterances(PyObject *__pyx_v_self, PyObject *__pyx_v_utterances) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_utterances (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_15add_utterances(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self), ((PyObject *)__pyx_v_utterances));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_15add_utterances(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_utterances) {
  PyObject *__pyx_v_utterances_index = NULL;
  Py_ssize_t __pyx_v_utt_start;
  PyObject *__pyx_v_docs = NULL;
  PyObject *__pyx_v_utt_index = NULL;
  PyObject *__pyx_v_doc = NULL;
  PyObject *__pyx_v_m_span = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  struct __pyx_opt_args_11neuralcoref_8document_extract_mentions_spans __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  __Pyx_RefNannySetupContext("add_utterances", 0);
  __Pyx_TraceCall("add_utterances", __pyx_f[0], 646, 0, __PYX_ERR(0, 646, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_utterances);

  /* "neuralcoref/document.pyx":655
 *             List of indexes of added utterances in the docs
 *         '''
 *         if self.debug: print("Adding utterances", utterances)             # <<<<<<<<<<<<<<
 *         if isinstance(utterances, string_types):
 *             utterances = [utterances]
 */
  __pyx_t_1 = (__pyx_v_self->debug != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_u_Adding_utterances);
    __Pyx_GIVEREF(__pyx_kp_u_Adding_utterances);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Adding_utterances);
    __Pyx_INCREF(__pyx_v_utterances);
    __Pyx_GIVEREF(__pyx_v_utterances);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_utterances);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "neuralcoref/document.pyx":656
 *         '''
 *         if self.debug: print("Adding utterances", utterances)
 *         if isinstance(utterances, string_types):             # <<<<<<<<<<<<<<
 *             utterances = [utterances]
 *         utterances_index = []
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_string_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_utterances, __pyx_t_3); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {

    /* "neuralcoref/document.pyx":657
 *         if self.debug: print("Adding utterances", utterances)
 *         if isinstance(utterances, string_types):
 *             utterances = [utterances]             # <<<<<<<<<<<<<<
 *         utterances_index = []
 *         utt_start = len(self.utterances)
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_utterances);
    __Pyx_GIVEREF(__pyx_v_utterances);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_utterances);
    __Pyx_DECREF_SET(__pyx_v_utterances, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":656
 *         '''
 *         if self.debug: print("Adding utterances", utterances)
 *         if isinstance(utterances, string_types):             # <<<<<<<<<<<<<<
 *             utterances = [utterances]
 *         utterances_index = []
 */
  }

  /* "neuralcoref/document.pyx":658
 *         if isinstance(utterances, string_types):
 *             utterances = [utterances]
 *         utterances_index = []             # <<<<<<<<<<<<<<
 *         utt_start = len(self.utterances)
 *         docs = self.nlp.pipe(utterances)
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_utterances_index = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":659
 *             utterances = [utterances]
 *         utterances_index = []
 *         utt_start = len(self.utterances)             # <<<<<<<<<<<<<<
 *         docs = self.nlp.pipe(utterances)
 *         for utt_index, doc in enumerate(docs):
 */
  __pyx_t_3 = __pyx_v_self->utterances;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_5 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_utt_start = __pyx_t_5;

  /* "neuralcoref/document.pyx":660
 *         utterances_index = []
 *         utt_start = len(self.utterances)
 *         docs = self.nlp.pipe(utterances)             # <<<<<<<<<<<<<<
 *         for utt_index, doc in enumerate(docs):
 *             m_span = extract_mentions_spans(doc, use_no_coref_list=self.use_no_coref_list)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->nlp, __pyx_n_s_pipe); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_utterances); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_utterances};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_utterances};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_utterances);
      __Pyx_GIVEREF(__pyx_v_utterances);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_utterances);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_docs = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":661
 *         utt_start = len(self.utterances)
 *         docs = self.nlp.pipe(utterances)
 *         for utt_index, doc in enumerate(docs):             # <<<<<<<<<<<<<<
 *             m_span = extract_mentions_spans(doc, use_no_coref_list=self.use_no_coref_list)
 *             self._process_mentions(m_span, utt_start + utt_index, self.n_sents)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_docs)) || PyTuple_CheckExact(__pyx_v_docs)) {
    __pyx_t_2 = __pyx_v_docs; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_docs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 661, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 661, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 661, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_8(__pyx_t_2);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 661, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_doc, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_utt_index, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "neuralcoref/document.pyx":662
 *         docs = self.nlp.pipe(utterances)
 *         for utt_index, doc in enumerate(docs):
 *             m_span = extract_mentions_spans(doc, use_no_coref_list=self.use_no_coref_list)             # <<<<<<<<<<<<<<
 *             self._process_mentions(m_span, utt_start + utt_index, self.n_sents)
 *             utterances_index.append(utt_start + utt_index)
 */
    if (!(likely(((__pyx_v_doc) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_doc, __pyx_ptype_5spacy_6tokens_3doc_Doc))))) __PYX_ERR(0, 662, __pyx_L1_error)
    __pyx_t_9.__pyx_n = 1;
    __pyx_t_9.use_no_coref_list = __pyx_v_self->use_no_coref_list;
    __pyx_t_7 = __pyx_f_11neuralcoref_8document_extract_mentions_spans(((struct __pyx_obj_5spacy_6tokens_3doc_Doc *)__pyx_v_doc), &__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_m_span, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "neuralcoref/document.pyx":663
 *         for utt_index, doc in enumerate(docs):
 *             m_span = extract_mentions_spans(doc, use_no_coref_list=self.use_no_coref_list)
 *             self._process_mentions(m_span, utt_start + utt_index, self.n_sents)             # <<<<<<<<<<<<<<
 *             utterances_index.append(utt_start + utt_index)
 *             self.utterances.append(doc)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_process_mentions); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = PyInt_FromSsize_t(__pyx_v_utt_start); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = PyNumber_Add(__pyx_t_10, __pyx_v_utt_index); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->n_sents); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = NULL;
    __pyx_t_13 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_13 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_v_m_span, __pyx_t_11, __pyx_t_10};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 663, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_v_m_span, __pyx_t_11, __pyx_t_10};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 663, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(3+__pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 663, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_12) {
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_12); __pyx_t_12 = NULL;
      }
      __Pyx_INCREF(__pyx_v_m_span);
      __Pyx_GIVEREF(__pyx_v_m_span);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_13, __pyx_v_m_span);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_13, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_13, __pyx_t_10);
      __pyx_t_11 = 0;
      __pyx_t_10 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_14, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 663, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "neuralcoref/document.pyx":664
 *             m_span = extract_mentions_spans(doc, use_no_coref_list=self.use_no_coref_list)
 *             self._process_mentions(m_span, utt_start + utt_index, self.n_sents)
 *             utterances_index.append(utt_start + utt_index)             # <<<<<<<<<<<<<<
 *             self.utterances.append(doc)
 *             self.n_sents += len(list(doc.sents))
 */
    __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_utt_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_v_utt_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_utterances_index, __pyx_t_6); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "neuralcoref/document.pyx":665
 *             self._process_mentions(m_span, utt_start + utt_index, self.n_sents)
 *             utterances_index.append(utt_start + utt_index)
 *             self.utterances.append(doc)             # <<<<<<<<<<<<<<
 *             self.n_sents += len(list(doc.sents))
 * 
 */
    __pyx_t_15 = __Pyx_PyObject_Append(__pyx_v_self->utterances, __pyx_v_doc); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 665, __pyx_L1_error)

    /* "neuralcoref/document.pyx":666
 *             utterances_index.append(utt_start + utt_index)
 *             self.utterances.append(doc)
 *             self.n_sents += len(list(doc.sents))             # <<<<<<<<<<<<<<
 * 
 *         self.set_mentions_features()
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_doc, __pyx_n_s_sents); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PySequence_List(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_16 = PyList_GET_SIZE(__pyx_t_7); if (unlikely(__pyx_t_16 == ((Py_ssize_t)-1))) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_self->n_sents = (__pyx_v_self->n_sents + __pyx_t_16);

    /* "neuralcoref/document.pyx":661
 *         utt_start = len(self.utterances)
 *         docs = self.nlp.pipe(utterances)
 *         for utt_index, doc in enumerate(docs):             # <<<<<<<<<<<<<<
 *             m_span = extract_mentions_spans(doc, use_no_coref_list=self.use_no_coref_list)
 *             self._process_mentions(m_span, utt_start + utt_index, self.n_sents)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":668
 *             self.n_sents += len(list(doc.sents))
 * 
 *         self.set_mentions_features()             # <<<<<<<<<<<<<<
 *         self.set_candidate_pairs()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_mentions_features); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 668, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":669
 * 
 *         self.set_mentions_features()
 *         self.set_candidate_pairs()             # <<<<<<<<<<<<<<
 * 
 *     ###################################
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_candidate_pairs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 669, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":646
 *             self.add_utterances(utterances)
 * 
 *     def add_utterances(self, utterances):             # <<<<<<<<<<<<<<
 *         '''
 *         Add utterances to the utterance list and build mention list for these utterances
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("neuralcoref.document.Document.add_utterances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_utterances_index);
  __Pyx_XDECREF(__pyx_v_docs);
  __Pyx_XDECREF(__pyx_v_utt_index);
  __Pyx_XDECREF(__pyx_v_doc);
  __Pyx_XDECREF(__pyx_v_m_span);
  __Pyx_XDECREF(__pyx_v_utterances);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":675
 *     ###################################
 * 
 *     def _process_mentions(self, mentions_spans, utterance_index, n_sents):             # <<<<<<<<<<<<<<
 *         '''
 *         Process mentions in a spacy doc (an utterance)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_18_process_mentions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11neuralcoref_8document_8Document_17_process_mentions[] = "\n        Process mentions in a spacy doc (an utterance)\n        ";
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_18_process_mentions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mentions_spans = 0;
  PyObject *__pyx_v_utterance_index = 0;
  PyObject *__pyx_v_n_sents = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_process_mentions (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mentions_spans,&__pyx_n_s_utterance_index,&__pyx_n_s_n_sents,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mentions_spans)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_utterance_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_process_mentions", 1, 3, 3, 1); __PYX_ERR(0, 675, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_sents)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_process_mentions", 1, 3, 3, 2); __PYX_ERR(0, 675, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_process_mentions") < 0)) __PYX_ERR(0, 675, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_mentions_spans = values[0];
    __pyx_v_utterance_index = values[1];
    __pyx_v_n_sents = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_process_mentions", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 675, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document._process_mentions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_17_process_mentions(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self), __pyx_v_mentions_spans, __pyx_v_utterance_index, __pyx_v_n_sents);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_8Document_17_process_mentions_2generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":679
 *         Process mentions in a spacy doc (an utterance)
 *         '''
 *         processed_spans = sorted((m for m in mentions_spans), key=lambda m: (m.root.i, m.start))             # <<<<<<<<<<<<<<
 *         for mention_index, span in enumerate(processed_spans):
 *             self.mentions.append(Mention(span, mention_index + self.n_mentions,
 */

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_17_process_mentions_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_25_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_25_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 679, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_8Document_17_process_mentions_2generator18, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process_mentions_locals_genexpr, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document._process_mentions.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_8Document_17_process_mentions_2generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 679, 0, __PYX_ERR(0, 679, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 679, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mentions_spans)) { __Pyx_RaiseClosureNameError("mentions_spans"); __PYX_ERR(0, 679, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mentions_spans)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mentions_spans)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_mentions_spans; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mentions_spans); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 679, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_m);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_m, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_m);
    __pyx_r = __pyx_cur_scope->__pyx_v_m;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 679, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_17_process_mentions_3lambda18(PyObject *__pyx_self, PyObject *__pyx_v_m); /*proto*/
static PyMethodDef __pyx_mdef_11neuralcoref_8document_8Document_17_process_mentions_3lambda18 = {"lambda18", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_17_process_mentions_3lambda18, METH_O, 0};
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_17_process_mentions_3lambda18(PyObject *__pyx_self, PyObject *__pyx_v_m) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda18 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda18(__pyx_self, ((PyObject *)__pyx_v_m));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda18(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("lambda18", 0);
  __Pyx_TraceCall("lambda18", __pyx_f[0], 679, 0, __PYX_ERR(0, 679, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("neuralcoref.document.Document._process_mentions.lambda18", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":675
 *     ###################################
 * 
 *     def _process_mentions(self, mentions_spans, utterance_index, n_sents):             # <<<<<<<<<<<<<<
 *         '''
 *         Process mentions in a spacy doc (an utterance)
 */

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_17_process_mentions(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_mentions_spans, PyObject *__pyx_v_utterance_index, PyObject *__pyx_v_n_sents) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *__pyx_cur_scope;
  PyObject *__pyx_v_processed_spans = NULL;
  PyObject *__pyx_v_mention_index = NULL;
  PyObject *__pyx_v_span = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("_process_mentions", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_24__process_mentions(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_24__process_mentions, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 675, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("_process_mentions", __pyx_f[0], 675, 0, __PYX_ERR(0, 675, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_mentions_spans = __pyx_v_mentions_spans;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_mentions_spans);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_mentions_spans);

  /* "neuralcoref/document.pyx":679
 *         Process mentions in a spacy doc (an utterance)
 *         '''
 *         processed_spans = sorted((m for m in mentions_spans), key=lambda m: (m.root.i, m.start))             # <<<<<<<<<<<<<<
 *         for mention_index, span in enumerate(processed_spans):
 *             self.mentions.append(Mention(span, mention_index + self.n_mentions,
 */
  __pyx_t_1 = __pyx_pf_11neuralcoref_8document_8Document_17_process_mentions_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11neuralcoref_8document_8Document_17_process_mentions_3lambda18, 0, __pyx_n_s_process_mentions_locals_lambda, NULL, __pyx_n_s_neuralcoref_document, __pyx_d, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_key, __pyx_t_3) < 0) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_processed_spans = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":680
 *         '''
 *         processed_spans = sorted((m for m in mentions_spans), key=lambda m: (m.root.i, m.start))
 *         for mention_index, span in enumerate(processed_spans):             # <<<<<<<<<<<<<<
 *             self.mentions.append(Mention(span, mention_index + self.n_mentions,
 *                                              utterance_index, n_sents))
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_processed_spans)) || PyTuple_CheckExact(__pyx_v_processed_spans)) {
    __pyx_t_1 = __pyx_v_processed_spans; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_processed_spans); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 680, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 680, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 680, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 680, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 680, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 680, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_span, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_mention_index, __pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "neuralcoref/document.pyx":681
 *         processed_spans = sorted((m for m in mentions_spans), key=lambda m: (m.root.i, m.start))
 *         for mention_index, span in enumerate(processed_spans):
 *             self.mentions.append(Mention(span, mention_index + self.n_mentions,             # <<<<<<<<<<<<<<
 *                                              utterance_index, n_sents))
 *             self.n_mentions += 1
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->n_mentions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyNumber_Add(__pyx_v_mention_index, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "neuralcoref/document.pyx":682
 *         for mention_index, span in enumerate(processed_spans):
 *             self.mentions.append(Mention(span, mention_index + self.n_mentions,
 *                                              utterance_index, n_sents))             # <<<<<<<<<<<<<<
 *             self.n_mentions += 1
 * 
 */
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_span);
    __Pyx_GIVEREF(__pyx_v_span);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_span);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
    __Pyx_INCREF(__pyx_v_utterance_index);
    __Pyx_GIVEREF(__pyx_v_utterance_index);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_utterance_index);
    __Pyx_INCREF(__pyx_v_n_sents);
    __Pyx_GIVEREF(__pyx_v_n_sents);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_n_sents);
    __pyx_t_6 = 0;

    /* "neuralcoref/document.pyx":681
 *         processed_spans = sorted((m for m in mentions_spans), key=lambda m: (m.root.i, m.start))
 *         for mention_index, span in enumerate(processed_spans):
 *             self.mentions.append(Mention(span, mention_index + self.n_mentions,             # <<<<<<<<<<<<<<
 *                                              utterance_index, n_sents))
 *             self.n_mentions += 1
 */
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_11neuralcoref_8document_Mention), __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_Append(__pyx_v_self->mentions, __pyx_t_6); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "neuralcoref/document.pyx":683
 *             self.mentions.append(Mention(span, mention_index + self.n_mentions,
 *                                              utterance_index, n_sents))
 *             self.n_mentions += 1             # <<<<<<<<<<<<<<
 * 
 *     def set_mentions_features(self):
 */
    __pyx_v_self->n_mentions = (__pyx_v_self->n_mentions + 1);

    /* "neuralcoref/document.pyx":680
 *         '''
 *         processed_spans = sorted((m for m in mentions_spans), key=lambda m: (m.root.i, m.start))
 *         for mention_index, span in enumerate(processed_spans):             # <<<<<<<<<<<<<<
 *             self.mentions.append(Mention(span, mention_index + self.n_mentions,
 *                                              utterance_index, n_sents))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":675
 *     ###################################
 * 
 *     def _process_mentions(self, mentions_spans, utterance_index, n_sents):             # <<<<<<<<<<<<<<
 *         '''
 *         Process mentions in a spacy doc (an utterance)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuralcoref.document.Document._process_mentions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_processed_spans);
  __Pyx_XDECREF(__pyx_v_mention_index);
  __Pyx_XDECREF(__pyx_v_span);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":685
 *             self.n_mentions += 1
 * 
 *     def set_mentions_features(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Compute features for the extracted mentions
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_20set_mentions_features(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11neuralcoref_8document_8Document_19set_mentions_features[] = "\n        Compute features for the extracted mentions\n        ";
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_20set_mentions_features(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mentions_features (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_19set_mentions_features(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_11neuralcoref_8document_8Document_21set_mentions_features_2generator19(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuralcoref/document.pyx":697
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention
 *                                                           and m.utterances_sent == mention.utterances_sent             # <<<<<<<<<<<<<<
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)
 */

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_21set_mentions_features_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_27_genexpr(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_27_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 697, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_11neuralcoref_8document_8Document_21set_mentions_features_2generator19, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_set_mentions_features_locals_gen, __pyx_n_s_neuralcoref_document); if (unlikely(!gen)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.set_mentions_features.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_11neuralcoref_8document_8Document_21set_mentions_features_2generator19(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr *__pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 697, 0, __PYX_ERR(0, 697, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 697, __pyx_L1_error)

  /* "neuralcoref/document.pyx":700
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)
 *                                                          for m in self.mentions) else 0}             # <<<<<<<<<<<<<<
 *             features = numpy.concatenate([one_hot_type,
 *                                        encode_distance(features_["02_MentionLength"]),
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 700, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->mentions)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->mentions)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->mentions; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->mentions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 700, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 700, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 700, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 700, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 700, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 700, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_m);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_m, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "neuralcoref/document.pyx":696
 *                          "02_MentionLength": len(mention)-1,
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention             # <<<<<<<<<<<<<<
 *                                                           and m.utterances_sent == mention.utterances_sent
 *                                                           and m.span.start <= mention.span.start
 */
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mention)) { __Pyx_RaiseClosureNameError("mention"); __PYX_ERR(0, 696, __pyx_L1_error) }
    __pyx_t_6 = (__pyx_cur_scope->__pyx_v_m != __pyx_cur_scope->__pyx_outer_scope->__pyx_v_mention);
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }

    /* "neuralcoref/document.pyx":697
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention
 *                                                           and m.utterances_sent == mention.utterances_sent             # <<<<<<<<<<<<<<
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_m, __pyx_n_s_utterances_sent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mention)) { __Pyx_RaiseClosureNameError("mention"); __PYX_ERR(0, 697, __pyx_L1_error) }
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mention, __pyx_n_s_utterances_sent); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_4, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }

    /* "neuralcoref/document.pyx":698
 *                          "04_IsMentionNested": 1 if any((m is not mention
 *                                                           and m.utterances_sent == mention.utterances_sent
 *                                                           and m.span.start <= mention.span.start             # <<<<<<<<<<<<<<
 *                                                           and mention.span.end <= m.span.end)
 *                                                          for m in self.mentions) else 0}
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_m, __pyx_n_s_span); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_start); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mention)) { __Pyx_RaiseClosureNameError("mention"); __PYX_ERR(0, 698, __pyx_L1_error) }
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mention, __pyx_n_s_span); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_start); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_8, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }

    /* "neuralcoref/document.pyx":699
 *                                                           and m.utterances_sent == mention.utterances_sent
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)             # <<<<<<<<<<<<<<
 *                                                          for m in self.mentions) else 0}
 *             features = numpy.concatenate([one_hot_type,
 */
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mention)) { __Pyx_RaiseClosureNameError("mention"); __PYX_ERR(0, 699, __pyx_L1_error) }
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mention, __pyx_n_s_span); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_end); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_m, __pyx_n_s_span); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_end); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_4, __pyx_t_8, Py_LE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "neuralcoref/document.pyx":697
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention
 *                                                           and m.utterances_sent == mention.utterances_sent             # <<<<<<<<<<<<<<
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)
 */
    if (__pyx_t_5) {

      /* "neuralcoref/document.pyx":696
 *                          "02_MentionLength": len(mention)-1,
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention             # <<<<<<<<<<<<<<
 *                                                           and m.utterances_sent == mention.utterances_sent
 *                                                           and m.span.start <= mention.span.start
 */
      __Pyx_XDECREF(__pyx_r);

      /* "neuralcoref/document.pyx":697
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention
 *                                                           and m.utterances_sent == mention.utterances_sent             # <<<<<<<<<<<<<<
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)
 */
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }

    /* "neuralcoref/document.pyx":700
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)
 *                                                          for m in self.mentions) else 0}             # <<<<<<<<<<<<<<
 *             features = numpy.concatenate([one_hot_type,
 *                                        encode_distance(features_["02_MentionLength"]),
 */
  }
  /*else*/ {

    /* "neuralcoref/document.pyx":696
 *                          "02_MentionLength": len(mention)-1,
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention             # <<<<<<<<<<<<<<
 *                                                           and m.utterances_sent == mention.utterances_sent
 *                                                           and m.span.start <= mention.span.start
 */
    __Pyx_XDECREF(__pyx_r);

    /* "neuralcoref/document.pyx":697
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention
 *                                                           and m.utterances_sent == mention.utterances_sent             # <<<<<<<<<<<<<<
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)
 */
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "neuralcoref/document.pyx":700
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)
 *                                                          for m in self.mentions) else 0}             # <<<<<<<<<<<<<<
 *             features = numpy.concatenate([one_hot_type,
 *                                        encode_distance(features_["02_MentionLength"]),
 */
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "neuralcoref/document.pyx":697
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention
 *                                                           and m.utterances_sent == mention.utterances_sent             # <<<<<<<<<<<<<<
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":685
 *             self.n_mentions += 1
 * 
 *     def set_mentions_features(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Compute features for the extracted mentions
 */

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_19set_mentions_features(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *__pyx_cur_scope;
  PyObject *__pyx_v_doc_embedding = NULL;
  PyObject *__pyx_v_one_hot_type = NULL;
  PyObject *__pyx_v_features_ = NULL;
  PyObject *__pyx_v_features = NULL;
  PyObject *__pyx_v_spans_embeddings_ = NULL;
  PyObject *__pyx_v_words_embeddings_ = NULL;
  PyObject *__pyx_v_spans_embeddings = NULL;
  PyObject *__pyx_v_words_embeddings = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  __Pyx_RefNannySetupContext("set_mentions_features", 0);
  __pyx_cur_scope = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *)__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features(__pyx_ptype_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 685, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("set_mentions_features", __pyx_f[0], 685, 0, __PYX_ERR(0, 685, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "neuralcoref/document.pyx":689
 *         Compute features for the extracted mentions
 *         '''
 *         doc_embedding = self.embed_extractor.get_document_embedding(self.utterances) if self.embed_extractor is not None else None             # <<<<<<<<<<<<<<
 *         for mention in self.mentions:
 *             one_hot_type = numpy.zeros((4,), dtype='float32')
 */
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_self->embed_extractor != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->embed_extractor, __pyx_n_s_get_document_embedding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_self->utterances); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 689, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_self->utterances};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_self->utterances};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self->utterances);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self->utterances);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_cur_scope->__pyx_v_self->utterances);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_doc_embedding = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":690
 *         '''
 *         doc_embedding = self.embed_extractor.get_document_embedding(self.utterances) if self.embed_extractor is not None else None
 *         for mention in self.mentions:             # <<<<<<<<<<<<<<
 *             one_hot_type = numpy.zeros((4,), dtype='float32')
 *             one_hot_type[mention.mention_type] = 1
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_self->mentions)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_self->mentions)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->mentions; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_self->mentions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 690, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 690, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 690, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 690, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 690, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 690, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_mention);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_mention, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":691
 *         doc_embedding = self.embed_extractor.get_document_embedding(self.utterances) if self.embed_extractor is not None else None
 *         for mention in self.mentions:
 *             one_hot_type = numpy.zeros((4,), dtype='float32')             # <<<<<<<<<<<<<<
 *             one_hot_type[mention.mention_type] = 1
 *             features_ = {"01_MentionType": mention.mention_type,
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 691, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__55, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_one_hot_type, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "neuralcoref/document.pyx":692
 *         for mention in self.mentions:
 *             one_hot_type = numpy.zeros((4,), dtype='float32')
 *             one_hot_type[mention.mention_type] = 1             # <<<<<<<<<<<<<<
 *             features_ = {"01_MentionType": mention.mention_type,
 *                          "02_MentionLength": len(mention)-1,
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mention, __pyx_n_s_mention_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyObject_SetItem(__pyx_v_one_hot_type, __pyx_t_6, __pyx_int_1) < 0)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "neuralcoref/document.pyx":693
 *             one_hot_type = numpy.zeros((4,), dtype='float32')
 *             one_hot_type[mention.mention_type] = 1
 *             features_ = {"01_MentionType": mention.mention_type,             # <<<<<<<<<<<<<<
 *                          "02_MentionLength": len(mention)-1,
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 */
    __pyx_t_6 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mention, __pyx_n_s_mention_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_6, __pyx_kp_u_01_MentionType, __pyx_t_3) < 0) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":694
 *             one_hot_type[mention.mention_type] = 1
 *             features_ = {"01_MentionType": mention.mention_type,
 *                          "02_MentionLength": len(mention)-1,             # <<<<<<<<<<<<<<
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention
 */
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_mention;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_9 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyInt_FromSsize_t((__pyx_t_9 - 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_6, __pyx_kp_u_02_MentionLength, __pyx_t_3) < 0) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":695
 *             features_ = {"01_MentionType": mention.mention_type,
 *                          "02_MentionLength": len(mention)-1,
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),             # <<<<<<<<<<<<<<
 *                          "04_IsMentionNested": 1 if any((m is not mention
 *                                                           and m.utterances_sent == mention.utterances_sent
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mention, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->mentions;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_9 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_6, __pyx_kp_u_03_MentionNormLocation, __pyx_t_5) < 0) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "neuralcoref/document.pyx":697
 *                          "03_MentionNormLocation": (mention.index)/len(self.mentions),
 *                          "04_IsMentionNested": 1 if any((m is not mention
 *                                                           and m.utterances_sent == mention.utterances_sent             # <<<<<<<<<<<<<<
 *                                                           and m.span.start <= mention.span.start
 *                                                           and mention.span.end <= m.span.end)
 */
    __pyx_t_4 = __pyx_pf_11neuralcoref_8document_8Document_21set_mentions_features_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {
      __Pyx_INCREF(__pyx_int_1);
      __pyx_t_5 = __pyx_int_1;
    } else {
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_5 = __pyx_int_0;
    }
    if (PyDict_SetItem(__pyx_t_6, __pyx_kp_u_04_IsMentionNested, __pyx_t_5) < 0) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_features_, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "neuralcoref/document.pyx":701
 *                                                           and mention.span.end <= m.span.end)
 *                                                          for m in self.mentions) else 0}
 *             features = numpy.concatenate([one_hot_type,             # <<<<<<<<<<<<<<
 *                                        encode_distance(features_["02_MentionLength"]),
 *                                        numpy.array(features_["03_MentionNormLocation"], ndmin=1, copy=False, dtype='float32'),
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "neuralcoref/document.pyx":702
 *                                                          for m in self.mentions) else 0}
 *             features = numpy.concatenate([one_hot_type,
 *                                        encode_distance(features_["02_MentionLength"]),             # <<<<<<<<<<<<<<
 *                                        numpy.array(features_["03_MentionNormLocation"], ndmin=1, copy=False, dtype='float32'),
 *                                        numpy.array(features_["04_IsMentionNested"], ndmin=1, copy=False, dtype='float32')
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_encode_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_features_, __pyx_kp_u_02_MentionLength); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 702, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_4};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 702, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_4};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 702, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 702, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 702, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":703
 *             features = numpy.concatenate([one_hot_type,
 *                                        encode_distance(features_["02_MentionLength"]),
 *                                        numpy.array(features_["03_MentionNormLocation"], ndmin=1, copy=False, dtype='float32'),             # <<<<<<<<<<<<<<
 *                                        numpy.array(features_["04_IsMentionNested"], ndmin=1, copy=False, dtype='float32')
 *                                       ], axis=0)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_features_, __pyx_kp_u_03_MentionNormLocation); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ndmin, __pyx_int_1) < 0) __PYX_ERR(0, 703, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 703, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 703, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":704
 *                                        encode_distance(features_["02_MentionLength"]),
 *                                        numpy.array(features_["03_MentionNormLocation"], ndmin=1, copy=False, dtype='float32'),
 *                                        numpy.array(features_["04_IsMentionNested"], ndmin=1, copy=False, dtype='float32')             # <<<<<<<<<<<<<<
 *                                       ], axis=0)
 *             spans_embeddings_, words_embeddings_, spans_embeddings, words_embeddings = self.embed_extractor.get_mention_embeddings(mention, doc_embedding)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_features_, __pyx_kp_u_04_IsMentionNested); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ndmin, __pyx_int_1) < 0) __PYX_ERR(0, 704, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 704, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 704, __pyx_L1_error)
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, __pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":701
 *                                                           and mention.span.end <= m.span.end)
 *                                                          for m in self.mentions) else 0}
 *             features = numpy.concatenate([one_hot_type,             # <<<<<<<<<<<<<<
 *                                        encode_distance(features_["02_MentionLength"]),
 *                                        numpy.array(features_["03_MentionNormLocation"], ndmin=1, copy=False, dtype='float32'),
 */
    __pyx_t_3 = PyList_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_one_hot_type);
    __Pyx_GIVEREF(__pyx_v_one_hot_type);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_one_hot_type);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_12);
    PyList_SET_ITEM(__pyx_t_3, 3, __pyx_t_12);
    __pyx_t_6 = 0;
    __pyx_t_10 = 0;
    __pyx_t_12 = 0;
    __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "neuralcoref/document.pyx":705
 *                                        numpy.array(features_["03_MentionNormLocation"], ndmin=1, copy=False, dtype='float32'),
 *                                        numpy.array(features_["04_IsMentionNested"], ndmin=1, copy=False, dtype='float32')
 *                                       ], axis=0)             # <<<<<<<<<<<<<<
 *             spans_embeddings_, words_embeddings_, spans_embeddings, words_embeddings = self.embed_extractor.get_mention_embeddings(mention, doc_embedding)
 *             mention.features_ = features_
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 705, __pyx_L1_error)

    /* "neuralcoref/document.pyx":701
 *                                                           and mention.span.end <= m.span.end)
 *                                                          for m in self.mentions) else 0}
 *             features = numpy.concatenate([one_hot_type,             # <<<<<<<<<<<<<<
 *                                        encode_distance(features_["02_MentionLength"]),
 *                                        numpy.array(features_["03_MentionNormLocation"], ndmin=1, copy=False, dtype='float32'),
 */
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_features, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "neuralcoref/document.pyx":706
 *                                        numpy.array(features_["04_IsMentionNested"], ndmin=1, copy=False, dtype='float32')
 *                                       ], axis=0)
 *             spans_embeddings_, words_embeddings_, spans_embeddings, words_embeddings = self.embed_extractor.get_mention_embeddings(mention, doc_embedding)             # <<<<<<<<<<<<<<
 *             mention.features_ = features_
 *             mention.features = features
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->embed_extractor, __pyx_n_s_get_mention_embeddings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = NULL;
    __pyx_t_13 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_13 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_cur_scope->__pyx_v_mention, __pyx_v_doc_embedding};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_cur_scope->__pyx_v_mention, __pyx_v_doc_embedding};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_12) {
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_12); __pyx_t_12 = NULL;
      }
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_mention);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_mention);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_13, __pyx_cur_scope->__pyx_v_mention);
      __Pyx_INCREF(__pyx_v_doc_embedding);
      __Pyx_GIVEREF(__pyx_v_doc_embedding);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_13, __pyx_v_doc_embedding);
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
      PyObject* sequence = __pyx_t_10;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 706, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_12 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_6);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_5,&__pyx_t_12,&__pyx_t_6};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_5,&__pyx_t_12,&__pyx_t_6};
      __pyx_t_11 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_14 = Py_TYPE(__pyx_t_11)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_14(__pyx_t_11); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_11), 4) < 0) __PYX_ERR(0, 706, __pyx_L1_error)
      __pyx_t_14 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_14 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 706, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_spans_embeddings_, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_words_embeddings_, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_spans_embeddings, __pyx_t_12);
    __pyx_t_12 = 0;
    __Pyx_XDECREF_SET(__pyx_v_words_embeddings, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "neuralcoref/document.pyx":707
 *                                       ], axis=0)
 *             spans_embeddings_, words_embeddings_, spans_embeddings, words_embeddings = self.embed_extractor.get_mention_embeddings(mention, doc_embedding)
 *             mention.features_ = features_             # <<<<<<<<<<<<<<
 *             mention.features = features
 *             mention.spans_embeddings = spans_embeddings
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_mention, __pyx_n_s_features, __pyx_v_features_) < 0) __PYX_ERR(0, 707, __pyx_L1_error)

    /* "neuralcoref/document.pyx":708
 *             spans_embeddings_, words_embeddings_, spans_embeddings, words_embeddings = self.embed_extractor.get_mention_embeddings(mention, doc_embedding)
 *             mention.features_ = features_
 *             mention.features = features             # <<<<<<<<<<<<<<
 *             mention.spans_embeddings = spans_embeddings
 *             mention.spans_embeddings_ = spans_embeddings_
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_mention, __pyx_n_s_features_2, __pyx_v_features) < 0) __PYX_ERR(0, 708, __pyx_L1_error)

    /* "neuralcoref/document.pyx":709
 *             mention.features_ = features_
 *             mention.features = features
 *             mention.spans_embeddings = spans_embeddings             # <<<<<<<<<<<<<<
 *             mention.spans_embeddings_ = spans_embeddings_
 *             mention.words_embeddings = words_embeddings
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_mention, __pyx_n_s_spans_embeddings, __pyx_v_spans_embeddings) < 0) __PYX_ERR(0, 709, __pyx_L1_error)

    /* "neuralcoref/document.pyx":710
 *             mention.features = features
 *             mention.spans_embeddings = spans_embeddings
 *             mention.spans_embeddings_ = spans_embeddings_             # <<<<<<<<<<<<<<
 *             mention.words_embeddings = words_embeddings
 *             mention.words_embeddings_ = words_embeddings_
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_mention, __pyx_n_s_spans_embeddings_2, __pyx_v_spans_embeddings_) < 0) __PYX_ERR(0, 710, __pyx_L1_error)

    /* "neuralcoref/document.pyx":711
 *             mention.spans_embeddings = spans_embeddings
 *             mention.spans_embeddings_ = spans_embeddings_
 *             mention.words_embeddings = words_embeddings             # <<<<<<<<<<<<<<
 *             mention.words_embeddings_ = words_embeddings_
 *             mention.embeddings = numpy.concatenate([spans_embeddings, words_embeddings], axis=0)
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_mention, __pyx_n_s_words_embeddings, __pyx_v_words_embeddings) < 0) __PYX_ERR(0, 711, __pyx_L1_error)

    /* "neuralcoref/document.pyx":712
 *             mention.spans_embeddings_ = spans_embeddings_
 *             mention.words_embeddings = words_embeddings
 *             mention.words_embeddings_ = words_embeddings_             # <<<<<<<<<<<<<<
 *             mention.embeddings = numpy.concatenate([spans_embeddings, words_embeddings], axis=0)
 * 
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_mention, __pyx_n_s_words_embeddings_2, __pyx_v_words_embeddings_) < 0) __PYX_ERR(0, 712, __pyx_L1_error)

    /* "neuralcoref/document.pyx":713
 *             mention.words_embeddings = words_embeddings
 *             mention.words_embeddings_ = words_embeddings_
 *             mention.embeddings = numpy.concatenate([spans_embeddings, words_embeddings], axis=0)             # <<<<<<<<<<<<<<
 * 
 *     def get_single_mention_features(self, mention):
 */
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_v_spans_embeddings);
    __Pyx_GIVEREF(__pyx_v_spans_embeddings);
    PyList_SET_ITEM(__pyx_t_10, 0, __pyx_v_spans_embeddings);
    __Pyx_INCREF(__pyx_v_words_embeddings);
    __Pyx_GIVEREF(__pyx_v_words_embeddings);
    PyList_SET_ITEM(__pyx_t_10, 1, __pyx_v_words_embeddings);
    __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 713, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_12, __pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_mention, __pyx_n_s_embeddings, __pyx_t_5) < 0) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "neuralcoref/document.pyx":690
 *         '''
 *         doc_embedding = self.embed_extractor.get_document_embedding(self.utterances) if self.embed_extractor is not None else None
 *         for mention in self.mentions:             # <<<<<<<<<<<<<<
 *             one_hot_type = numpy.zeros((4,), dtype='float32')
 *             one_hot_type[mention.mention_type] = 1
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":685
 *             self.n_mentions += 1
 * 
 *     def set_mentions_features(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Compute features for the extracted mentions
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("neuralcoref.document.Document.set_mentions_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_doc_embedding);
  __Pyx_XDECREF(__pyx_v_one_hot_type);
  __Pyx_XDECREF(__pyx_v_features_);
  __Pyx_XDECREF(__pyx_v_features);
  __Pyx_XDECREF(__pyx_v_spans_embeddings_);
  __Pyx_XDECREF(__pyx_v_words_embeddings_);
  __Pyx_XDECREF(__pyx_v_spans_embeddings);
  __Pyx_XDECREF(__pyx_v_words_embeddings);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":715
 *             mention.embeddings = numpy.concatenate([spans_embeddings, words_embeddings], axis=0)
 * 
 *     def get_single_mention_features(self, mention):             # <<<<<<<<<<<<<<
 *         ''' Features for anaphoricity test (signle mention features + genre if conll)'''
 *         features_ = mention.features_
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_22get_single_mention_features(PyObject *__pyx_v_self, PyObject *__pyx_v_mention); /*proto*/
static char __pyx_doc_11neuralcoref_8document_8Document_21get_single_mention_features[] = " Features for anaphoricity test (signle mention features + genre if conll)";
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_22get_single_mention_features(PyObject *__pyx_v_self, PyObject *__pyx_v_mention) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_single_mention_features (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_21get_single_mention_features(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self), ((PyObject *)__pyx_v_mention));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_21get_single_mention_features(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_mention) {
  PyObject *__pyx_v_features_ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_single_mention_features", 0);
  __Pyx_TraceCall("get_single_mention_features", __pyx_f[0], 715, 0, __PYX_ERR(0, 715, __pyx_L1_error));

  /* "neuralcoref/document.pyx":717
 *     def get_single_mention_features(self, mention):
 *         ''' Features for anaphoricity test (signle mention features + genre if conll)'''
 *         features_ = mention.features_             # <<<<<<<<<<<<<<
 *         features_["DocGenre"] = self.genre_
 *         return (features_, numpy.concatenate([mention.features, self.genre], axis=0))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_mention, __pyx_n_s_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_features_ = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":718
 *         ''' Features for anaphoricity test (signle mention features + genre if conll)'''
 *         features_ = mention.features_
 *         features_["DocGenre"] = self.genre_             # <<<<<<<<<<<<<<
 *         return (features_, numpy.concatenate([mention.features, self.genre], axis=0))
 * 
 */
  __pyx_t_1 = __pyx_v_self->genre_;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_v_features_, __pyx_n_u_DocGenre, __pyx_t_1) < 0)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":719
 *         features_ = mention.features_
 *         features_["DocGenre"] = self.genre_
 *         return (features_, numpy.concatenate([mention.features, self.genre], axis=0))             # <<<<<<<<<<<<<<
 * 
 *     def get_raw_pair_features(self, m1, m2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_mention, __pyx_n_s_features_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->genre);
  __Pyx_GIVEREF(__pyx_v_self->genre);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_v_self->genre);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 719, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_features_);
  __Pyx_GIVEREF(__pyx_v_features_);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_features_);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":715
 *             mention.embeddings = numpy.concatenate([spans_embeddings, words_embeddings], axis=0)
 * 
 *     def get_single_mention_features(self, mention):             # <<<<<<<<<<<<<<
 *         ''' Features for anaphoricity test (signle mention features + genre if conll)'''
 *         features_ = mention.features_
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("neuralcoref.document.Document.get_single_mention_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_features_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":721
 *         return (features_, numpy.concatenate([mention.features, self.genre], axis=0))
 * 
 *     def get_raw_pair_features(self, m1, m2):             # <<<<<<<<<<<<<<
 *         ''' Features for pair of mentions (string match)'''
 *         return {"00_SameSpeaker": 1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_24get_raw_pair_features(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11neuralcoref_8document_8Document_23get_raw_pair_features[] = " Features for pair of mentions (string match)";
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_24get_raw_pair_features(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_m1 = 0;
  PyObject *__pyx_v_m2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_raw_pair_features (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m1,&__pyx_n_s_m2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_raw_pair_features", 1, 2, 2, 1); __PYX_ERR(0, 721, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_raw_pair_features") < 0)) __PYX_ERR(0, 721, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_m1 = values[0];
    __pyx_v_m2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_raw_pair_features", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 721, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.get_raw_pair_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_23get_raw_pair_features(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self), __pyx_v_m1, __pyx_v_m2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_23get_raw_pair_features(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_m1, PyObject *__pyx_v_m2) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("get_raw_pair_features", 0);
  __Pyx_TraceCall("get_raw_pair_features", __pyx_f[0], 721, 0, __PYX_ERR(0, 721, __pyx_L1_error));

  /* "neuralcoref/document.pyx":723
 *     def get_raw_pair_features(self, m1, m2):
 *         ''' Features for pair of mentions (string match)'''
 *         return {"00_SameSpeaker": 1,             # <<<<<<<<<<<<<<
 *                 "01_AntMatchMentionSpeaker": 0,
 *                 "02_MentionMatchSpeaker": 0,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_00_SameSpeaker, __pyx_int_1) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_01_AntMatchMentionSpeaker, __pyx_int_0) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_02_MentionMatchSpeaker, __pyx_int_0) < 0) __PYX_ERR(0, 723, __pyx_L1_error)

  /* "neuralcoref/document.pyx":726
 *                 "01_AntMatchMentionSpeaker": 0,
 *                 "02_MentionMatchSpeaker": 0,
 *                 "03_HeadsAgree": 1 if m1.heads_agree(m2) else 0,             # <<<<<<<<<<<<<<
 *                 "04_ExactStringMatch": 1 if m1.exact_match(m2) else 0,
 *                 "05_RelaxedStringMatch": 1 if m1.relaxed_match(m2) else 0,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_m1, __pyx_n_s_heads_agree); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_m2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_m2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 726, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_m2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 726, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 726, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_m2);
      __Pyx_GIVEREF(__pyx_v_m2);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_m2);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 726, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_int_1);
    __pyx_t_2 = __pyx_int_1;
  } else {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_2 = __pyx_int_0;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_03_HeadsAgree, __pyx_t_2) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":727
 *                 "02_MentionMatchSpeaker": 0,
 *                 "03_HeadsAgree": 1 if m1.heads_agree(m2) else 0,
 *                 "04_ExactStringMatch": 1 if m1.exact_match(m2) else 0,             # <<<<<<<<<<<<<<
 *                 "05_RelaxedStringMatch": 1 if m1.relaxed_match(m2) else 0,
 *                 "06_SentenceDistance": m2.utterances_sent - m1.utterances_sent,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_m1, __pyx_n_s_exact_match); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_m2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 727, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_m2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 727, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_m2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 727, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 727, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_m2);
      __Pyx_GIVEREF(__pyx_v_m2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_m2);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 727, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_int_1);
    __pyx_t_2 = __pyx_int_1;
  } else {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_2 = __pyx_int_0;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_04_ExactStringMatch, __pyx_t_2) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":728
 *                 "03_HeadsAgree": 1 if m1.heads_agree(m2) else 0,
 *                 "04_ExactStringMatch": 1 if m1.exact_match(m2) else 0,
 *                 "05_RelaxedStringMatch": 1 if m1.relaxed_match(m2) else 0,             # <<<<<<<<<<<<<<
 *                 "06_SentenceDistance": m2.utterances_sent - m1.utterances_sent,
 *                 "07_MentionDistance": m2.index - m1.index - 1,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_m1, __pyx_n_s_relaxed_match); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_m2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_m2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_m2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_m2);
      __Pyx_GIVEREF(__pyx_v_m2);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_m2);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_int_1);
    __pyx_t_2 = __pyx_int_1;
  } else {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_2 = __pyx_int_0;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_05_RelaxedStringMatch, __pyx_t_2) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":729
 *                 "04_ExactStringMatch": 1 if m1.exact_match(m2) else 0,
 *                 "05_RelaxedStringMatch": 1 if m1.relaxed_match(m2) else 0,
 *                 "06_SentenceDistance": m2.utterances_sent - m1.utterances_sent,             # <<<<<<<<<<<<<<
 *                 "07_MentionDistance": m2.index - m1.index - 1,
 *                 "08_Overlapping": 1 if (m1.utterances_sent == m2.utterances_sent and m1.span.end > m2.span.start) else 0,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_m2, __pyx_n_s_utterances_sent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_m1, __pyx_n_s_utterances_sent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_06_SentenceDistance, __pyx_t_4) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "neuralcoref/document.pyx":730
 *                 "05_RelaxedStringMatch": 1 if m1.relaxed_match(m2) else 0,
 *                 "06_SentenceDistance": m2.utterances_sent - m1.utterances_sent,
 *                 "07_MentionDistance": m2.index - m1.index - 1,             # <<<<<<<<<<<<<<
 *                 "08_Overlapping": 1 if (m1.utterances_sent == m2.utterances_sent and m1.span.end > m2.span.start) else 0,
 *                 "09_M1Features": m1.features_,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_m2, __pyx_n_s_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_m1, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_07_MentionDistance, __pyx_t_3) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":731
 *                 "06_SentenceDistance": m2.utterances_sent - m1.utterances_sent,
 *                 "07_MentionDistance": m2.index - m1.index - 1,
 *                 "08_Overlapping": 1 if (m1.utterances_sent == m2.utterances_sent and m1.span.end > m2.span.start) else 0,             # <<<<<<<<<<<<<<
 *                 "09_M1Features": m1.features_,
 *                 "10_M2Features": m2.features_,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_m1, __pyx_n_s_utterances_sent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_m2, __pyx_n_s_utterances_sent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_m1, __pyx_n_s_span); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_end); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_m2, __pyx_n_s_span); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __pyx_t_8;
  __pyx_L3_bool_binop_done:;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_int_1);
    __pyx_t_3 = __pyx_int_1;
  } else {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_3 = __pyx_int_0;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_08_Overlapping, __pyx_t_3) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":732
 *                 "07_MentionDistance": m2.index - m1.index - 1,
 *                 "08_Overlapping": 1 if (m1.utterances_sent == m2.utterances_sent and m1.span.end > m2.span.start) else 0,
 *                 "09_M1Features": m1.features_,             # <<<<<<<<<<<<<<
 *                 "10_M2Features": m2.features_,
 *                 "11_DocGenre": self.genre_}
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_m1, __pyx_n_s_features); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_09_M1Features, __pyx_t_3) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":733
 *                 "08_Overlapping": 1 if (m1.utterances_sent == m2.utterances_sent and m1.span.end > m2.span.start) else 0,
 *                 "09_M1Features": m1.features_,
 *                 "10_M2Features": m2.features_,             # <<<<<<<<<<<<<<
 *                 "11_DocGenre": self.genre_}
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_m2, __pyx_n_s_features); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_10_M2Features, __pyx_t_3) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuralcoref/document.pyx":734
 *                 "09_M1Features": m1.features_,
 *                 "10_M2Features": m2.features_,
 *                 "11_DocGenre": self.genre_}             # <<<<<<<<<<<<<<
 * 
 *     def get_pair_mentions_features(self, m1, m2):
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_11_DocGenre, __pyx_v_self->genre_) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":721
 *         return (features_, numpy.concatenate([mention.features, self.genre], axis=0))
 * 
 *     def get_raw_pair_features(self, m1, m2):             # <<<<<<<<<<<<<<
 *         ''' Features for pair of mentions (string match)'''
 *         return {"00_SameSpeaker": 1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuralcoref.document.Document.get_raw_pair_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":736
 *                 "11_DocGenre": self.genre_}
 * 
 *     def get_pair_mentions_features(self, m1, m2):             # <<<<<<<<<<<<<<
 *         features_ = self.get_raw_pair_features(m1, m2)
 *         pairwise_features = [m1.embeddings,
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_26get_pair_mentions_features(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_26get_pair_mentions_features(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_m1 = 0;
  PyObject *__pyx_v_m2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_pair_mentions_features (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m1,&__pyx_n_s_m2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_pair_mentions_features", 1, 2, 2, 1); __PYX_ERR(0, 736, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_pair_mentions_features") < 0)) __PYX_ERR(0, 736, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_m1 = values[0];
    __pyx_v_m2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_pair_mentions_features", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 736, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.get_pair_mentions_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_25get_pair_mentions_features(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self), __pyx_v_m1, __pyx_v_m2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_25get_pair_mentions_features(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_m1, PyObject *__pyx_v_m2) {
  PyObject *__pyx_v_features_ = NULL;
  PyObject *__pyx_v_pairwise_features = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("get_pair_mentions_features", 0);
  __Pyx_TraceCall("get_pair_mentions_features", __pyx_f[0], 736, 0, __PYX_ERR(0, 736, __pyx_L1_error));

  /* "neuralcoref/document.pyx":737
 * 
 *     def get_pair_mentions_features(self, m1, m2):
 *         features_ = self.get_raw_pair_features(m1, m2)             # <<<<<<<<<<<<<<
 *         pairwise_features = [m1.embeddings,
 *                              m2.embeddings,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_raw_pair_features); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_m1, __pyx_v_m2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_m1, __pyx_v_m2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_m1);
    __Pyx_GIVEREF(__pyx_v_m1);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_m1);
    __Pyx_INCREF(__pyx_v_m2);
    __Pyx_GIVEREF(__pyx_v_m2);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_m2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_features_ = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":738
 *     def get_pair_mentions_features(self, m1, m2):
 *         features_ = self.get_raw_pair_features(m1, m2)
 *         pairwise_features = [m1.embeddings,             # <<<<<<<<<<<<<<
 *                              m2.embeddings,
 *                              numpy.array([features_["00_SameSpeaker"],
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_m1, __pyx_n_s_embeddings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "neuralcoref/document.pyx":739
 *         features_ = self.get_raw_pair_features(m1, m2)
 *         pairwise_features = [m1.embeddings,
 *                              m2.embeddings,             # <<<<<<<<<<<<<<
 *                              numpy.array([features_["00_SameSpeaker"],
 *                                        features_["01_AntMatchMentionSpeaker"],
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_m2, __pyx_n_s_embeddings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "neuralcoref/document.pyx":740
 *         pairwise_features = [m1.embeddings,
 *                              m2.embeddings,
 *                              numpy.array([features_["00_SameSpeaker"],             # <<<<<<<<<<<<<<
 *                                        features_["01_AntMatchMentionSpeaker"],
 *                                        features_["02_MentionMatchSpeaker"],
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_features_, __pyx_kp_u_00_SameSpeaker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "neuralcoref/document.pyx":741
 *                              m2.embeddings,
 *                              numpy.array([features_["00_SameSpeaker"],
 *                                        features_["01_AntMatchMentionSpeaker"],             # <<<<<<<<<<<<<<
 *                                        features_["02_MentionMatchSpeaker"],
 *                                        features_["03_HeadsAgree"],
 */
  __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_v_features_, __pyx_kp_u_01_AntMatchMentionSpeaker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "neuralcoref/document.pyx":742
 *                              numpy.array([features_["00_SameSpeaker"],
 *                                        features_["01_AntMatchMentionSpeaker"],
 *                                        features_["02_MentionMatchSpeaker"],             # <<<<<<<<<<<<<<
 *                                        features_["03_HeadsAgree"],
 *                                        features_["04_ExactStringMatch"],
 */
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_features_, __pyx_kp_u_02_MentionMatchSpeaker); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "neuralcoref/document.pyx":743
 *                                        features_["01_AntMatchMentionSpeaker"],
 *                                        features_["02_MentionMatchSpeaker"],
 *                                        features_["03_HeadsAgree"],             # <<<<<<<<<<<<<<
 *                                        features_["04_ExactStringMatch"],
 *                                        features_["05_RelaxedStringMatch"]]),
 */
  __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_v_features_, __pyx_kp_u_03_HeadsAgree); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "neuralcoref/document.pyx":744
 *                                        features_["02_MentionMatchSpeaker"],
 *                                        features_["03_HeadsAgree"],
 *                                        features_["04_ExactStringMatch"],             # <<<<<<<<<<<<<<
 *                                        features_["05_RelaxedStringMatch"]]),
 *                              encode_distance(features_["06_SentenceDistance"]),
 */
  __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_v_features_, __pyx_kp_u_04_ExactStringMatch); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);

  /* "neuralcoref/document.pyx":745
 *                                        features_["03_HeadsAgree"],
 *                                        features_["04_ExactStringMatch"],
 *                                        features_["05_RelaxedStringMatch"]]),             # <<<<<<<<<<<<<<
 *                              encode_distance(features_["06_SentenceDistance"]),
 *                              encode_distance(features_["07_MentionDistance"]),
 */
  __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_features_, __pyx_kp_u_05_RelaxedStringMatch); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "neuralcoref/document.pyx":740
 *         pairwise_features = [m1.embeddings,
 *                              m2.embeddings,
 *                              numpy.array([features_["00_SameSpeaker"],             # <<<<<<<<<<<<<<
 *                                        features_["01_AntMatchMentionSpeaker"],
 *                                        features_["02_MentionMatchSpeaker"],
 */
  __pyx_t_12 = PyList_New(6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_12, 3, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_12, 4, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_12, 5, __pyx_t_11);
  __pyx_t_3 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_11) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_12};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_12};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11); __pyx_t_11 = NULL;
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_12);
      __pyx_t_12 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "neuralcoref/document.pyx":746
 *                                        features_["04_ExactStringMatch"],
 *                                        features_["05_RelaxedStringMatch"]]),
 *                              encode_distance(features_["06_SentenceDistance"]),             # <<<<<<<<<<<<<<
 *                              encode_distance(features_["07_MentionDistance"]),
 *                              numpy.array(features_["08_Overlapping"], ndmin=1),
 */
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_encode_distance); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = __Pyx_PyObject_Dict_GetItem(__pyx_v_features_, __pyx_kp_u_06_SentenceDistance); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  if (!__pyx_t_11) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 746, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_12};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 746, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_12};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 746, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 746, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_11); __pyx_t_11 = NULL;
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_12);
      __pyx_t_12 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 746, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "neuralcoref/document.pyx":747
 *                                        features_["05_RelaxedStringMatch"]]),
 *                              encode_distance(features_["06_SentenceDistance"]),
 *                              encode_distance(features_["07_MentionDistance"]),             # <<<<<<<<<<<<<<
 *                              numpy.array(features_["08_Overlapping"], ndmin=1),
 *                              m1.features,
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_encode_distance); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_12 = __Pyx_PyObject_Dict_GetItem(__pyx_v_features_, __pyx_kp_u_07_MentionDistance); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (!__pyx_t_11) {
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_12};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 747, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_12};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 747, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 747, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_11); __pyx_t_11 = NULL;
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_12);
      __pyx_t_12 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 747, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "neuralcoref/document.pyx":748
 *                              encode_distance(features_["06_SentenceDistance"]),
 *                              encode_distance(features_["07_MentionDistance"]),
 *                              numpy.array(features_["08_Overlapping"], ndmin=1),             # <<<<<<<<<<<<<<
 *                              m1.features,
 *                              m2.features,
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_v_features_, __pyx_kp_u_08_Overlapping); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_ndmin, __pyx_int_1) < 0) __PYX_ERR(0, 748, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_12, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "neuralcoref/document.pyx":749
 *                              encode_distance(features_["07_MentionDistance"]),
 *                              numpy.array(features_["08_Overlapping"], ndmin=1),
 *                              m1.features,             # <<<<<<<<<<<<<<
 *                              m2.features,
 *                              self.genre]
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_m1, __pyx_n_s_features_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "neuralcoref/document.pyx":750
 *                              numpy.array(features_["08_Overlapping"], ndmin=1),
 *                              m1.features,
 *                              m2.features,             # <<<<<<<<<<<<<<
 *                              self.genre]
 *         return (features_, numpy.concatenate(pairwise_features, axis=0))
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_m2, __pyx_n_s_features_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "neuralcoref/document.pyx":738
 *     def get_pair_mentions_features(self, m1, m2):
 *         features_ = self.get_raw_pair_features(m1, m2)
 *         pairwise_features = [m1.embeddings,             # <<<<<<<<<<<<<<
 *                              m2.embeddings,
 *                              numpy.array([features_["00_SameSpeaker"],
 */
  __pyx_t_8 = PyList_New(9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_8, 4, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_8, 5, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_8, 6, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_8, 7, __pyx_t_12);
  __Pyx_INCREF(__pyx_v_self->genre);
  __Pyx_GIVEREF(__pyx_v_self->genre);
  PyList_SET_ITEM(__pyx_t_8, 8, __pyx_v_self->genre);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_9 = 0;
  __pyx_t_12 = 0;
  __pyx_v_pairwise_features = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "neuralcoref/document.pyx":752
 *                              m2.features,
 *                              self.genre]
 *         return (features_, numpy.concatenate(pairwise_features, axis=0))             # <<<<<<<<<<<<<<
 * 
 *     ###################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_pairwise_features);
  __Pyx_GIVEREF(__pyx_v_pairwise_features);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_pairwise_features);
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 752, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_v_features_);
  __Pyx_GIVEREF(__pyx_v_features_);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_features_);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_11);
  __pyx_t_11 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "neuralcoref/document.pyx":736
 *                 "11_DocGenre": self.genre_}
 * 
 *     def get_pair_mentions_features(self, m1, m2):             # <<<<<<<<<<<<<<
 *         features_ = self.get_raw_pair_features(m1, m2)
 *         pairwise_features = [m1.embeddings,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("neuralcoref.document.Document.get_pair_mentions_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_features_);
  __Pyx_XDECREF(__pyx_v_pairwise_features);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":758
 *     ###################################
 * 
 *     def set_candidate_pairs(self, max_distance=50, max_distance_with_match=500, debug=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Yield tuples of mentions, dictionnary of candidate antecedents for the mention
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_28set_candidate_pairs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11neuralcoref_8document_8Document_27set_candidate_pairs[] = "\n        Yield tuples of mentions, dictionnary of candidate antecedents for the mention\n\n        Arg:\n            mentions: an iterator over mention indexes (as returned by get_candidate_mentions)\n            max_mention_distance : max distance between a mention and its antecedent\n            max_mention_distance_string_match : max distance between a mention and\n                its antecedent when there is a proper noun match\n        ";
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_28set_candidate_pairs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_max_distance = 0;
  PyObject *__pyx_v_max_distance_with_match = 0;
  PyObject *__pyx_v_debug = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_candidate_pairs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_distance,&__pyx_n_s_max_distance_with_match,&__pyx_n_s_debug,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_int_50);
    values[1] = ((PyObject *)__pyx_int_500);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_distance);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_distance_with_match);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_debug);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_candidate_pairs") < 0)) __PYX_ERR(0, 758, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_max_distance = values[0];
    __pyx_v_max_distance_with_match = values[1];
    __pyx_v_debug = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_candidate_pairs", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 758, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.set_candidate_pairs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_27set_candidate_pairs(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self), __pyx_v_max_distance, __pyx_v_max_distance_with_match, __pyx_v_debug);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_27set_candidate_pairs(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, PyObject *__pyx_v_max_distance, PyObject *__pyx_v_max_distance_with_match, PyObject *__pyx_v_debug) {
  int __pyx_v_i;
  PyObject *__pyx_v_pairs_ant = NULL;
  PyObject *__pyx_v_pairs_men = NULL;
  PyObject *__pyx_v_word_to_mentions = NULL;
  PyObject *__pyx_v_tok = NULL;
  PyObject *__pyx_v_antecedents = NULL;
  PyObject *__pyx_v_with_string_match = NULL;
  PyObject *__pyx_v_match_idx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  long __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  __Pyx_RefNannySetupContext("set_candidate_pairs", 0);
  __Pyx_TraceCall("set_candidate_pairs", __pyx_f[0], 758, 0, __PYX_ERR(0, 758, __pyx_L1_error));

  /* "neuralcoref/document.pyx":769
 *         '''
 *         cdef int i
 *         pairs_ant = []             # <<<<<<<<<<<<<<
 *         pairs_men = []
 *         if max_distance_with_match is not None:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pairs_ant = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":770
 *         cdef int i
 *         pairs_ant = []
 *         pairs_men = []             # <<<<<<<<<<<<<<
 *         if max_distance_with_match is not None:
 *             word_to_mentions = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pairs_men = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":771
 *         pairs_ant = []
 *         pairs_men = []
 *         if max_distance_with_match is not None:             # <<<<<<<<<<<<<<
 *             word_to_mentions = {}
 *             for i in range(self.n_mentions):
 */
  __pyx_t_2 = (__pyx_v_max_distance_with_match != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "neuralcoref/document.pyx":772
 *         pairs_men = []
 *         if max_distance_with_match is not None:
 *             word_to_mentions = {}             # <<<<<<<<<<<<<<
 *             for i in range(self.n_mentions):
 *                 for tok in self.mentions[i].content_words:
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_word_to_mentions = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":773
 *         if max_distance_with_match is not None:
 *             word_to_mentions = {}
 *             for i in range(self.n_mentions):             # <<<<<<<<<<<<<<
 *                 for tok in self.mentions[i].content_words:
 *                     if not tok in word_to_mentions:
 */
    __pyx_t_4 = __pyx_v_self->n_mentions;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "neuralcoref/document.pyx":774
 *             word_to_mentions = {}
 *             for i in range(self.n_mentions):
 *                 for tok in self.mentions[i].content_words:             # <<<<<<<<<<<<<<
 *                     if not tok in word_to_mentions:
 *                         word_to_mentions[tok] = [i]
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->mentions, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_content_words); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_1 = __pyx_t_7; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 774, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 774, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 774, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 774, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 774, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_9(__pyx_t_1);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 774, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_tok, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "neuralcoref/document.pyx":775
 *             for i in range(self.n_mentions):
 *                 for tok in self.mentions[i].content_words:
 *                     if not tok in word_to_mentions:             # <<<<<<<<<<<<<<
 *                         word_to_mentions[tok] = [i]
 *                     else:
 */
        __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_v_tok, __pyx_v_word_to_mentions, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 775, __pyx_L1_error)
        __pyx_t_2 = (__pyx_t_3 != 0);
        if (__pyx_t_2) {

          /* "neuralcoref/document.pyx":776
 *                 for tok in self.mentions[i].content_words:
 *                     if not tok in word_to_mentions:
 *                         word_to_mentions[tok] = [i]             # <<<<<<<<<<<<<<
 *                     else:
 *                         word_to_mentions[tok].append(i)
 */
          __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 776, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_10 = PyList_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 776, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_7);
          PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_7);
          __pyx_t_7 = 0;
          if (unlikely(PyDict_SetItem(__pyx_v_word_to_mentions, __pyx_v_tok, __pyx_t_10) < 0)) __PYX_ERR(0, 776, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "neuralcoref/document.pyx":775
 *             for i in range(self.n_mentions):
 *                 for tok in self.mentions[i].content_words:
 *                     if not tok in word_to_mentions:             # <<<<<<<<<<<<<<
 *                         word_to_mentions[tok] = [i]
 *                     else:
 */
          goto __pyx_L8;
        }

        /* "neuralcoref/document.pyx":778
 *                         word_to_mentions[tok] = [i]
 *                     else:
 *                         word_to_mentions[tok].append(i)             # <<<<<<<<<<<<<<
 *         for i in range(self.n_mentions):
 *             antecedents = set(range(i)) if max_distance is None else set(range(max(0, i - max_distance), i))
 */
        /*else*/ {
          __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_word_to_mentions, __pyx_v_tok); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 778, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 778, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_10, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 778, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __pyx_L8:;

        /* "neuralcoref/document.pyx":774
 *             word_to_mentions = {}
 *             for i in range(self.n_mentions):
 *                 for tok in self.mentions[i].content_words:             # <<<<<<<<<<<<<<
 *                     if not tok in word_to_mentions:
 *                         word_to_mentions[tok] = [i]
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "neuralcoref/document.pyx":771
 *         pairs_ant = []
 *         pairs_men = []
 *         if max_distance_with_match is not None:             # <<<<<<<<<<<<<<
 *             word_to_mentions = {}
 *             for i in range(self.n_mentions):
 */
  }

  /* "neuralcoref/document.pyx":779
 *                     else:
 *                         word_to_mentions[tok].append(i)
 *         for i in range(self.n_mentions):             # <<<<<<<<<<<<<<
 *             antecedents = set(range(i)) if max_distance is None else set(range(max(0, i - max_distance), i))
 *             if debug: print("antecedents", antecedents)
 */
  __pyx_t_4 = __pyx_v_self->n_mentions;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "neuralcoref/document.pyx":780
 *                         word_to_mentions[tok].append(i)
 *         for i in range(self.n_mentions):
 *             antecedents = set(range(i)) if max_distance is None else set(range(max(0, i - max_distance), i))             # <<<<<<<<<<<<<<
 *             if debug: print("antecedents", antecedents)
 *             if max_distance_with_match is not None:
 */
    __pyx_t_2 = (__pyx_v_max_distance == Py_None);
    if ((__pyx_t_2 != 0)) {
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PySet_New(__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_1 = __pyx_t_7;
      __pyx_t_7 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = PyNumber_Subtract(__pyx_t_7, __pyx_v_max_distance); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_12 = 0;
      __pyx_t_13 = __Pyx_PyInt_From_long(__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyObject_RichCompare(__pyx_t_10, __pyx_t_13, Py_GT); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (__pyx_t_3) {
        __Pyx_INCREF(__pyx_t_10);
        __pyx_t_7 = __pyx_t_10;
      } else {
        __pyx_t_14 = __Pyx_PyInt_From_long(__pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 780, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_7 = __pyx_t_14;
        __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_14, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = PySet_New(__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_1 = __pyx_t_14;
      __pyx_t_14 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_antecedents, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":781
 *         for i in range(self.n_mentions):
 *             antecedents = set(range(i)) if max_distance is None else set(range(max(0, i - max_distance), i))
 *             if debug: print("antecedents", antecedents)             # <<<<<<<<<<<<<<
 *             if max_distance_with_match is not None:
 *                 for tok in self.mentions[i].content_words:
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_debug); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 781, __pyx_L1_error)
    if (__pyx_t_2) {
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_u_antecedents);
      __Pyx_GIVEREF(__pyx_n_u_antecedents);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_antecedents);
      __Pyx_INCREF(__pyx_v_antecedents);
      __Pyx_GIVEREF(__pyx_v_antecedents);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_antecedents);
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }

    /* "neuralcoref/document.pyx":782
 *             antecedents = set(range(i)) if max_distance is None else set(range(max(0, i - max_distance), i))
 *             if debug: print("antecedents", antecedents)
 *             if max_distance_with_match is not None:             # <<<<<<<<<<<<<<
 *                 for tok in self.mentions[i].content_words:
 *                     with_string_match = word_to_mentions.get(tok, None)
 */
    __pyx_t_2 = (__pyx_v_max_distance_with_match != Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "neuralcoref/document.pyx":783
 *             if debug: print("antecedents", antecedents)
 *             if max_distance_with_match is not None:
 *                 for tok in self.mentions[i].content_words:             # <<<<<<<<<<<<<<
 *                     with_string_match = word_to_mentions.get(tok, None)
 *                     for match_idx in with_string_match:
 */
      __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_self->mentions, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_content_words); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_14 = __pyx_t_1; __Pyx_INCREF(__pyx_t_14); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 783, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_9 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 783, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_14))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_14)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 783, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 783, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_9(__pyx_t_14);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 783, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_v_tok, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "neuralcoref/document.pyx":784
 *             if max_distance_with_match is not None:
 *                 for tok in self.mentions[i].content_words:
 *                     with_string_match = word_to_mentions.get(tok, None)             # <<<<<<<<<<<<<<
 *                     for match_idx in with_string_match:
 *                         if match_idx < i and match_idx >= i - max_distance_with_match:
 */
        if (unlikely(!__pyx_v_word_to_mentions)) { __Pyx_RaiseUnboundLocalError("word_to_mentions"); __PYX_ERR(0, 784, __pyx_L1_error) }
        __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_word_to_mentions, __pyx_v_tok, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_with_string_match, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "neuralcoref/document.pyx":785
 *                 for tok in self.mentions[i].content_words:
 *                     with_string_match = word_to_mentions.get(tok, None)
 *                     for match_idx in with_string_match:             # <<<<<<<<<<<<<<
 *                         if match_idx < i and match_idx >= i - max_distance_with_match:
 *                             antecedents.add(match_idx)
 */
        if (likely(PyList_CheckExact(__pyx_v_with_string_match)) || PyTuple_CheckExact(__pyx_v_with_string_match)) {
          __pyx_t_1 = __pyx_v_with_string_match; __Pyx_INCREF(__pyx_t_1); __pyx_t_15 = 0;
          __pyx_t_16 = NULL;
        } else {
          __pyx_t_15 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_with_string_match); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_16 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 785, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_16)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_10 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_15); __Pyx_INCREF(__pyx_t_10); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 785, __pyx_L1_error)
              #else
              __pyx_t_10 = PySequence_ITEM(__pyx_t_1, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 785, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              #endif
            } else {
              if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_15); __Pyx_INCREF(__pyx_t_10); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 785, __pyx_L1_error)
              #else
              __pyx_t_10 = PySequence_ITEM(__pyx_t_1, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 785, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              #endif
            }
          } else {
            __pyx_t_10 = __pyx_t_16(__pyx_t_1);
            if (unlikely(!__pyx_t_10)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 785, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_10);
          }
          __Pyx_XDECREF_SET(__pyx_v_match_idx, __pyx_t_10);
          __pyx_t_10 = 0;

          /* "neuralcoref/document.pyx":786
 *                     with_string_match = word_to_mentions.get(tok, None)
 *                     for match_idx in with_string_match:
 *                         if match_idx < i and match_idx >= i - max_distance_with_match:             # <<<<<<<<<<<<<<
 *                             antecedents.add(match_idx)
 *             pairs_ant += list(antecedents)
 */
          __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 786, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_7 = PyObject_RichCompare(__pyx_v_match_idx, __pyx_t_10, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 786, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 786, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (__pyx_t_2) {
          } else {
            __pyx_t_3 = __pyx_t_2;
            goto __pyx_L18_bool_binop_done;
          }
          __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 786, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_10 = PyNumber_Subtract(__pyx_t_7, __pyx_v_max_distance_with_match); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 786, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyObject_RichCompare(__pyx_v_match_idx, __pyx_t_10, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 786, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 786, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_3 = __pyx_t_2;
          __pyx_L18_bool_binop_done:;
          if (__pyx_t_3) {

            /* "neuralcoref/document.pyx":787
 *                     for match_idx in with_string_match:
 *                         if match_idx < i and match_idx >= i - max_distance_with_match:
 *                             antecedents.add(match_idx)             # <<<<<<<<<<<<<<
 *             pairs_ant += list(antecedents)
 *             pairs_men += [i]*len(antecedents)
 */
            if (unlikely(__pyx_v_antecedents == Py_None)) {
              PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "add");
              __PYX_ERR(0, 787, __pyx_L1_error)
            }
            __pyx_t_11 = PySet_Add(__pyx_v_antecedents, __pyx_v_match_idx); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 787, __pyx_L1_error)

            /* "neuralcoref/document.pyx":786
 *                     with_string_match = word_to_mentions.get(tok, None)
 *                     for match_idx in with_string_match:
 *                         if match_idx < i and match_idx >= i - max_distance_with_match:             # <<<<<<<<<<<<<<
 *                             antecedents.add(match_idx)
 *             pairs_ant += list(antecedents)
 */
          }

          /* "neuralcoref/document.pyx":785
 *                 for tok in self.mentions[i].content_words:
 *                     with_string_match = word_to_mentions.get(tok, None)
 *                     for match_idx in with_string_match:             # <<<<<<<<<<<<<<
 *                         if match_idx < i and match_idx >= i - max_distance_with_match:
 *                             antecedents.add(match_idx)
 */
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "neuralcoref/document.pyx":783
 *             if debug: print("antecedents", antecedents)
 *             if max_distance_with_match is not None:
 *                 for tok in self.mentions[i].content_words:             # <<<<<<<<<<<<<<
 *                     with_string_match = word_to_mentions.get(tok, None)
 *                     for match_idx in with_string_match:
 */
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "neuralcoref/document.pyx":782
 *             antecedents = set(range(i)) if max_distance is None else set(range(max(0, i - max_distance), i))
 *             if debug: print("antecedents", antecedents)
 *             if max_distance_with_match is not None:             # <<<<<<<<<<<<<<
 *                 for tok in self.mentions[i].content_words:
 *                     with_string_match = word_to_mentions.get(tok, None)
 */
    }

    /* "neuralcoref/document.pyx":788
 *                         if match_idx < i and match_idx >= i - max_distance_with_match:
 *                             antecedents.add(match_idx)
 *             pairs_ant += list(antecedents)             # <<<<<<<<<<<<<<
 *             pairs_men += [i]*len(antecedents)
 *             self.n_pairs += len(antecedents)
 */
    __pyx_t_14 = PySequence_List(__pyx_v_antecedents); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_pairs_ant, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF_SET(__pyx_v_pairs_ant, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":789
 *                             antecedents.add(match_idx)
 *             pairs_ant += list(antecedents)
 *             pairs_men += [i]*len(antecedents)             # <<<<<<<<<<<<<<
 *             self.n_pairs += len(antecedents)
 *         self.pairs_ant = numpy.asarray(pairs_ant, dtype=numpy.uint64)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_antecedents == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 789, __pyx_L1_error)
    }
    __pyx_t_8 = PySet_GET_SIZE(__pyx_v_antecedents); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 789, __pyx_L1_error)
    __pyx_t_14 = PyList_New(1 * ((__pyx_t_8<0) ? 0:__pyx_t_8)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_t_8; __pyx_temp++) {
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_14, __pyx_temp, __pyx_t_1);
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_pairs_men, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF_SET(__pyx_v_pairs_men, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":790
 *             pairs_ant += list(antecedents)
 *             pairs_men += [i]*len(antecedents)
 *             self.n_pairs += len(antecedents)             # <<<<<<<<<<<<<<
 *         self.pairs_ant = numpy.asarray(pairs_ant, dtype=numpy.uint64)
 *         self.pairs_men = numpy.asarray(pairs_men, dtype=numpy.uint64)
 */
    if (unlikely(__pyx_v_antecedents == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 790, __pyx_L1_error)
    }
    __pyx_t_8 = PySet_GET_SIZE(__pyx_v_antecedents); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 790, __pyx_L1_error)
    __pyx_v_self->n_pairs = (__pyx_v_self->n_pairs + __pyx_t_8);
  }

  /* "neuralcoref/document.pyx":791
 *             pairs_men += [i]*len(antecedents)
 *             self.n_pairs += len(antecedents)
 *         self.pairs_ant = numpy.asarray(pairs_ant, dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *         self.pairs_men = numpy.asarray(pairs_men, dtype=numpy.uint64)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_pairs_ant);
  __Pyx_GIVEREF(__pyx_v_pairs_ant);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_pairs_ant);
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_uint64); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_13) < 0) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GIVEREF(__pyx_t_13);
  __Pyx_GOTREF(__pyx_v_self->pairs_ant);
  __Pyx_DECREF(__pyx_v_self->pairs_ant);
  __pyx_v_self->pairs_ant = __pyx_t_13;
  __pyx_t_13 = 0;

  /* "neuralcoref/document.pyx":792
 *             self.n_pairs += len(antecedents)
 *         self.pairs_ant = numpy.asarray(pairs_ant, dtype=numpy.uint64)
 *         self.pairs_men = numpy.asarray(pairs_men, dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 * 
 * def mention_detection_debug(sentence):
 */
  __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_asarray); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_v_pairs_men);
  __Pyx_GIVEREF(__pyx_v_pairs_men);
  PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_pairs_men);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_uint64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_13, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->pairs_men);
  __Pyx_DECREF(__pyx_v_self->pairs_men);
  __pyx_v_self->pairs_men = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "neuralcoref/document.pyx":758
 *     ###################################
 * 
 *     def set_candidate_pairs(self, max_distance=50, max_distance_with_match=500, debug=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Yield tuples of mentions, dictionnary of candidate antecedents for the mention
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("neuralcoref.document.Document.set_candidate_pairs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pairs_ant);
  __Pyx_XDECREF(__pyx_v_pairs_men);
  __Pyx_XDECREF(__pyx_v_word_to_mentions);
  __Pyx_XDECREF(__pyx_v_tok);
  __Pyx_XDECREF(__pyx_v_antecedents);
  __Pyx_XDECREF(__pyx_v_with_string_match);
  __Pyx_XDECREF(__pyx_v_match_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":64
 * 
 * cdef class Document:
 *     cdef readonly object nlp             # <<<<<<<<<<<<<<
 *     cdef readonly bint use_no_coref_list
 *     cdef readonly bint debug
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_3nlp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_3nlp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_3nlp___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_3nlp___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 64, 0, __PYX_ERR(2, 64, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->nlp);
  __pyx_r = __pyx_v_self->nlp;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.nlp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":65
 * cdef class Document:
 *     cdef readonly object nlp
 *     cdef readonly bint use_no_coref_list             # <<<<<<<<<<<<<<
 *     cdef readonly bint debug
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_17use_no_coref_list_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_17use_no_coref_list_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_17use_no_coref_list___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_17use_no_coref_list___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 65, 0, __PYX_ERR(2, 65, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->use_no_coref_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Document.use_no_coref_list.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":66
 *     cdef readonly object nlp
 *     cdef readonly bint use_no_coref_list
 *     cdef readonly bint debug             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly object utterances
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_5debug_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_5debug_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_5debug___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_5debug___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 66, 0, __PYX_ERR(2, 66, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->debug); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Document.debug.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":68
 *     cdef readonly bint debug
 * 
 *     cdef readonly object utterances             # <<<<<<<<<<<<<<
 *     cdef readonly object mentions
 *     cdef readonly int n_sents
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_10utterances_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_10utterances_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_10utterances___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_10utterances___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 68, 0, __PYX_ERR(2, 68, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->utterances);
  __pyx_r = __pyx_v_self->utterances;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.utterances.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":69
 * 
 *     cdef readonly object utterances
 *     cdef readonly object mentions             # <<<<<<<<<<<<<<
 *     cdef readonly int n_sents
 *     cdef readonly int n_mentions
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_8mentions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_8mentions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_8mentions___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_8mentions___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 69, 0, __PYX_ERR(2, 69, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->mentions);
  __pyx_r = __pyx_v_self->mentions;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.mentions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":70
 *     cdef readonly object utterances
 *     cdef readonly object mentions
 *     cdef readonly int n_sents             # <<<<<<<<<<<<<<
 *     cdef readonly int n_mentions
 *     cdef readonly int n_pairs
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_7n_sents_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_7n_sents_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_7n_sents___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_7n_sents___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 70, 0, __PYX_ERR(2, 70, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->n_sents); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Document.n_sents.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":71
 *     cdef readonly object mentions
 *     cdef readonly int n_sents
 *     cdef readonly int n_mentions             # <<<<<<<<<<<<<<
 *     cdef readonly int n_pairs
 *     cdef readonly object pairs_ant
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_10n_mentions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_10n_mentions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_10n_mentions___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_10n_mentions___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 71, 0, __PYX_ERR(2, 71, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->n_mentions); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Document.n_mentions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":72
 *     cdef readonly int n_sents
 *     cdef readonly int n_mentions
 *     cdef readonly int n_pairs             # <<<<<<<<<<<<<<
 *     cdef readonly object pairs_ant
 *     cdef readonly object pairs_men
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_7n_pairs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_7n_pairs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_7n_pairs___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_7n_pairs___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 72, 0, __PYX_ERR(2, 72, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->n_pairs); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Document.n_pairs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":73
 *     cdef readonly int n_mentions
 *     cdef readonly int n_pairs
 *     cdef readonly object pairs_ant             # <<<<<<<<<<<<<<
 *     cdef readonly object pairs_men
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_9pairs_ant_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_9pairs_ant_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_9pairs_ant___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_9pairs_ant___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 73, 0, __PYX_ERR(2, 73, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->pairs_ant);
  __pyx_r = __pyx_v_self->pairs_ant;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.pairs_ant.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":74
 *     cdef readonly int n_pairs
 *     cdef readonly object pairs_ant
 *     cdef readonly object pairs_men             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly object genre_
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_9pairs_men_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_9pairs_men_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_9pairs_men___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_9pairs_men___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 74, 0, __PYX_ERR(2, 74, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->pairs_men);
  __pyx_r = __pyx_v_self->pairs_men;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.pairs_men.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":76
 *     cdef readonly object pairs_men
 * 
 *     cdef readonly object genre_             # <<<<<<<<<<<<<<
 *     cdef readonly object genre
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_6genre__1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_6genre__1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_6genre____get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_6genre____get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 76, 0, __PYX_ERR(2, 76, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->genre_);
  __pyx_r = __pyx_v_self->genre_;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.genre_.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":77
 * 
 *     cdef readonly object genre_
 *     cdef readonly object genre             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly object embed_extractor
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_5genre_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_5genre_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_5genre___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_5genre___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 77, 0, __PYX_ERR(2, 77, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->genre);
  __pyx_r = __pyx_v_self->genre;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.genre.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pxd":79
 *     cdef readonly object genre
 * 
 *     cdef readonly object embed_extractor             # <<<<<<<<<<<<<<
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_15embed_extractor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_15embed_extractor_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_15embed_extractor___get__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_15embed_extractor___get__(struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 79, 0, __PYX_ERR(2, 79, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->embed_extractor);
  __pyx_r = __pyx_v_self->embed_extractor;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuralcoref.document.Document.embed_extractor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_30__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_30__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_29__reduce_cython__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_29__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Document.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_32__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11neuralcoref_8document_8Document_32__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_8Document_31__setstate_cython__(((struct __pyx_obj_11neuralcoref_8document_Document *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_8Document_31__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11neuralcoref_8document_Document *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuralcoref.document.Document.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuralcoref/document.pyx":794
 *         self.pairs_men = numpy.asarray(pairs_men, dtype=numpy.uint64)
 * 
 * def mention_detection_debug(sentence):             # <<<<<<<<<<<<<<
 *     print(u" Loading spacy model")
 *     try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_11neuralcoref_8document_1mention_detection_debug(PyObject *__pyx_self, PyObject *__pyx_v_sentence); /*proto*/
static PyMethodDef __pyx_mdef_11neuralcoref_8document_1mention_detection_debug = {"mention_detection_debug", (PyCFunction)__pyx_pw_11neuralcoref_8document_1mention_detection_debug, METH_O, 0};
static PyObject *__pyx_pw_11neuralcoref_8document_1mention_detection_debug(PyObject *__pyx_self, PyObject *__pyx_v_sentence) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mention_detection_debug (wrapper)", 0);
  __pyx_r = __pyx_pf_11neuralcoref_8document_mention_detection_debug(__pyx_self, ((PyObject *)__pyx_v_sentence));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11neuralcoref_8document_mention_detection_debug(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence) {
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_nlp = NULL;
  PyObject *__pyx_v_doc = NULL;
  PyObject *__pyx_v_mentions = NULL;
  PyObject *__pyx_v_mention = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  struct __pyx_opt_args_11neuralcoref_8document_extract_mentions_spans __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  __Pyx_TraceFrameInit(__pyx_codeobj__58)
  __Pyx_RefNannySetupContext("mention_detection_debug", 0);
  __Pyx_TraceCall("mention_detection_debug", __pyx_f[0], 794, 0, __PYX_ERR(0, 794, __pyx_L1_error));

  /* "neuralcoref/document.pyx":795
 * 
 * def mention_detection_debug(sentence):
 *     print(u" Loading spacy model")             # <<<<<<<<<<<<<<
 *     try:
 *         spacy.info('en_core_web_sm')
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":796
 * def mention_detection_debug(sentence):
 *     print(u" Loading spacy model")
 *     try:             # <<<<<<<<<<<<<<
 *         spacy.info('en_core_web_sm')
 *         model = 'en_core_web_sm'
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "neuralcoref/document.pyx":797
 *     print(u" Loading spacy model")
 *     try:
 *         spacy.info('en_core_web_sm')             # <<<<<<<<<<<<<<
 *         model = 'en_core_web_sm'
 *     except IOError:
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_spacy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 797, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "neuralcoref/document.pyx":798
 *     try:
 *         spacy.info('en_core_web_sm')
 *         model = 'en_core_web_sm'             # <<<<<<<<<<<<<<
 *     except IOError:
 *         print("No spacy 2 model detected, using spacy1 'en' model")
 */
      __Pyx_INCREF(__pyx_n_u_en_core_web_sm);
      __pyx_v_model = __pyx_n_u_en_core_web_sm;

      /* "neuralcoref/document.pyx":796
 * def mention_detection_debug(sentence):
 *     print(u" Loading spacy model")
 *     try:             # <<<<<<<<<<<<<<
 *         spacy.info('en_core_web_sm')
 *         model = 'en_core_web_sm'
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":799
 *         spacy.info('en_core_web_sm')
 *         model = 'en_core_web_sm'
 *     except IOError:             # <<<<<<<<<<<<<<
 *         print("No spacy 2 model detected, using spacy1 'en' model")
 *         spacy.info('en')
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("neuralcoref.document.mention_detection_debug", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_7) < 0) __PYX_ERR(0, 799, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_7);

      /* "neuralcoref/document.pyx":800
 *         model = 'en_core_web_sm'
 *     except IOError:
 *         print("No spacy 2 model detected, using spacy1 'en' model")             # <<<<<<<<<<<<<<
 *         spacy.info('en')
 *         model = 'en'
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 800, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "neuralcoref/document.pyx":801
 *     except IOError:
 *         print("No spacy 2 model detected, using spacy1 'en' model")
 *         spacy.info('en')             # <<<<<<<<<<<<<<
 *         model = 'en'
 *     nlp = spacy.load(model)
 */
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_spacy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 801, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 801, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 801, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "neuralcoref/document.pyx":802
 *         print("No spacy 2 model detected, using spacy1 'en' model")
 *         spacy.info('en')
 *         model = 'en'             # <<<<<<<<<<<<<<
 *     nlp = spacy.load(model)
 *     doc = nlp(sentence.decode('utf-8'))
 */
      __Pyx_INCREF(__pyx_n_u_en);
      __Pyx_XDECREF_SET(__pyx_v_model, __pyx_n_u_en);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "neuralcoref/document.pyx":796
 * def mention_detection_debug(sentence):
 *     print(u" Loading spacy model")
 *     try:             # <<<<<<<<<<<<<<
 *         spacy.info('en_core_web_sm')
 *         model = 'en_core_web_sm'
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    __pyx_L8_try_end:;
  }

  /* "neuralcoref/document.pyx":803
 *         spacy.info('en')
 *         model = 'en'
 *     nlp = spacy.load(model)             # <<<<<<<<<<<<<<
 *     doc = nlp(sentence.decode('utf-8'))
 *     mentions = extract_mentions_spans(doc, use_no_coref_list=False, debug=True)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_spacy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_load); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_model); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_model};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_model};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_model);
      __Pyx_GIVEREF(__pyx_v_model);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_model);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nlp = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":804
 *         model = 'en'
 *     nlp = spacy.load(model)
 *     doc = nlp(sentence.decode('utf-8'))             # <<<<<<<<<<<<<<
 *     mentions = extract_mentions_spans(doc, use_no_coref_list=False, debug=True)
 *     for mention in mentions:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sentence, __pyx_n_s_decode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_v_nlp);
  __pyx_t_1 = __pyx_v_nlp; __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_8};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_8};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_doc = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":805
 *     nlp = spacy.load(model)
 *     doc = nlp(sentence.decode('utf-8'))
 *     mentions = extract_mentions_spans(doc, use_no_coref_list=False, debug=True)             # <<<<<<<<<<<<<<
 *     for mention in mentions:
 *         print(mention)
 */
  if (!(likely(((__pyx_v_doc) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_doc, __pyx_ptype_5spacy_6tokens_3doc_Doc))))) __PYX_ERR(0, 805, __pyx_L1_error)
  __pyx_t_10.__pyx_n = 2;
  __pyx_t_10.use_no_coref_list = 0;
  __pyx_t_10.debug = 1;
  __pyx_t_7 = __pyx_f_11neuralcoref_8document_extract_mentions_spans(((struct __pyx_obj_5spacy_6tokens_3doc_Doc *)__pyx_v_doc), &__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v_mentions = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":806
 *     doc = nlp(sentence.decode('utf-8'))
 *     mentions = extract_mentions_spans(doc, use_no_coref_list=False, debug=True)
 *     for mention in mentions:             # <<<<<<<<<<<<<<
 *         print(mention)
 */
  if (likely(PyList_CheckExact(__pyx_v_mentions)) || PyTuple_CheckExact(__pyx_v_mentions)) {
    __pyx_t_7 = __pyx_v_mentions; __Pyx_INCREF(__pyx_t_7); __pyx_t_11 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_11 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_mentions); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 806, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_12)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_11); __Pyx_INCREF(__pyx_t_1); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 806, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_11); __Pyx_INCREF(__pyx_t_1); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 806, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_12(__pyx_t_7);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 806, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_mention, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":807
 *     mentions = extract_mentions_spans(doc, use_no_coref_list=False, debug=True)
 *     for mention in mentions:
 *         print(mention)             # <<<<<<<<<<<<<<
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_v_mention); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":806
 *     doc = nlp(sentence.decode('utf-8'))
 *     mentions = extract_mentions_spans(doc, use_no_coref_list=False, debug=True)
 *     for mention in mentions:             # <<<<<<<<<<<<<<
 *         print(mention)
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":794
 *         self.pairs_men = numpy.asarray(pairs_men, dtype=numpy.uint64)
 * 
 * def mention_detection_debug(sentence):             # <<<<<<<<<<<<<<
 *     print(u" Loading spacy model")
 *     try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuralcoref.document.mention_detection_debug", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_nlp);
  __Pyx_XDECREF(__pyx_v_doc);
  __Pyx_XDECREF(__pyx_v_mentions);
  __Pyx_XDECREF(__pyx_v_mention);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);
  __Pyx_TraceCall("__getbuffer__", __pyx_f[3], 215, 0, __PYX_ERR(3, 215, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":223
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":225
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 229, __pyx_L1_error)

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":232
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 233, __pyx_L1_error)

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":236
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":240
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":241
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":242
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":244
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":247
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":249
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":253
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":254
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":260
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(3, 263, __pyx_L1_error)

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(3, 282, __pyx_L1_error)
      break;
    }

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_8 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_8 == ((char *)NULL))) __PYX_ERR(3, 289, __pyx_L1_error)
    __pyx_v_f = __pyx_t_8;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);
  __Pyx_TraceCall("__releasebuffer__", __pyx_f[3], 294, 0, __PYX_ERR(3, 294, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":295
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":296
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":295
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":298
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.ndarray.__releasebuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew1", __pyx_f[3], 775, 0, __PYX_ERR(3, 775, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew2", __pyx_f[3], 778, 0, __PYX_ERR(3, 778, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":781
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew3", __pyx_f[3], 781, 0, __PYX_ERR(3, 781, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":782
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":781
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew4", __pyx_f[3], 784, 0, __PYX_ERR(3, 784, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":787
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew5", __pyx_f[3], 787, 0, __PYX_ERR(3, 787, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":787
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);
  __Pyx_TraceCall("PyDataType_SHAPE", __pyx_f[3], 790, 0, __PYX_ERR(3, 790, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":792
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.PyDataType_SHAPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);
  __Pyx_TraceCall("_util_dtypestring", __pyx_f[3], 796, 0, __PYX_ERR(3, 796, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":802
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 805, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 805, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(3, 806, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(3, 806, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":807
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(3, 807, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(3, 807, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(3, 807, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 809, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(3, 810, __pyx_L1_error)

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 814, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(3, 814, __pyx_L1_error)

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":824
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":832
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 834, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(3, 834, __pyx_L1_error)

        /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":843
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 843, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 843, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 844, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 844, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 845, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 845, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 855, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 855, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(3, 855, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":856
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(3, 860, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":861
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);
  __Pyx_TraceCall("set_array_base", __pyx_f[3], 977, 0, __PYX_ERR(3, 977, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":979
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":979
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":982
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":983
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":984
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":985
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":987
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);
  __Pyx_TraceCall("get_array_base", __pyx_f[3], 987, 0, __PYX_ERR(3, 987, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":988
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":989
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":988
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":987
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.get_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":996
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);
  __Pyx_TraceCall("import_array", __pyx_f[3], 996, 0, __PYX_ERR(3, 996, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 998, __pyx_L3_error)

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":999
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 999, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 1000, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":996
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);
  __Pyx_TraceCall("import_umath", __pyx_f[3], 1002, 0, __PYX_ERR(3, 1002, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1004
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1004, __pyx_L3_error)

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1005
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1005, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1006
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1006, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 1006, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);
  __Pyx_TraceCall("import_ufunc", __pyx_f[3], 1008, 0, __PYX_ERR(3, 1008, __pyx_L1_error));

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1010, __pyx_L3_error)

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1011
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1011, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1012, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 1012, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_11neuralcoref_8document_Mention __pyx_vtable_11neuralcoref_8document_Mention;

static PyObject *__pyx_tp_new_11neuralcoref_8document_Mention(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_11neuralcoref_8document_Mention *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11neuralcoref_8document_Mention *)o);
  p->__pyx_vtab = __pyx_vtabptr_11neuralcoref_8document_Mention;
  p->span = ((struct __pyx_obj_5spacy_6tokens_4span_Span *)Py_None); Py_INCREF(Py_None);
  p->propers = Py_None; Py_INCREF(Py_None);
  p->spans_embeddings = Py_None; Py_INCREF(Py_None);
  p->words_embeddings = Py_None; Py_INCREF(Py_None);
  p->embeddings = Py_None; Py_INCREF(Py_None);
  p->features = Py_None; Py_INCREF(Py_None);
  p->spans_embeddings_ = Py_None; Py_INCREF(Py_None);
  p->words_embeddings_ = Py_None; Py_INCREF(Py_None);
  p->features_ = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_11neuralcoref_8document_7Mention_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11neuralcoref_8document_Mention(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document_Mention *p = (struct __pyx_obj_11neuralcoref_8document_Mention *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->span);
  Py_CLEAR(p->propers);
  Py_CLEAR(p->spans_embeddings);
  Py_CLEAR(p->words_embeddings);
  Py_CLEAR(p->embeddings);
  Py_CLEAR(p->features);
  Py_CLEAR(p->spans_embeddings_);
  Py_CLEAR(p->words_embeddings_);
  Py_CLEAR(p->features_);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_11neuralcoref_8document_Mention(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document_Mention *p = (struct __pyx_obj_11neuralcoref_8document_Mention *)o;
  if (p->span) {
    e = (*v)(((PyObject *)p->span), a); if (e) return e;
  }
  if (p->propers) {
    e = (*v)(p->propers, a); if (e) return e;
  }
  if (p->spans_embeddings) {
    e = (*v)(p->spans_embeddings, a); if (e) return e;
  }
  if (p->words_embeddings) {
    e = (*v)(p->words_embeddings, a); if (e) return e;
  }
  if (p->embeddings) {
    e = (*v)(p->embeddings, a); if (e) return e;
  }
  if (p->features) {
    e = (*v)(p->features, a); if (e) return e;
  }
  if (p->spans_embeddings_) {
    e = (*v)(p->spans_embeddings_, a); if (e) return e;
  }
  if (p->words_embeddings_) {
    e = (*v)(p->words_embeddings_, a); if (e) return e;
  }
  if (p->features_) {
    e = (*v)(p->features_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11neuralcoref_8document_Mention(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11neuralcoref_8document_Mention *p = (struct __pyx_obj_11neuralcoref_8document_Mention *)o;
  tmp = ((PyObject*)p->span);
  p->span = ((struct __pyx_obj_5spacy_6tokens_4span_Span *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->propers);
  p->propers = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->spans_embeddings);
  p->spans_embeddings = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->words_embeddings);
  p->words_embeddings = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->embeddings);
  p->embeddings = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->features);
  p->features = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->spans_embeddings_);
  p->spans_embeddings_ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->words_embeddings_);
  p->words_embeddings_ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->features_);
  p->features_ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_11neuralcoref_8document_Mention(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_content_words(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_13content_words_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_span(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_4span_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_entity_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_12entity_label_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_in_ent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_6in_ent_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_5index_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_utterance_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_15utterance_index_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_utterances_sent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_15utterances_sent_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_mention_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_12mention_type_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_propers(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_7propers_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_spans_embeddings(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_16spans_embeddings_1__get__(o);
}

static int __pyx_setprop_11neuralcoref_8document_7Mention_spans_embeddings(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_11neuralcoref_8document_7Mention_16spans_embeddings_3__set__(o, v);
  }
  else {
    return __pyx_pw_11neuralcoref_8document_7Mention_16spans_embeddings_5__del__(o);
  }
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_words_embeddings(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_16words_embeddings_1__get__(o);
}

static int __pyx_setprop_11neuralcoref_8document_7Mention_words_embeddings(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_11neuralcoref_8document_7Mention_16words_embeddings_3__set__(o, v);
  }
  else {
    return __pyx_pw_11neuralcoref_8document_7Mention_16words_embeddings_5__del__(o);
  }
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_embeddings(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_10embeddings_1__get__(o);
}

static int __pyx_setprop_11neuralcoref_8document_7Mention_embeddings(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_11neuralcoref_8document_7Mention_10embeddings_3__set__(o, v);
  }
  else {
    return __pyx_pw_11neuralcoref_8document_7Mention_10embeddings_5__del__(o);
  }
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_features(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_8features_1__get__(o);
}

static int __pyx_setprop_11neuralcoref_8document_7Mention_features(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_11neuralcoref_8document_7Mention_8features_3__set__(o, v);
  }
  else {
    return __pyx_pw_11neuralcoref_8document_7Mention_8features_5__del__(o);
  }
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_spans_embeddings_(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_17spans_embeddings__1__get__(o);
}

static int __pyx_setprop_11neuralcoref_8document_7Mention_spans_embeddings_(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_11neuralcoref_8document_7Mention_17spans_embeddings__3__set__(o, v);
  }
  else {
    return __pyx_pw_11neuralcoref_8document_7Mention_17spans_embeddings__5__del__(o);
  }
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_words_embeddings_(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_17words_embeddings__1__get__(o);
}

static int __pyx_setprop_11neuralcoref_8document_7Mention_words_embeddings_(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_11neuralcoref_8document_7Mention_17words_embeddings__3__set__(o, v);
  }
  else {
    return __pyx_pw_11neuralcoref_8document_7Mention_17words_embeddings__5__del__(o);
  }
}

static PyObject *__pyx_getprop_11neuralcoref_8document_7Mention_features_(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_7Mention_9features__1__get__(o);
}

static int __pyx_setprop_11neuralcoref_8document_7Mention_features_(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_11neuralcoref_8document_7Mention_9features__3__set__(o, v);
  }
  else {
    return __pyx_pw_11neuralcoref_8document_7Mention_9features__5__del__(o);
  }
}

static PyMethodDef __pyx_methods_11neuralcoref_8document_Mention[] = {
  {"heads_agree", (PyCFunction)__pyx_pw_11neuralcoref_8document_7Mention_11heads_agree, METH_O, __pyx_doc_11neuralcoref_8document_7Mention_10heads_agree},
  {"exact_match", (PyCFunction)__pyx_pw_11neuralcoref_8document_7Mention_13exact_match, METH_O, __pyx_doc_11neuralcoref_8document_7Mention_12exact_match},
  {"relaxed_match", (PyCFunction)__pyx_pw_11neuralcoref_8document_7Mention_15relaxed_match, METH_O, __pyx_doc_11neuralcoref_8document_7Mention_14relaxed_match},
  {"overlapping", (PyCFunction)__pyx_pw_11neuralcoref_8document_7Mention_17overlapping, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11neuralcoref_8document_7Mention_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11neuralcoref_8document_7Mention_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11neuralcoref_8document_Mention[] = {
  {(char *)"content_words", __pyx_getprop_11neuralcoref_8document_7Mention_content_words, 0, (char *)" Returns an iterator of nouns/proper nouns in the Mention ", 0},
  {(char *)"span", __pyx_getprop_11neuralcoref_8document_7Mention_span, 0, (char *)0, 0},
  {(char *)"entity_label", __pyx_getprop_11neuralcoref_8document_7Mention_entity_label, 0, (char *)0, 0},
  {(char *)"in_ent", __pyx_getprop_11neuralcoref_8document_7Mention_in_ent, 0, (char *)0, 0},
  {(char *)"index", __pyx_getprop_11neuralcoref_8document_7Mention_index, 0, (char *)0, 0},
  {(char *)"utterance_index", __pyx_getprop_11neuralcoref_8document_7Mention_utterance_index, 0, (char *)0, 0},
  {(char *)"utterances_sent", __pyx_getprop_11neuralcoref_8document_7Mention_utterances_sent, 0, (char *)0, 0},
  {(char *)"mention_type", __pyx_getprop_11neuralcoref_8document_7Mention_mention_type, 0, (char *)0, 0},
  {(char *)"propers", __pyx_getprop_11neuralcoref_8document_7Mention_propers, 0, (char *)0, 0},
  {(char *)"spans_embeddings", __pyx_getprop_11neuralcoref_8document_7Mention_spans_embeddings, __pyx_setprop_11neuralcoref_8document_7Mention_spans_embeddings, (char *)0, 0},
  {(char *)"words_embeddings", __pyx_getprop_11neuralcoref_8document_7Mention_words_embeddings, __pyx_setprop_11neuralcoref_8document_7Mention_words_embeddings, (char *)0, 0},
  {(char *)"embeddings", __pyx_getprop_11neuralcoref_8document_7Mention_embeddings, __pyx_setprop_11neuralcoref_8document_7Mention_embeddings, (char *)0, 0},
  {(char *)"features", __pyx_getprop_11neuralcoref_8document_7Mention_features, __pyx_setprop_11neuralcoref_8document_7Mention_features, (char *)0, 0},
  {(char *)"spans_embeddings_", __pyx_getprop_11neuralcoref_8document_7Mention_spans_embeddings_, __pyx_setprop_11neuralcoref_8document_7Mention_spans_embeddings_, (char *)0, 0},
  {(char *)"words_embeddings_", __pyx_getprop_11neuralcoref_8document_7Mention_words_embeddings_, __pyx_setprop_11neuralcoref_8document_7Mention_words_embeddings_, (char *)0, 0},
  {(char *)"features_", __pyx_getprop_11neuralcoref_8document_7Mention_features_, __pyx_setprop_11neuralcoref_8document_7Mention_features_, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Mention = {
  __pyx_pw_11neuralcoref_8document_7Mention_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_11neuralcoref_8document_Mention, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_11neuralcoref_8document_7Mention_9__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Mention = {
  __pyx_pw_11neuralcoref_8document_7Mention_5__len__, /*mp_length*/
  __pyx_pw_11neuralcoref_8document_7Mention_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_11neuralcoref_8document_Mention = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.Mention", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document_Mention), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document_Mention, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_11neuralcoref_8document_7Mention_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Mention, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Mention, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    A mention (possible anaphor) comprise a spacy Span class with additional informations\n    ", /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document_Mention, /*tp_traverse*/
  __pyx_tp_clear_11neuralcoref_8document_Mention, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11neuralcoref_8document_Mention, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11neuralcoref_8document_Mention, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document_Mention, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11neuralcoref_8document_Document(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_11neuralcoref_8document_Document *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11neuralcoref_8document_Document *)o);
  p->nlp = Py_None; Py_INCREF(Py_None);
  p->utterances = Py_None; Py_INCREF(Py_None);
  p->mentions = Py_None; Py_INCREF(Py_None);
  p->pairs_ant = Py_None; Py_INCREF(Py_None);
  p->pairs_men = Py_None; Py_INCREF(Py_None);
  p->genre_ = Py_None; Py_INCREF(Py_None);
  p->genre = Py_None; Py_INCREF(Py_None);
  p->embed_extractor = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_11neuralcoref_8document_8Document_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11neuralcoref_8document_Document(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document_Document *p = (struct __pyx_obj_11neuralcoref_8document_Document *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->nlp);
  Py_CLEAR(p->utterances);
  Py_CLEAR(p->mentions);
  Py_CLEAR(p->pairs_ant);
  Py_CLEAR(p->pairs_men);
  Py_CLEAR(p->genre_);
  Py_CLEAR(p->genre);
  Py_CLEAR(p->embed_extractor);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_11neuralcoref_8document_Document(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document_Document *p = (struct __pyx_obj_11neuralcoref_8document_Document *)o;
  if (p->nlp) {
    e = (*v)(p->nlp, a); if (e) return e;
  }
  if (p->utterances) {
    e = (*v)(p->utterances, a); if (e) return e;
  }
  if (p->mentions) {
    e = (*v)(p->mentions, a); if (e) return e;
  }
  if (p->pairs_ant) {
    e = (*v)(p->pairs_ant, a); if (e) return e;
  }
  if (p->pairs_men) {
    e = (*v)(p->pairs_men, a); if (e) return e;
  }
  if (p->genre_) {
    e = (*v)(p->genre_, a); if (e) return e;
  }
  if (p->genre) {
    e = (*v)(p->genre, a); if (e) return e;
  }
  if (p->embed_extractor) {
    e = (*v)(p->embed_extractor, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11neuralcoref_8document_Document(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11neuralcoref_8document_Document *p = (struct __pyx_obj_11neuralcoref_8document_Document *)o;
  tmp = ((PyObject*)p->nlp);
  p->nlp = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->utterances);
  p->utterances = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->mentions);
  p->mentions = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->pairs_ant);
  p->pairs_ant = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->pairs_men);
  p->pairs_men = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->genre_);
  p->genre_ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->genre);
  p->genre = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->embed_extractor);
  p->embed_extractor = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_11neuralcoref_8document_Document(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_nlp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_3nlp_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_use_no_coref_list(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_17use_no_coref_list_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_debug(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_5debug_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_utterances(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_10utterances_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_mentions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_8mentions_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_n_sents(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_7n_sents_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_n_mentions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_10n_mentions_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_n_pairs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_7n_pairs_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_pairs_ant(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_9pairs_ant_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_pairs_men(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_9pairs_men_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_genre_(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_6genre__1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_genre(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_5genre_1__get__(o);
}

static PyObject *__pyx_getprop_11neuralcoref_8document_8Document_embed_extractor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11neuralcoref_8document_8Document_15embed_extractor_1__get__(o);
}

static PyMethodDef __pyx_methods_11neuralcoref_8document_Document[] = {
  {"set_genre", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_3set_genre, METH_O, 0},
  {"set_utterances", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_14set_utterances, METH_O, 0},
  {"add_utterances", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_16add_utterances, METH_O, __pyx_doc_11neuralcoref_8document_8Document_15add_utterances},
  {"_process_mentions", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_18_process_mentions, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11neuralcoref_8document_8Document_17_process_mentions},
  {"set_mentions_features", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_20set_mentions_features, METH_NOARGS, __pyx_doc_11neuralcoref_8document_8Document_19set_mentions_features},
  {"get_single_mention_features", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_22get_single_mention_features, METH_O, __pyx_doc_11neuralcoref_8document_8Document_21get_single_mention_features},
  {"get_raw_pair_features", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_24get_raw_pair_features, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11neuralcoref_8document_8Document_23get_raw_pair_features},
  {"get_pair_mentions_features", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_26get_pair_mentions_features, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_candidate_pairs", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_28set_candidate_pairs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11neuralcoref_8document_8Document_27set_candidate_pairs},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_30__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11neuralcoref_8document_8Document_32__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11neuralcoref_8document_Document[] = {
  {(char *)"nlp", __pyx_getprop_11neuralcoref_8document_8Document_nlp, 0, (char *)0, 0},
  {(char *)"use_no_coref_list", __pyx_getprop_11neuralcoref_8document_8Document_use_no_coref_list, 0, (char *)0, 0},
  {(char *)"debug", __pyx_getprop_11neuralcoref_8document_8Document_debug, 0, (char *)0, 0},
  {(char *)"utterances", __pyx_getprop_11neuralcoref_8document_8Document_utterances, 0, (char *)0, 0},
  {(char *)"mentions", __pyx_getprop_11neuralcoref_8document_8Document_mentions, 0, (char *)0, 0},
  {(char *)"n_sents", __pyx_getprop_11neuralcoref_8document_8Document_n_sents, 0, (char *)0, 0},
  {(char *)"n_mentions", __pyx_getprop_11neuralcoref_8document_8Document_n_mentions, 0, (char *)0, 0},
  {(char *)"n_pairs", __pyx_getprop_11neuralcoref_8document_8Document_n_pairs, 0, (char *)0, 0},
  {(char *)"pairs_ant", __pyx_getprop_11neuralcoref_8document_8Document_pairs_ant, 0, (char *)0, 0},
  {(char *)"pairs_men", __pyx_getprop_11neuralcoref_8document_8Document_pairs_men, 0, (char *)0, 0},
  {(char *)"genre_", __pyx_getprop_11neuralcoref_8document_8Document_genre_, 0, (char *)0, 0},
  {(char *)"genre", __pyx_getprop_11neuralcoref_8document_8Document_genre, 0, (char *)0, 0},
  {(char *)"embed_extractor", __pyx_getprop_11neuralcoref_8document_8Document_embed_extractor, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Document = {
  __pyx_pw_11neuralcoref_8document_8Document_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_11neuralcoref_8document_Document, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Document = {
  __pyx_pw_11neuralcoref_8document_8Document_7__len__, /*mp_length*/
  __pyx_pw_11neuralcoref_8document_8Document_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_11neuralcoref_8document_Document = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.Document", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document_Document), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document_Document, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Document, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Document, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_11neuralcoref_8document_8Document_5__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Main data class: encapsulate list of utterances, mentions\n    Process utterances to extract mentions and pre-compute mentions features\n    ", /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document_Document, /*tp_traverse*/
  __pyx_tp_clear_11neuralcoref_8document_Document, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_11neuralcoref_8document_8Document_11__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11neuralcoref_8document_Document, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11neuralcoref_8document_Document, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document_Document, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_store);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *)o;
  if (p->__pyx_v_store) {
    e = (*v)(((PyObject *)p->__pyx_v_store), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups *)o;
  tmp = ((PyObject*)p->__pyx_v_store);
  p->__pyx_v_store = ((struct __pyx_obj_5spacy_7strings_StringStore *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups, /*tp_traverse*/
  __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_1_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_st);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_1_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_st) {
    e = (*v)(p->__pyx_v_st, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_2_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_2_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_2_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_2_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_2_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_2_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_st);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_2_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_2_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_st) {
    e = (*v)(p->__pyx_v_st, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_2_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_2_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_2_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_2_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_2_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_2_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_3_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_st);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_3_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_st) {
    e = (*v)(p->__pyx_v_st, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_4_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_st);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_4_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_st) {
    e = (*v)(p->__pyx_v_st, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_5_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_5_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_5_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_5_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_st);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_5_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_5_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_st) {
    e = (*v)(p->__pyx_v_st, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_6_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_6_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_st);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_6_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_6_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_7_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_7_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_7_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_7_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_7_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_7_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_7_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_st);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_7_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_7_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_7_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_7_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_7_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_7_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_7_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_7_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_7_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_7_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_8_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_8_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_8_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_8_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_8_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_8_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_8_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_st);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_8_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_8_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_8_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_8_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_st) {
    e = (*v)(p->__pyx_v_st, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_8_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_8_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_8_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_8_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_8_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_8_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_9_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_9_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_9_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_9_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_9_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_9_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_9_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_st);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_9_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_9_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_9_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_9_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_st) {
    e = (*v)(p->__pyx_v_st, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_9_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_9_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_9_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_9_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_9_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_9_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_store);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *)o;
  if (p->__pyx_v_store) {
    e = (*v)(((PyObject *)p->__pyx_v_store), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span *)o;
  tmp = ((PyObject*)p->__pyx_v_store);
  p->__pyx_v_store = ((struct __pyx_obj_5spacy_7strings_StringStore *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span, /*tp_traverse*/
  __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_11_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_11_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_11_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_11_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_11_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_11_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_11_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_11_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_11_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_11_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_11_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_11_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_11_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_11_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_11_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_11_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_11_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_12_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_12_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_12_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_12_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_12_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_12_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_12_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_12_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_12_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_12_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_12_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_12_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_12_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_12_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_12_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_12_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_12_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_doc);
  Py_CLEAR(p->__pyx_v_mentions_spans);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *)o;
  if (p->__pyx_v_doc) {
    e = (*v)(((PyObject *)p->__pyx_v_doc), a); if (e) return e;
  }
  if (p->__pyx_v_mentions_spans) {
    e = (*v)(p->__pyx_v_mentions_spans, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans *)o;
  tmp = ((PyObject*)p->__pyx_v_doc);
  p->__pyx_v_doc = ((struct __pyx_obj_5spacy_6tokens_3doc_Doc *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_mentions_spans);
  p->__pyx_v_mentions_spans = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans, /*tp_traverse*/
  __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_14_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_14_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_14_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_14_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_14_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_14_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_14_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_ent);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_14_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_14_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_14_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_14_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_ent) {
    e = (*v)(p->__pyx_v_ent, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_14_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_14_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_14_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_14_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_14_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_14_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_15_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_15_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_15_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_15_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_15_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_15_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_15_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_ent);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_15_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_15_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_15_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_15_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_ent) {
    e = (*v)(p->__pyx_v_ent, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_15_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_15_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_15_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_15_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_15_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_15_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_conj);
  Py_CLEAR(p->__pyx_v_span);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *)o;
  if (p->__pyx_v_conj) {
    e = (*v)(p->__pyx_v_conj, a); if (e) return e;
  }
  if (p->__pyx_v_span) {
    e = (*v)(((PyObject *)p->__pyx_v_span), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type *)o;
  tmp = ((PyObject*)p->__pyx_v_conj);
  p->__pyx_v_conj = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_span);
  p->__pyx_v_span = ((struct __pyx_obj_5spacy_6tokens_4span_Span *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type, /*tp_traverse*/
  __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_17_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_17_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_17_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_17_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_17_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_17_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_17_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_t);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_17_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_17_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_17_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_17_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_t) {
    e = (*v)(p->__pyx_v_t, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_17_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_17_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_17_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_17_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_17_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_17_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_18___get__[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_18___get__ = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_18___get__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_18___get__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_18___get__[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_18___get__];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_18___get__(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_18___get__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_18___get__[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_18___get__++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_18___get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_18___get__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_11neuralcoref_8document_Mention *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_18___get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_18___get__", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_18___get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_18___get__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_18___get__, /*tp_traverse*/
  __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_18___get__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_18___get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_19_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_19_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_19_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_19_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_19_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_19_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_19_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_tok);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_19_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_19_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_19_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_19_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_tok) {
    e = (*v)(p->__pyx_v_tok, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_19_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_19_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_19_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_19_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_19_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_19_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_20___str__[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_20___str__ = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_20___str__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_20___str__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_20___str__[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_20___str__];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_20___str__(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_20___str__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_20___str__[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_20___str__++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_20___str__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_20___str__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_11neuralcoref_8document_Document *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_20___str__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_20___str__", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_20___str__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_20___str__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_20___str__, /*tp_traverse*/
  __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_20___str__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_20___str__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_21_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_21_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_21_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_21_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_21_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_21_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_21_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_21_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_21_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_21_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_21_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_21_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_21_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_21_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_21_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_21_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_21_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_22_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_22_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_22_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_22_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_22_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_22_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_22_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_22_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_22_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_22_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_22_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_22_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_22_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_22_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_22_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_22_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_22_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_23___iter__[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_23___iter__ = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_23___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_23___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_23___iter__[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_23___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_23___iter__(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_mention);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_23___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_23___iter__[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_23___iter__++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_23___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__ *)o;
  if (p->__pyx_v_mention) {
    e = (*v)(p->__pyx_v_mention, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_23___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_23___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_23___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_23___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_23___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_23___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_24__process_mentions[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_24__process_mentions = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_24__process_mentions(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_24__process_mentions > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_24__process_mentions[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_24__process_mentions];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_24__process_mentions(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_mentions_spans);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_24__process_mentions < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_24__process_mentions[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_24__process_mentions++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_24__process_mentions(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *)o;
  if (p->__pyx_v_mentions_spans) {
    e = (*v)(p->__pyx_v_mentions_spans, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_24__process_mentions(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions *)o;
  tmp = ((PyObject*)p->__pyx_v_mentions_spans);
  p->__pyx_v_mentions_spans = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_24__process_mentions = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_24__process_mentions", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_24__process_mentions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_24__process_mentions, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_24__process_mentions, /*tp_traverse*/
  __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_24__process_mentions, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_24__process_mentions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_25_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_25_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_25_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_25_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_25_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_25_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_25_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_m);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_25_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_25_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_25_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_25_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_m) {
    e = (*v)(p->__pyx_v_m, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_25_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_25_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_25_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_25_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_25_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_25_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_mention);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *)o;
  if (p->__pyx_v_mention) {
    e = (*v)(p->__pyx_v_mention, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features *)o;
  tmp = ((PyObject*)p->__pyx_v_mention);
  p->__pyx_v_mention = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_11neuralcoref_8document_Document *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_26_set_mentions_features", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features, /*tp_traverse*/
  __pyx_tp_clear_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr *__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_27_genexpr[8];
static int __pyx_freecount_11neuralcoref_8document___pyx_scope_struct_27_genexpr = 0;

static PyObject *__pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_27_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_27_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr)))) {
    o = (PyObject*)__pyx_freelist_11neuralcoref_8document___pyx_scope_struct_27_genexpr[--__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_27_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_27_genexpr(PyObject *o) {
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_m);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_27_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr)))) {
    __pyx_freelist_11neuralcoref_8document___pyx_scope_struct_27_genexpr[__pyx_freecount_11neuralcoref_8document___pyx_scope_struct_27_genexpr++] = ((struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_27_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr *p = (struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_m) {
    e = (*v)(p->__pyx_v_m, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_11neuralcoref_8document___pyx_scope_struct_27_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuralcoref.document.__pyx_scope_struct_27_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_11neuralcoref_8document___pyx_scope_struct_27_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11neuralcoref_8document___pyx_scope_struct_27_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11neuralcoref_8document___pyx_scope_struct_27_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11neuralcoref_8document___pyx_scope_struct_27_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_document(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_document},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "document",
    __pyx_k_data_models_and_pre_processing_f, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0, 0},
  {&__pyx_kp_u_00_Mention, __pyx_k_00_Mention, sizeof(__pyx_k_00_Mention), 0, 1, 0, 0},
  {&__pyx_kp_u_00_MentionHead, __pyx_k_00_MentionHead, sizeof(__pyx_k_00_MentionHead), 0, 1, 0, 0},
  {&__pyx_kp_u_00_SameSpeaker, __pyx_k_00_SameSpeaker, sizeof(__pyx_k_00_SameSpeaker), 0, 1, 0, 0},
  {&__pyx_kp_u_01_AntMatchMentionSpeaker, __pyx_k_01_AntMatchMentionSpeaker, sizeof(__pyx_k_01_AntMatchMentionSpeaker), 0, 1, 0, 0},
  {&__pyx_kp_u_01_MentionFirstWord, __pyx_k_01_MentionFirstWord, sizeof(__pyx_k_01_MentionFirstWord), 0, 1, 0, 0},
  {&__pyx_kp_u_01_MentionLeft, __pyx_k_01_MentionLeft, sizeof(__pyx_k_01_MentionLeft), 0, 1, 0, 0},
  {&__pyx_kp_u_01_MentionType, __pyx_k_01_MentionType, sizeof(__pyx_k_01_MentionType), 0, 1, 0, 0},
  {&__pyx_kp_u_02_MentionLastWord, __pyx_k_02_MentionLastWord, sizeof(__pyx_k_02_MentionLastWord), 0, 1, 0, 0},
  {&__pyx_kp_u_02_MentionLength, __pyx_k_02_MentionLength, sizeof(__pyx_k_02_MentionLength), 0, 1, 0, 0},
  {&__pyx_kp_u_02_MentionMatchSpeaker, __pyx_k_02_MentionMatchSpeaker, sizeof(__pyx_k_02_MentionMatchSpeaker), 0, 1, 0, 0},
  {&__pyx_kp_u_02_MentionRight, __pyx_k_02_MentionRight, sizeof(__pyx_k_02_MentionRight), 0, 1, 0, 0},
  {&__pyx_kp_u_03_HeadsAgree, __pyx_k_03_HeadsAgree, sizeof(__pyx_k_03_HeadsAgree), 0, 1, 0, 0},
  {&__pyx_kp_u_03_MentionNormLocation, __pyx_k_03_MentionNormLocation, sizeof(__pyx_k_03_MentionNormLocation), 0, 1, 0, 0},
  {&__pyx_kp_u_03_PreviousWord, __pyx_k_03_PreviousWord, sizeof(__pyx_k_03_PreviousWord), 0, 1, 0, 0},
  {&__pyx_kp_u_03_Sentence, __pyx_k_03_Sentence, sizeof(__pyx_k_03_Sentence), 0, 1, 0, 0},
  {&__pyx_kp_u_04_Doc, __pyx_k_04_Doc, sizeof(__pyx_k_04_Doc), 0, 1, 0, 0},
  {&__pyx_kp_u_04_ExactStringMatch, __pyx_k_04_ExactStringMatch, sizeof(__pyx_k_04_ExactStringMatch), 0, 1, 0, 0},
  {&__pyx_kp_u_04_IsMentionNested, __pyx_k_04_IsMentionNested, sizeof(__pyx_k_04_IsMentionNested), 0, 1, 0, 0},
  {&__pyx_kp_u_04_NextWord, __pyx_k_04_NextWord, sizeof(__pyx_k_04_NextWord), 0, 1, 0, 0},
  {&__pyx_kp_u_05_RelaxedStringMatch, __pyx_k_05_RelaxedStringMatch, sizeof(__pyx_k_05_RelaxedStringMatch), 0, 1, 0, 0},
  {&__pyx_kp_u_05_SecondPreviousWord, __pyx_k_05_SecondPreviousWord, sizeof(__pyx_k_05_SecondPreviousWord), 0, 1, 0, 0},
  {&__pyx_kp_u_06_SecondNextWord, __pyx_k_06_SecondNextWord, sizeof(__pyx_k_06_SecondNextWord), 0, 1, 0, 0},
  {&__pyx_kp_u_06_SentenceDistance, __pyx_k_06_SentenceDistance, sizeof(__pyx_k_06_SentenceDistance), 0, 1, 0, 0},
  {&__pyx_kp_u_07_MentionDistance, __pyx_k_07_MentionDistance, sizeof(__pyx_k_07_MentionDistance), 0, 1, 0, 0},
  {&__pyx_kp_u_07_MentionRootHead, __pyx_k_07_MentionRootHead, sizeof(__pyx_k_07_MentionRootHead), 0, 1, 0, 0},
  {&__pyx_kp_u_08_Overlapping, __pyx_k_08_Overlapping, sizeof(__pyx_k_08_Overlapping), 0, 1, 0, 0},
  {&__pyx_kp_u_09_M1Features, __pyx_k_09_M1Features, sizeof(__pyx_k_09_M1Features), 0, 1, 0, 0},
  {&__pyx_kp_u_10_M2Features, __pyx_k_10_M2Features, sizeof(__pyx_k_10_M2Features), 0, 1, 0, 0},
  {&__pyx_kp_u_11_DocGenre, __pyx_k_11_DocGenre, sizeof(__pyx_k_11_DocGenre), 0, 1, 0, 0},
  {&__pyx_n_s_ACCEPTED_ENTS, __pyx_k_ACCEPTED_ENTS, sizeof(__pyx_k_ACCEPTED_ENTS), 0, 0, 1, 1},
  {&__pyx_n_u_ADP, __pyx_k_ADP, sizeof(__pyx_k_ADP), 0, 1, 0, 1},
  {&__pyx_kp_u_Adding_utterances, __pyx_k_Adding_utterances, sizeof(__pyx_k_Adding_utterances), 0, 1, 0, 0},
  {&__pyx_n_u_CC, __pyx_k_CC, sizeof(__pyx_k_CC), 0, 1, 0, 1},
  {&__pyx_n_u_CCONJ, __pyx_k_CCONJ, sizeof(__pyx_k_CCONJ), 0, 1, 0, 1},
  {&__pyx_kp_s_Compute_words_embedding_feature, __pyx_k_Compute_words_embedding_feature, sizeof(__pyx_k_Compute_words_embedding_feature), 0, 0, 1, 0},
  {&__pyx_kp_u_Conjunction_found_storing_first, __pyx_k_Conjunction_found_storing_first, sizeof(__pyx_k_Conjunction_found_storing_first), 0, 1, 0, 0},
  {&__pyx_n_u_DT, __pyx_k_DT, sizeof(__pyx_k_DT), 0, 1, 0, 1},
  {&__pyx_n_u_DocGenre, __pyx_k_DocGenre, sizeof(__pyx_k_DocGenre), 0, 1, 0, 1},
  {&__pyx_n_s_Document___iter, __pyx_k_Document___iter, sizeof(__pyx_k_Document___iter), 0, 0, 1, 1},
  {&__pyx_n_u_EVENT, __pyx_k_EVENT, sizeof(__pyx_k_EVENT), 0, 1, 0, 1},
  {&__pyx_n_s_EmbeddingExtractor, __pyx_k_EmbeddingExtractor, sizeof(__pyx_k_EmbeddingExtractor), 0, 0, 1, 1},
  {&__pyx_n_s_EmbeddingExtractor___init, __pyx_k_EmbeddingExtractor___init, sizeof(__pyx_k_EmbeddingExtractor___init), 0, 0, 1, 1},
  {&__pyx_n_s_EmbeddingExtractor_get_average_e, __pyx_k_EmbeddingExtractor_get_average_e, sizeof(__pyx_k_EmbeddingExtractor_get_average_e), 0, 0, 1, 1},
  {&__pyx_n_s_EmbeddingExtractor_get_document, __pyx_k_EmbeddingExtractor_get_document, sizeof(__pyx_k_EmbeddingExtractor_get_document), 0, 0, 1, 1},
  {&__pyx_n_s_EmbeddingExtractor_get_mention_e, __pyx_k_EmbeddingExtractor_get_mention_e, sizeof(__pyx_k_EmbeddingExtractor_get_mention_e), 0, 0, 1, 1},
  {&__pyx_n_s_EmbeddingExtractor_get_stat_word, __pyx_k_EmbeddingExtractor_get_stat_word, sizeof(__pyx_k_EmbeddingExtractor_get_stat_word), 0, 0, 1, 1},
  {&__pyx_n_s_EmbeddingExtractor_get_word_embe, __pyx_k_EmbeddingExtractor_get_word_embe, sizeof(__pyx_k_EmbeddingExtractor_get_word_embe), 0, 0, 1, 1},
  {&__pyx_n_s_EmbeddingExtractor_get_word_in_s, __pyx_k_EmbeddingExtractor_get_word_in_s, sizeof(__pyx_k_EmbeddingExtractor_get_word_in_s), 0, 0, 1, 1},
  {&__pyx_n_s_EmbeddingExtractor_load_embeddin, __pyx_k_EmbeddingExtractor_load_embeddin, sizeof(__pyx_k_EmbeddingExtractor_load_embeddin), 0, 0, 1, 1},
  {&__pyx_n_s_EmbeddingExtractor_normalize_wor, __pyx_k_EmbeddingExtractor_normalize_wor, sizeof(__pyx_k_EmbeddingExtractor_normalize_wor), 0, 0, 1, 1},
  {&__pyx_kp_u_Enlarge_span, __pyx_k_Enlarge_span, sizeof(__pyx_k_Enlarge_span), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_while_getting_Mention_sent, __pyx_k_Error_while_getting_Mention_sent, sizeof(__pyx_k_Error_while_getting_Mention_sent), 0, 1, 0, 0},
  {&__pyx_n_u_FACILITY, __pyx_k_FACILITY, sizeof(__pyx_k_FACILITY), 0, 1, 0, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_u_GPE, __pyx_k_GPE, sizeof(__pyx_k_GPE), 0, 1, 0, 1},
  {&__pyx_n_u_IN, __pyx_k_IN, sizeof(__pyx_k_IN), 0, 1, 0, 1},
  {&__pyx_n_u_INTJ, __pyx_k_INTJ, sizeof(__pyx_k_INTJ), 0, 1, 0, 1},
  {&__pyx_kp_u_IN_tag, __pyx_k_IN_tag, sizeof(__pyx_k_IN_tag), 0, 1, 0, 0},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_KEEP_DEP, __pyx_k_KEEP_DEP, sizeof(__pyx_k_KEEP_DEP), 0, 0, 1, 1},
  {&__pyx_n_s_KEEP_TAGS, __pyx_k_KEEP_TAGS, sizeof(__pyx_k_KEEP_TAGS), 0, 0, 1, 1},
  {&__pyx_n_u_LANGUAGE, __pyx_k_LANGUAGE, sizeof(__pyx_k_LANGUAGE), 0, 1, 0, 1},
  {&__pyx_n_s_LEAVE_DEP, __pyx_k_LEAVE_DEP, sizeof(__pyx_k_LEAVE_DEP), 0, 0, 1, 1},
  {&__pyx_n_u_LIST, __pyx_k_LIST, sizeof(__pyx_k_LIST), 0, 1, 0, 1},
  {&__pyx_n_u_LOC, __pyx_k_LOC, sizeof(__pyx_k_LOC), 0, 1, 0, 1},
  {&__pyx_n_s_LOWER_NOT_END, __pyx_k_LOWER_NOT_END, sizeof(__pyx_k_LOWER_NOT_END), 0, 0, 1, 1},
  {&__pyx_kp_u_Loading_embeddings_from, __pyx_k_Loading_embeddings_from, sizeof(__pyx_k_Loading_embeddings_from), 0, 1, 0, 0},
  {&__pyx_n_s_MAX_ITER, __pyx_k_MAX_ITER, sizeof(__pyx_k_MAX_ITER), 0, 0, 1, 1},
  {&__pyx_n_s_MENTION_LABEL, __pyx_k_MENTION_LABEL, sizeof(__pyx_k_MENTION_LABEL), 0, 0, 1, 1},
  {&__pyx_n_s_MENTION_TYPE, __pyx_k_MENTION_TYPE, sizeof(__pyx_k_MENTION_TYPE), 0, 0, 1, 1},
  {&__pyx_n_s_MISSING_WORD, __pyx_k_MISSING_WORD, sizeof(__pyx_k_MISSING_WORD), 0, 0, 1, 1},
  {&__pyx_n_s_Mention___get___locals_genexpr, __pyx_k_Mention___get___locals_genexpr, sizeof(__pyx_k_Mention___get___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_u_NN, __pyx_k_NN, sizeof(__pyx_k_NN), 0, 1, 0, 1},
  {&__pyx_n_u_NNP, __pyx_k_NNP, sizeof(__pyx_k_NNP), 0, 1, 0, 1},
  {&__pyx_n_u_NNPS, __pyx_k_NNPS, sizeof(__pyx_k_NNPS), 0, 1, 0, 1},
  {&__pyx_n_u_NNS, __pyx_k_NNS, sizeof(__pyx_k_NNS), 0, 1, 0, 1},
  {&__pyx_n_u_NOMINAL, __pyx_k_NOMINAL, sizeof(__pyx_k_NOMINAL), 0, 1, 0, 1},
  {&__pyx_n_u_NORP, __pyx_k_NORP, sizeof(__pyx_k_NORP), 0, 1, 0, 1},
  {&__pyx_n_s_NO_COREF_LIST, __pyx_k_NO_COREF_LIST, sizeof(__pyx_k_NO_COREF_LIST), 0, 0, 1, 1},
  {&__pyx_kp_u_NP_or_IN, __pyx_k_NP_or_IN, sizeof(__pyx_k_NP_or_IN), 0, 1, 0, 0},
  {&__pyx_kp_u_No_spacy_2_model_detected_using, __pyx_k_No_spacy_2_model_detected_using, sizeof(__pyx_k_No_spacy_2_model_detected_using), 0, 1, 0, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_u_ORG, __pyx_k_ORG, sizeof(__pyx_k_ORG), 0, 1, 0, 1},
  {&__pyx_n_u_PERSON, __pyx_k_PERSON, sizeof(__pyx_k_PERSON), 0, 1, 0, 1},
  {&__pyx_n_u_PRODUCT, __pyx_k_PRODUCT, sizeof(__pyx_k_PRODUCT), 0, 1, 0, 1},
  {&__pyx_n_u_PRONOMINAL, __pyx_k_PRONOMINAL, sizeof(__pyx_k_PRONOMINAL), 0, 1, 0, 1},
  {&__pyx_n_u_PROPER, __pyx_k_PROPER, sizeof(__pyx_k_PROPER), 0, 1, 0, 1},
  {&__pyx_n_s_PROPERS_TAGS, __pyx_k_PROPERS_TAGS, sizeof(__pyx_k_PROPERS_TAGS), 0, 0, 1, 1},
  {&__pyx_n_u_PRP, __pyx_k_PRP, sizeof(__pyx_k_PRP), 0, 1, 0, 1},
  {&__pyx_kp_u_PRP_2, __pyx_k_PRP_2, sizeof(__pyx_k_PRP_2), 0, 1, 0, 0},
  {&__pyx_n_s_PRP_TAGS, __pyx_k_PRP_TAGS, sizeof(__pyx_k_PRP_TAGS), 0, 0, 1, 1},
  {&__pyx_n_s_REMOVE_POS, __pyx_k_REMOVE_POS, sizeof(__pyx_k_REMOVE_POS), 0, 0, 1, 1},
  {&__pyx_kp_u_Removing_first_token, __pyx_k_Removing_first_token, sizeof(__pyx_k_Removing_first_token), 0, 1, 0, 0},
  {&__pyx_kp_u_Removing_last_token, __pyx_k_Removing_last_token, sizeof(__pyx_k_Removing_last_token), 0, 1, 0, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SPAN_FACTOR, __pyx_k_SPAN_FACTOR, sizeof(__pyx_k_SPAN_FACTOR), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_UNK, __pyx_k_UNK, sizeof(__pyx_k_UNK), 0, 1, 0, 0},
  {&__pyx_n_s_UNKNOWN_WORD, __pyx_k_UNKNOWN_WORD, sizeof(__pyx_k_UNKNOWN_WORD), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_WHITESPACE_PATTERN, __pyx_k_WHITESPACE_PATTERN, sizeof(__pyx_k_WHITESPACE_PATTERN), 0, 0, 1, 1},
  {&__pyx_n_u_WORK_OF_ART, __pyx_k_WORK_OF_ART, sizeof(__pyx_k_WORK_OF_ART), 0, 1, 0, 1},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_kp_u__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 1, 0, 0},
  {&__pyx_kp_u__44, __pyx_k__44, sizeof(__pyx_k__44), 0, 1, 0, 0},
  {&__pyx_kp_u__45, __pyx_k__45, sizeof(__pyx_k__45), 0, 1, 0, 0},
  {&__pyx_kp_u__46, __pyx_k__46, sizeof(__pyx_k__46), 0, 1, 0, 0},
  {&__pyx_kp_u__49, __pyx_k__49, sizeof(__pyx_k__49), 0, 1, 0, 0},
  {&__pyx_kp_u__53, __pyx_k__53, sizeof(__pyx_k__53), 0, 1, 0, 0},
  {&__pyx_kp_u__75, __pyx_k__75, sizeof(__pyx_k__75), 0, 1, 0, 0},
  {&__pyx_kp_u__76, __pyx_k__76, sizeof(__pyx_k__76), 0, 1, 0, 0},
  {&__pyx_n_s__77, __pyx_k__77, sizeof(__pyx_k__77), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_add_span_locals_genexpr, __pyx_k_add_span_locals_genexpr, sizeof(__pyx_k_add_span_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_add_utterances, __pyx_k_add_utterances, sizeof(__pyx_k_add_utterances), 0, 0, 1, 1},
  {&__pyx_n_u_antecedents, __pyx_k_antecedents, sizeof(__pyx_k_antecedents), 0, 1, 0, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_u_appos, __pyx_k_appos, sizeof(__pyx_k_appos), 0, 1, 0, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
  {&__pyx_n_s_average, __pyx_k_average, sizeof(__pyx_k_average), 0, 0, 1, 1},
  {&__pyx_n_s_average_mean, __pyx_k_average_mean, sizeof(__pyx_k_average_mean), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_u_cleaned_mentions_spans, __pyx_k_cleaned_mentions_spans, sizeof(__pyx_k_cleaned_mentions_spans), 0, 1, 0, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_u_compound, __pyx_k_compound, sizeof(__pyx_k_compound), 0, 1, 0, 1},
  {&__pyx_n_s_concatenate, __pyx_k_concatenate, sizeof(__pyx_k_concatenate), 0, 0, 1, 1},
  {&__pyx_n_u_conj, __pyx_k_conj, sizeof(__pyx_k_conj), 0, 1, 0, 1},
  {&__pyx_n_s_conll, __pyx_k_conll, sizeof(__pyx_k_conll), 0, 0, 1, 1},
  {&__pyx_n_s_content_words, __pyx_k_content_words, sizeof(__pyx_k_content_words), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_kp_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 0},
  {&__pyx_n_s_debug, __pyx_k_debug, sizeof(__pyx_k_debug), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_dep, __pyx_k_dep, sizeof(__pyx_k_dep), 0, 0, 1, 1},
  {&__pyx_n_u_dep, __pyx_k_dep, sizeof(__pyx_k_dep), 0, 1, 0, 1},
  {&__pyx_kp_u_dep_2, __pyx_k_dep_2, sizeof(__pyx_k_dep_2), 0, 1, 0, 0},
  {&__pyx_n_s_dep_3, __pyx_k_dep_3, sizeof(__pyx_k_dep_3), 0, 0, 1, 1},
  {&__pyx_n_u_det, __pyx_k_det, sizeof(__pyx_k_det), 0, 1, 0, 1},
  {&__pyx_n_u_dobj, __pyx_k_dobj, sizeof(__pyx_k_dobj), 0, 1, 0, 1},
  {&__pyx_kp_u_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 1, 0, 0},
  {&__pyx_n_s_doc_2, __pyx_k_doc_2, sizeof(__pyx_k_doc_2), 0, 0, 1, 1},
  {&__pyx_n_s_doc_3, __pyx_k_doc_3, sizeof(__pyx_k_doc_3), 0, 0, 1, 1},
  {&__pyx_n_s_doc_embedding, __pyx_k_doc_embedding, sizeof(__pyx_k_doc_embedding), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_em, __pyx_k_em, sizeof(__pyx_k_em), 0, 0, 1, 1},
  {&__pyx_n_s_embed, __pyx_k_embed, sizeof(__pyx_k_embed), 0, 0, 1, 1},
  {&__pyx_n_s_embed_vector, __pyx_k_embed_vector, sizeof(__pyx_k_embed_vector), 0, 0, 1, 1},
  {&__pyx_n_s_embedding_extractor, __pyx_k_embedding_extractor, sizeof(__pyx_k_embedding_extractor), 0, 0, 1, 1},
  {&__pyx_n_s_embeddings, __pyx_k_embeddings, sizeof(__pyx_k_embeddings), 0, 0, 1, 1},
  {&__pyx_kp_u_embeddings_npy, __pyx_k_embeddings_npy, sizeof(__pyx_k_embeddings_npy), 0, 1, 0, 0},
  {&__pyx_n_u_en, __pyx_k_en, sizeof(__pyx_k_en), 0, 1, 0, 1},
  {&__pyx_n_u_en_core_web_sm, __pyx_k_en_core_web_sm, sizeof(__pyx_k_en_core_web_sm), 0, 1, 0, 1},
  {&__pyx_n_s_encode_distance, __pyx_k_encode_distance, sizeof(__pyx_k_encode_distance), 0, 0, 1, 1},
  {&__pyx_n_s_encoding, __pyx_k_encoding, sizeof(__pyx_k_encoding), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_ent_type, __pyx_k_ent_type, sizeof(__pyx_k_ent_type), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_ents, __pyx_k_ents, sizeof(__pyx_k_ents), 0, 0, 1, 1},
  {&__pyx_kp_u_ents_2, __pyx_k_ents_2, sizeof(__pyx_k_ents_2), 0, 1, 0, 0},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_exact_match, __pyx_k_exact_match, sizeof(__pyx_k_exact_match), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_extract_mentions_spans_locals_ge, __pyx_k_extract_mentions_spans_locals_ge, sizeof(__pyx_k_extract_mentions_spans_locals_ge), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_fallback, __pyx_k_fallback, sizeof(__pyx_k_fallback), 0, 0, 1, 1},
  {&__pyx_n_s_features, __pyx_k_features, sizeof(__pyx_k_features), 0, 0, 1, 1},
  {&__pyx_n_s_features_2, __pyx_k_features_2, sizeof(__pyx_k_features_2), 0, 0, 1, 1},
  {&__pyx_n_u_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 1, 0, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_average_embedding, __pyx_k_get_average_embedding, sizeof(__pyx_k_get_average_embedding), 0, 0, 1, 1},
  {&__pyx_n_s_get_document_embedding, __pyx_k_get_document_embedding, sizeof(__pyx_k_get_document_embedding), 0, 0, 1, 1},
  {&__pyx_n_s_get_hash_lookups_locals_genexpr, __pyx_k_get_hash_lookups_locals_genexpr, sizeof(__pyx_k_get_hash_lookups_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_mention_embeddings, __pyx_k_get_mention_embeddings, sizeof(__pyx_k_get_mention_embeddings), 0, 0, 1, 1},
  {&__pyx_n_s_get_raw_pair_features, __pyx_k_get_raw_pair_features, sizeof(__pyx_k_get_raw_pair_features), 0, 0, 1, 1},
  {&__pyx_n_s_get_span_type_locals_genexpr, __pyx_k_get_span_type_locals_genexpr, sizeof(__pyx_k_get_span_type_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_stat_word, __pyx_k_get_stat_word, sizeof(__pyx_k_get_stat_word), 0, 0, 1, 1},
  {&__pyx_n_s_get_word_embedding, __pyx_k_get_word_embedding, sizeof(__pyx_k_get_word_embedding), 0, 0, 1, 1},
  {&__pyx_n_s_get_word_in_sentence, __pyx_k_get_word_in_sentence, sizeof(__pyx_k_get_word_in_sentence), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_u_head, __pyx_k_head, sizeof(__pyx_k_head), 0, 1, 0, 0},
  {&__pyx_n_s_head_2, __pyx_k_head_2, sizeof(__pyx_k_head_2), 0, 0, 1, 1},
  {&__pyx_n_s_heads_agree, __pyx_k_heads_agree, sizeof(__pyx_k_heads_agree), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_u_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 1, 0, 1},
  {&__pyx_kp_u_i2, __pyx_k_i2, sizeof(__pyx_k_i2), 0, 1, 0, 0},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_idx_to_voc, __pyx_k_idx_to_voc, sizeof(__pyx_k_idx_to_voc), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_integer_types, __pyx_k_integer_types, sizeof(__pyx_k_integer_types), 0, 0, 1, 1},
  {&__pyx_n_s_io, __pyx_k_io, sizeof(__pyx_k_io), 0, 0, 1, 1},
  {&__pyx_n_u_iobj, __pyx_k_iobj, sizeof(__pyx_k_iobj), 0, 1, 0, 1},
  {&__pyx_n_s_isdisjoint, __pyx_k_isdisjoint, sizeof(__pyx_k_isdisjoint), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_izip_longest, __pyx_k_izip_longest, sizeof(__pyx_k_izip_longest), 0, 0, 1, 1},
  {&__pyx_kp_u_keep_as_maxchild, __pyx_k_keep_as_maxchild, sizeof(__pyx_k_keep_as_maxchild), 0, 1, 0, 0},
  {&__pyx_kp_u_keep_as_minchild, __pyx_k_keep_as_minchild, sizeof(__pyx_k_keep_as_minchild), 0, 1, 0, 0},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_kp_u_left_side_after_cleaning, __pyx_k_left_side_after_cleaning, sizeof(__pyx_k_left_side_after_cleaning), 0, 1, 0, 0},
  {&__pyx_kp_u_left_side_before_cleaning, __pyx_k_left_side_before_cleaning, sizeof(__pyx_k_left_side_before_cleaning), 0, 1, 0, 0},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
  {&__pyx_n_s_load_embeddings_from_file, __pyx_k_load_embeddings_from_file, sizeof(__pyx_k_load_embeddings_from_file), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_m1, __pyx_k_m1, sizeof(__pyx_k_m1), 0, 0, 1, 1},
  {&__pyx_n_s_m2, __pyx_k_m2, sizeof(__pyx_k_m2), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_u_mark, __pyx_k_mark, sizeof(__pyx_k_mark), 0, 1, 0, 1},
  {&__pyx_n_s_mat, __pyx_k_mat, sizeof(__pyx_k_mat), 0, 0, 1, 1},
  {&__pyx_n_s_max_distance, __pyx_k_max_distance, sizeof(__pyx_k_max_distance), 0, 0, 1, 1},
  {&__pyx_n_s_max_distance_with_match, __pyx_k_max_distance_with_match, sizeof(__pyx_k_max_distance_with_match), 0, 0, 1, 1},
  {&__pyx_kp_u_maxchild_c_c_head, __pyx_k_maxchild_c_c_head, sizeof(__pyx_k_maxchild_c_c_head), 0, 1, 0, 0},
  {&__pyx_n_u_me, __pyx_k_me, sizeof(__pyx_k_me), 0, 1, 0, 1},
  {&__pyx_n_s_mention, __pyx_k_mention, sizeof(__pyx_k_mention), 0, 0, 1, 1},
  {&__pyx_n_s_mention_detection_debug, __pyx_k_mention_detection_debug, sizeof(__pyx_k_mention_detection_debug), 0, 0, 1, 1},
  {&__pyx_n_s_mention_index, __pyx_k_mention_index, sizeof(__pyx_k_mention_index), 0, 0, 1, 1},
  {&__pyx_n_s_mention_type, __pyx_k_mention_type, sizeof(__pyx_k_mention_type), 0, 0, 1, 1},
  {&__pyx_n_s_mentions, __pyx_k_mentions, sizeof(__pyx_k_mentions), 0, 0, 1, 1},
  {&__pyx_n_s_mentions_spans, __pyx_k_mentions_spans, sizeof(__pyx_k_mentions_spans), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_kp_u_minchild_c_c_head, __pyx_k_minchild_c_c_head, sizeof(__pyx_k_minchild_c_c_head), 0, 1, 0, 0},
  {&__pyx_kp_u_missing, __pyx_k_missing, sizeof(__pyx_k_missing), 0, 1, 0, 0},
  {&__pyx_n_s_model, __pyx_k_model, sizeof(__pyx_k_model), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_ms, __pyx_k_ms, sizeof(__pyx_k_ms), 0, 0, 1, 1},
  {&__pyx_n_s_ms_lefts, __pyx_k_ms_lefts, sizeof(__pyx_k_ms_lefts), 0, 0, 1, 1},
  {&__pyx_n_s_ms_rights, __pyx_k_ms_rights, sizeof(__pyx_k_ms_rights), 0, 0, 1, 1},
  {&__pyx_n_u_my, __pyx_k_my, sizeof(__pyx_k_my), 0, 1, 0, 1},
  {&__pyx_n_s_n_sents, __pyx_k_n_sents, sizeof(__pyx_k_n_sents), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndmin, __pyx_k_ndmin, sizeof(__pyx_k_ndmin), 0, 0, 1, 1},
  {&__pyx_n_s_neuralcoref_compat, __pyx_k_neuralcoref_compat, sizeof(__pyx_k_neuralcoref_compat), 0, 0, 1, 1},
  {&__pyx_n_s_neuralcoref_document, __pyx_k_neuralcoref_document, sizeof(__pyx_k_neuralcoref_document), 0, 0, 1, 1},
  {&__pyx_kp_s_neuralcoref_document_pyx, __pyx_k_neuralcoref_document_pyx, sizeof(__pyx_k_neuralcoref_document_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_neuralcoref_utils, __pyx_k_neuralcoref_utils, sizeof(__pyx_k_neuralcoref_utils), 0, 0, 1, 1},
  {&__pyx_n_s_nlp, __pyx_k_nlp, sizeof(__pyx_k_nlp), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_norm_word, __pyx_k_norm_word, sizeof(__pyx_k_norm_word), 0, 0, 1, 1},
  {&__pyx_n_s_normalize_word, __pyx_k_normalize_word, sizeof(__pyx_k_normalize_word), 0, 0, 1, 1},
  {&__pyx_kp_u_not_pronoun_or_no_right_dependen, __pyx_k_not_pronoun_or_no_right_dependen, sizeof(__pyx_k_not_pronoun_or_no_right_dependen), 0, 1, 0, 0},
  {&__pyx_n_u_nsubj, __pyx_k_nsubj, sizeof(__pyx_k_nsubj), 0, 1, 0, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_overlapping, __pyx_k_overlapping, sizeof(__pyx_k_overlapping), 0, 0, 1, 1},
  {&__pyx_n_s_parallel_process, __pyx_k_parallel_process, sizeof(__pyx_k_parallel_process), 0, 0, 1, 1},
  {&__pyx_n_s_pipe, __pyx_k_pipe, sizeof(__pyx_k_pipe), 0, 0, 1, 1},
  {&__pyx_n_u_pobj, __pyx_k_pobj, sizeof(__pyx_k_pobj), 0, 1, 0, 1},
  {&__pyx_kp_u_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 1, 0, 0},
  {&__pyx_n_s_pos_2, __pyx_k_pos_2, sizeof(__pyx_k_pos_2), 0, 0, 1, 1},
  {&__pyx_n_u_prep, __pyx_k_prep, sizeof(__pyx_k_prep), 0, 1, 0, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pretrained_model_path, __pyx_k_pretrained_model_path, sizeof(__pyx_k_pretrained_model_path), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_process_mentions, __pyx_k_process_mentions, sizeof(__pyx_k_process_mentions), 0, 0, 1, 1},
  {&__pyx_n_s_process_mentions_locals_genexpr, __pyx_k_process_mentions_locals_genexpr, sizeof(__pyx_k_process_mentions_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process_mentions_locals_lambda, __pyx_k_process_mentions_locals_lambda, sizeof(__pyx_k_process_mentions_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_relaxed_match, __pyx_k_relaxed_match, sizeof(__pyx_k_relaxed_match), 0, 0, 1, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_kp_u_right_side_after_cleaning, __pyx_k_right_side_after_cleaning, sizeof(__pyx_k_right_side_after_cleaning), 0, 1, 0, 0},
  {&__pyx_kp_u_right_side_before_cleaning, __pyx_k_right_side_before_cleaning, sizeof(__pyx_k_right_side_before_cleaning), 0, 1, 0, 0},
  {&__pyx_n_s_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 0, 1, 1},
  {&__pyx_kp_u_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 1, 0, 0},
  {&__pyx_kp_u_s_2, __pyx_k_s_2, sizeof(__pyx_k_s_2), 0, 1, 0, 0},
  {&__pyx_kp_u_s_detected, __pyx_k_s_detected, sizeof(__pyx_k_s_detected), 0, 1, 0, 0},
  {&__pyx_kp_u_s_i1, __pyx_k_s_i1, sizeof(__pyx_k_s_i1), 0, 1, 0, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_sent, __pyx_k_sent, sizeof(__pyx_k_sent), 0, 0, 1, 1},
  {&__pyx_n_s_sentence, __pyx_k_sentence, sizeof(__pyx_k_sentence), 0, 0, 1, 1},
  {&__pyx_n_s_sents, __pyx_k_sents, sizeof(__pyx_k_sents), 0, 0, 1, 1},
  {&__pyx_n_s_set_candidate_pairs, __pyx_k_set_candidate_pairs, sizeof(__pyx_k_set_candidate_pairs), 0, 0, 1, 1},
  {&__pyx_n_s_set_genre, __pyx_k_set_genre, sizeof(__pyx_k_set_genre), 0, 0, 1, 1},
  {&__pyx_n_s_set_mentions_features, __pyx_k_set_mentions_features, sizeof(__pyx_k_set_mentions_features), 0, 0, 1, 1},
  {&__pyx_n_s_set_mentions_features_locals_gen, __pyx_k_set_mentions_features_locals_gen, sizeof(__pyx_k_set_mentions_features_locals_gen), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_shape2, __pyx_k_shape2, sizeof(__pyx_k_shape2), 0, 0, 1, 1},
  {&__pyx_n_s_six, __pyx_k_six, sizeof(__pyx_k_six), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_spacy, __pyx_k_spacy, sizeof(__pyx_k_spacy), 0, 0, 1, 1},
  {&__pyx_n_s_span, __pyx_k_span, sizeof(__pyx_k_span), 0, 0, 1, 1},
  {&__pyx_n_s_spans, __pyx_k_spans, sizeof(__pyx_k_spans), 0, 0, 1, 1},
  {&__pyx_n_s_spans_embeddings, __pyx_k_spans_embeddings, sizeof(__pyx_k_spans_embeddings), 0, 0, 1, 1},
  {&__pyx_n_s_spans_embeddings_2, __pyx_k_spans_embeddings_2, sizeof(__pyx_k_spans_embeddings_2), 0, 0, 1, 1},
  {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_stat_idx, __pyx_k_stat_idx, sizeof(__pyx_k_stat_idx), 0, 0, 1, 1},
  {&__pyx_n_s_stat_voc, __pyx_k_stat_voc, sizeof(__pyx_k_stat_voc), 0, 0, 1, 1},
  {&__pyx_n_s_static, __pyx_k_static, sizeof(__pyx_k_static), 0, 0, 1, 1},
  {&__pyx_n_s_static_embeddings, __pyx_k_static_embeddings, sizeof(__pyx_k_static_embeddings), 0, 0, 1, 1},
  {&__pyx_n_u_static_word, __pyx_k_static_word, sizeof(__pyx_k_static_word), 0, 1, 0, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_str___locals_genexpr, __pyx_k_str___locals_genexpr, sizeof(__pyx_k_str___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_string_types, __pyx_k_string_types, sizeof(__pyx_k_string_types), 0, 0, 1, 1},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_sub, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_kp_u_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 1, 0, 0},
  {&__pyx_n_s_tag_2, __pyx_k_tag_2, sizeof(__pyx_k_tag_2), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tok, __pyx_k_tok, sizeof(__pyx_k_tok), 0, 0, 1, 1},
  {&__pyx_kp_u_tok_dep, __pyx_k_tok_dep, sizeof(__pyx_k_tok_dep), 0, 1, 0, 0},
  {&__pyx_kp_u_tok_pos, __pyx_k_tok_pos, sizeof(__pyx_k_tok_pos), 0, 1, 0, 0},
  {&__pyx_kp_u_tok_tag, __pyx_k_tok_tag, sizeof(__pyx_k_tok_tag), 0, 1, 0, 0},
  {&__pyx_kp_u_token_head, __pyx_k_token_head, sizeof(__pyx_k_token_head), 0, 1, 0, 0},
  {&__pyx_kp_u_token_in_no_coref_list, __pyx_k_token_in_no_coref_list, sizeof(__pyx_k_token_in_no_coref_list), 0, 1, 0, 0},
  {&__pyx_n_s_token_list, __pyx_k_token_list, sizeof(__pyx_k_token_list), 0, 0, 1, 1},
  {&__pyx_n_s_trained_embed_path, __pyx_k_trained_embed_path, sizeof(__pyx_k_trained_embed_path), 0, 0, 1, 1},
  {&__pyx_n_s_tun_idx, __pyx_k_tun_idx, sizeof(__pyx_k_tun_idx), 0, 0, 1, 1},
  {&__pyx_n_s_tun_voc, __pyx_k_tun_voc, sizeof(__pyx_k_tun_voc), 0, 0, 1, 1},
  {&__pyx_n_s_tuned_embeddings, __pyx_k_tuned_embeddings, sizeof(__pyx_k_tuned_embeddings), 0, 0, 1, 1},
  {&__pyx_n_u_tuned_word, __pyx_k_tuned_word, sizeof(__pyx_k_tuned_word), 0, 1, 0, 1},
  {&__pyx_n_s_uint64, __pyx_k_uint64, sizeof(__pyx_k_uint64), 0, 0, 1, 1},
  {&__pyx_n_s_unicode, __pyx_k_unicode, sizeof(__pyx_k_unicode), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_use_no_coref_list, __pyx_k_use_no_coref_list, sizeof(__pyx_k_use_no_coref_list), 0, 0, 1, 1},
  {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},
  {&__pyx_n_s_utt, __pyx_k_utt, sizeof(__pyx_k_utt), 0, 0, 1, 1},
  {&__pyx_n_s_utt_embed, __pyx_k_utt_embed, sizeof(__pyx_k_utt_embed), 0, 0, 1, 1},
  {&__pyx_n_s_utterance_index, __pyx_k_utterance_index, sizeof(__pyx_k_utterance_index), 0, 0, 1, 1},
  {&__pyx_n_s_utterances, __pyx_k_utterances, sizeof(__pyx_k_utterances), 0, 0, 1, 1},
  {&__pyx_n_s_utterances_list, __pyx_k_utterances_list, sizeof(__pyx_k_utterances_list), 0, 0, 1, 1},
  {&__pyx_kp_u_utterances_mentions, __pyx_k_utterances_mentions, sizeof(__pyx_k_utterances_mentions), 0, 1, 0, 0},
  {&__pyx_n_s_utterances_sent, __pyx_k_utterances_sent, sizeof(__pyx_k_utterances_sent), 0, 0, 1, 1},
  {&__pyx_n_s_utterances_start_sent, __pyx_k_utterances_start_sent, sizeof(__pyx_k_utterances_start_sent), 0, 0, 1, 1},
  {&__pyx_n_s_voc_to_idx, __pyx_k_voc_to_idx, sizeof(__pyx_k_voc_to_idx), 0, 0, 1, 1},
  {&__pyx_kp_u_vocabulary_txt, __pyx_k_vocabulary_txt, sizeof(__pyx_k_vocabulary_txt), 0, 1, 0, 0},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {&__pyx_n_s_word, __pyx_k_word, sizeof(__pyx_k_word), 0, 0, 1, 1},
  {&__pyx_n_s_word_idx, __pyx_k_word_idx, sizeof(__pyx_k_word_idx), 0, 0, 1, 1},
  {&__pyx_n_s_word_list, __pyx_k_word_list, sizeof(__pyx_k_word_list), 0, 0, 1, 1},
  {&__pyx_n_s_words, __pyx_k_words, sizeof(__pyx_k_words), 0, 0, 1, 1},
  {&__pyx_n_s_words_embeddings, __pyx_k_words_embeddings, sizeof(__pyx_k_words_embeddings), 0, 0, 1, 1},
  {&__pyx_n_s_words_embeddings_2, __pyx_k_words_embeddings_2, sizeof(__pyx_k_words_embeddings_2), 0, 0, 1, 1},
  {&__pyx_n_u_you, __pyx_k_you, sizeof(__pyx_k_you), 0, 1, 0, 1},
  {&__pyx_n_u_your, __pyx_k_your, sizeof(__pyx_k_your), 0, 1, 0, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zip_longest, __pyx_k_zip_longest, sizeof(__pyx_k_zip_longest), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 462, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 65, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(0, 216, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 335, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 679, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(0, 799, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(3, 229, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "neuralcoref/document.pyx":77
 *     cdef np.ndarray[attr_t, ndim=1] leave_dep = numpy.asarray(list(store.add(st) for st in LEAVE_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 */
  __pyx_tuple_ = PyTuple_Pack(2, __pyx_n_u_nsubj, __pyx_n_u_dep); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "neuralcoref/document.pyx":78
 *     cdef np.ndarray[attr_t, ndim=1] keep_dep = numpy.asarray(list(store.add(st) for st in KEEP_DEP), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] nsubj_or_dep = numpy.asarray(list(store.add(st) for st in ["nsubj", "dep"]), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] conj_or_prep = numpy.asarray(list(store.add(st) for st in ["conj", "prep"]), dtype=numpy.uint64)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)
 */
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_n_u_conj, __pyx_n_u_prep); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "neuralcoref/document.pyx":81
 *     cdef np.ndarray[attr_t, ndim=1] remove_pos = numpy.asarray(list(store.add(st) for st in REMOVE_POS), dtype=numpy.uint64)
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")             # <<<<<<<<<<<<<<
 *     cdef attr_t NSUBJ_MARK = store.add("nsubj")
 *     cdef attr_t IN_TAG = store.add('IN')
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_s); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "neuralcoref/document.pyx":82
 *     cdef np.ndarray[attr_t, ndim=1] lower_not_end = numpy.asarray(list(store.add(st) for st in LOWER_NOT_END), dtype=numpy.uint64)
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")
 *     cdef attr_t NSUBJ_MARK = store.add("nsubj")             # <<<<<<<<<<<<<<
 *     cdef attr_t IN_TAG = store.add('IN')
 *     cdef attr_t MARK_DEP = store.add("mark")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_n_u_nsubj); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "neuralcoref/document.pyx":83
 *     cdef attr_t POSSESSIVE_MARK = store.add("'s")
 *     cdef attr_t NSUBJ_MARK = store.add("nsubj")
 *     cdef attr_t IN_TAG = store.add('IN')             # <<<<<<<<<<<<<<
 *     cdef attr_t MARK_DEP = store.add("mark")
 *     hashes.no_coref_list.arr, hashes.no_coref_list.length = <hash_t*>no_coref_list.data, no_coref_list.shape[0]
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_u_IN); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "neuralcoref/document.pyx":84
 *     cdef attr_t NSUBJ_MARK = store.add("nsubj")
 *     cdef attr_t IN_TAG = store.add('IN')
 *     cdef attr_t MARK_DEP = store.add("mark")             # <<<<<<<<<<<<<<
 *     hashes.no_coref_list.arr, hashes.no_coref_list.length = <hash_t*>no_coref_list.data, no_coref_list.shape[0]
 *     hashes.keep_tags.arr, hashes.keep_tags.length = <hash_t*>keep_tags.data, keep_tags.shape[0]
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_u_mark); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "neuralcoref/document.pyx":106
 *     cdef uint32_t minchild_idx
 *     cdef uint32_t maxchild_idx
 *     if debug: print(" Enlarge span")             # <<<<<<<<<<<<<<
 *     minchild_idx = i
 *     maxchild_idx = i
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Enlarge_span); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "neuralcoref/document.pyx":157
 *     cdef int num = mentions_spans.num
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))             # <<<<<<<<<<<<<<
 *     mentions_spans.spans[num].start = start
 *     mentions_spans.spans[num].end = end
 */
  __pyx_ustring__8 = PyUnicode_FromUnicode(__pyx_k__9, (sizeof(__pyx_k__9) / sizeof(Py_UNICODE))-1); if (unlikely(!__pyx_ustring__8)) __PYX_ERR(0, 157, __pyx_L1_error)
  if (__Pyx_PyUnicode_READY(__pyx_ustring__8) < 0) __PYX_ERR(0, 157, __pyx_L1_error)

  /* "neuralcoref/document.pyx":162
 *     mentions_spans.num += 1
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))             # <<<<<<<<<<<<<<
 *         print(" mentions_spans.num: ", mentions_spans.num)
 *     return mentions_spans.num >= mentions_spans.max_spans
 */
  __pyx_ustring__11 = PyUnicode_FromUnicode(__pyx_k__9, (sizeof(__pyx_k__9) / sizeof(Py_UNICODE))-1); if (unlikely(!__pyx_ustring__11)) __PYX_ERR(0, 162, __pyx_L1_error)
  if (__Pyx_PyUnicode_READY(__pyx_ustring__11) < 0) __PYX_ERR(0, 162, __pyx_L1_error)

  /* "neuralcoref/document.pyx":163
 *     if debug:
 *         print(" Add span: " + ' '.join(store[doc_c[i].lex.lower] for i in range(start, end)))
 *         print(" mentions_spans.num: ", mentions_spans.num)             # <<<<<<<<<<<<<<
 *     return mentions_spans.num >= mentions_spans.max_spans
 * 
 */
  __pyx_ustring__12 = PyUnicode_FromUnicode(__pyx_k__13, (sizeof(__pyx_k__13) / sizeof(Py_UNICODE))-1); if (unlikely(!__pyx_ustring__12)) __PYX_ERR(0, 163, __pyx_L1_error)
  if (__Pyx_PyUnicode_READY(__pyx_ustring__12) < 0) __PYX_ERR(0, 163, __pyx_L1_error)

  /* "neuralcoref/document.pyx":174
 *     cdef bint test
 *     if debug:
 *         print(" Extract sents start, end:", sent_start, sent_end)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(sent_start, sent_end):
 */
  __pyx_ustring__14 = PyUnicode_FromUnicode(__pyx_k__15, (sizeof(__pyx_k__15) / sizeof(Py_UNICODE))-1); if (unlikely(!__pyx_ustring__14)) __PYX_ERR(0, 174, __pyx_L1_error)
  if (__Pyx_PyUnicode_READY(__pyx_ustring__14) < 0) __PYX_ERR(0, 174, __pyx_L1_error)

  /* "neuralcoref/document.pyx":179
 *         PyErr_CheckSignals()
 *         token = doc_c[i]
 *         if debug: print(" tok:", store[token.lex.lower], "tok.tag:", store[token.tag],             # <<<<<<<<<<<<<<
 *                         "tok.pos:", store[token.pos], "tok.dep:", store[token.dep])
 *         if use_no_coref_list and inside(token.lex.lower, hashes.no_coref_list):
 */
  __pyx_ustring__16 = PyUnicode_FromUnicode(__pyx_k__17, (sizeof(__pyx_k__17) / sizeof(Py_UNICODE))-1); if (unlikely(!__pyx_ustring__16)) __PYX_ERR(0, 179, __pyx_L1_error)
  if (__Pyx_PyUnicode_READY(__pyx_ustring__16) < 0) __PYX_ERR(0, 179, __pyx_L1_error)

  /* "neuralcoref/document.pyx":182
 *                         "tok.pos:", store[token.pos], "tok.dep:", store[token.dep])
 *         if use_no_coref_list and inside(token.lex.lower, hashes.no_coref_list):
 *             if debug: print("token in no_coref_list")             # <<<<<<<<<<<<<<
 *             continue
 *         if (not inside(token.tag, hashes.keep_tags) or inside(token.dep, hashes.leave_dep) \
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_token_in_no_coref_list); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "neuralcoref/document.pyx":186
 *         if (not inside(token.tag, hashes.keep_tags) or inside(token.dep, hashes.leave_dep) \
 *             and not inside(token.dep, hashes.keep_dep)):
 *             if debug: print("not pronoun or no right dependency")             # <<<<<<<<<<<<<<
 *             continue
 *         # pronoun
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_not_pronoun_or_no_right_dependen); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "neuralcoref/document.pyx":190
 *         # pronoun
 *         if inside(token.tag, hashes.PRP_tags): #re.match(r"PRP.*", token.tag_):
 *             if debug: print("PRP")             # <<<<<<<<<<<<<<
 *             endIdx = i + 1
 *             #span = doc_c[i: endIdx]
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_n_u_PRP); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "neuralcoref/document.pyx":207
 *             print("NP or IN:", store[token.lex.lower])
 *             if store[token.tag] == 'IN':
 *                 print("IN tag")             # <<<<<<<<<<<<<<
 *         # Take care of 's
 *         if token.lex.lower == hashes.POSSESSIVE_MARK:
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_IN_tag); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "neuralcoref/document.pyx":210
 *         # Take care of 's
 *         if token.lex.lower == hashes.POSSESSIVE_MARK:
 *             if debug: print("'s detected")             # <<<<<<<<<<<<<<
 *             h = i + token.head
 *             j = 0
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_s_detected); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "neuralcoref/document.pyx":232
 *             c = doc_c[j]
 *             if debug and j + c.head == i:
 *                 print(" token in span:", store[c.lex.lower])#, "- head & dep:", c.head, c.dep)             # <<<<<<<<<<<<<<
 *         start, end = enlarge_span(doc_c, i, sent_start, sent_end, 0, hashes, store)
 *         if token.tag == hashes.IN_TAG and token.dep == hashes.MARK_DEP and start == end:
 */
  __pyx_ustring__23 = PyUnicode_FromUnicode(__pyx_k__24, (sizeof(__pyx_k__24) / sizeof(Py_UNICODE))-1); if (unlikely(!__pyx_ustring__23)) __PYX_ERR(0, 232, __pyx_L1_error)
  if (__Pyx_PyUnicode_READY(__pyx_ustring__23) < 0) __PYX_ERR(0, 232, __pyx_L1_error)

  /* "neuralcoref/document.pyx":253
 *         #    print("==-- full span store:", span)
 *         if debug and token.tag == hashes.IN_TAG:
 *             print("IN tag")             # <<<<<<<<<<<<<<
 *         test = False
 *         for tok in doc_c[sent_start:sent_end]:
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_IN_tag); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "neuralcoref/document.pyx":260
 *                 break
 *         if test:
 *             if debug: print("Conjunction found, storing first element separately")             # <<<<<<<<<<<<<<
 *             #for c in doc:
 *             #    if c.head.i == i and inside(c.dep, hashes.conj_or_prep):
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_Conjunction_found_storing_first); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "neuralcoref/document.pyx":290
 *     if debug: print('===== doc ====:', doc)
 *     for c in doc:
 *         if debug: print(" span search:", c, "head:", c.head, "tag:", c.tag_, "pos:", c.pos_, "dep:", c.dep_)             # <<<<<<<<<<<<<<
 *     # Named entities
 *     mentions_spans = list(ent for ent in doc.ents if ent.label_ in ACCEPTED_ENTS)
 */
  __pyx_ustring__27 = PyUnicode_FromUnicode(__pyx_k__28, (sizeof(__pyx_k__28) / sizeof(Py_UNICODE))-1); if (unlikely(!__pyx_ustring__27)) __PYX_ERR(0, 290, __pyx_L1_error)
  if (__Pyx_PyUnicode_READY(__pyx_ustring__27) < 0) __PYX_ERR(0, 290, __pyx_L1_error)

  /* "neuralcoref/document.pyx":335
 *         n += 1
 *         if n >= span.doc.length:
 *             raise RuntimeError("Error while getting Mention sentence index")             # <<<<<<<<<<<<<<
 *     n = -1
 *     for i in range(root.l_edge+1):
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_Error_while_getting_Mention_sent); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "neuralcoref/document.pyx":472
 *         with io.open(name+"_vocabulary.txt", 'r', encoding='utf-8') as f:
 *             for i, line in enumerate(f):
 *                 embeddings[line.strip()] = mat[i, :]             # <<<<<<<<<<<<<<
 *                 voc_to_idx[line.strip()] = i
 *                 idx_to_voc.append(line.strip())
 */
  __pyx_slice__35 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__35)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__35);
  __Pyx_GIVEREF(__pyx_slice__35);

  /* "neuralcoref/document.pyx":470
 *         mat = numpy.load(name+"_embeddings.npy").astype(dtype='float32')
 *         average_mean = numpy.average(mat, axis=0, weights=numpy.sum(mat, axis=1))
 *         with io.open(name+"_vocabulary.txt", 'r', encoding='utf-8') as f:             # <<<<<<<<<<<<<<
 *             for i, line in enumerate(f):
 *                 embeddings[line.strip()] = mat[i, :]
 */
  __pyx_tuple__36 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "neuralcoref/document.pyx":513
 *         ''' Embedding for a word in a sentence '''
 *         if word_idx < sentence.start or word_idx >= sentence.end:
 *             return self.get_word_embedding(None)             # <<<<<<<<<<<<<<
 *         return self.get_word_embedding(sentence.doc[word_idx])
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "neuralcoref/document.pyx":538
 *                  self.get_average_embedding(ms_rights),
 *                  self.get_average_embedding(st),
 *                  (unicode_(doc_embedding[0:8]) + "...", doc_embedding)]             # <<<<<<<<<<<<<<
 *         words = [self.get_word_embedding(ms.root),
 *                  self.get_word_embedding(ms[0]),
 */
  __pyx_slice__48 = PySlice_New(__pyx_int_0, __pyx_int_8, Py_None); if (unlikely(!__pyx_slice__48)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__48);
  __Pyx_GIVEREF(__pyx_slice__48);

  /* "neuralcoref/document.pyx":610
 *     def set_genre(self, conll):
 *         if conll is not None:
 *             genre = numpy.zeros((7,), dtype='float32')             # <<<<<<<<<<<<<<
 *             genre[conll] = 1
 *         else:
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_int_7); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_tuple__50); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "neuralcoref/document.pyx":613
 *             genre[conll] = 1
 *         else:
 *             genre = numpy.array(0, ndmin=1, copy=False)             # <<<<<<<<<<<<<<
 *         return conll, genre
 * 
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "neuralcoref/document.pyx":691
 *         doc_embedding = self.embed_extractor.get_document_embedding(self.utterances) if self.embed_extractor is not None else None
 *         for mention in self.mentions:
 *             one_hot_type = numpy.zeros((4,), dtype='float32')             # <<<<<<<<<<<<<<
 *             one_hot_type[mention.mention_type] = 1
 *             features_ = {"01_MentionType": mention.mention_type,
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_int_4); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_tuple__54); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "neuralcoref/document.pyx":795
 * 
 * def mention_detection_debug(sentence):
 *     print(u" Loading spacy model")             # <<<<<<<<<<<<<<
 *     try:
 *         spacy.info('en_core_web_sm')
 */
  __pyx_ustring__59 = PyUnicode_FromUnicode(__pyx_k__60, (sizeof(__pyx_k__60) / sizeof(Py_UNICODE))-1); if (unlikely(!__pyx_ustring__59)) __PYX_ERR(0, 795, __pyx_L1_error)
  if (__Pyx_PyUnicode_READY(__pyx_ustring__59) < 0) __PYX_ERR(0, 795, __pyx_L1_error)
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_ustring__59); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "neuralcoref/document.pyx":797
 *     print(u" Loading spacy model")
 *     try:
 *         spacy.info('en_core_web_sm')             # <<<<<<<<<<<<<<
 *         model = 'en_core_web_sm'
 *     except IOError:
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_n_u_en_core_web_sm); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "neuralcoref/document.pyx":800
 *         model = 'en_core_web_sm'
 *     except IOError:
 *         print("No spacy 2 model detected, using spacy1 'en' model")             # <<<<<<<<<<<<<<
 *         spacy.info('en')
 *         model = 'en'
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_u_No_spacy_2_model_detected_using); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "neuralcoref/document.pyx":801
 *     except IOError:
 *         print("No spacy 2 model detected, using spacy1 'en' model")
 *         spacy.info('en')             # <<<<<<<<<<<<<<
 *         model = 'en'
 *     nlp = spacy.load(model)
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_n_u_en); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "neuralcoref/document.pyx":804
 *         model = 'en'
 *     nlp = spacy.load(model)
 *     doc = nlp(sentence.decode('utf-8'))             # <<<<<<<<<<<<<<
 *     mentions = extract_mentions_spans(doc, use_no_coref_list=False, debug=True)
 *     for mention in mentions:
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_u_utf_8); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(3, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(3, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(3, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(3, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(3, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(3, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(3, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1006
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(3, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(3, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "neuralcoref/document.pyx":453
 *     Compute words embedding features for mentions
 *     '''
 *     def __init__(self, pretrained_model_path):             # <<<<<<<<<<<<<<
 *         _, self.static_embeddings, self.stat_idx, self.stat_voc = self.load_embeddings_from_file(pretrained_model_path + "static_word")
 *         _, self.tuned_embeddings, self.tun_idx, self.tun_voc = self.load_embeddings_from_file(pretrained_model_path + "tuned_word")
 */
  __pyx_tuple__78 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_pretrained_model_path, __pyx_n_s__77, __pyx_n_s_shape2); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neuralcoref_document_pyx, __pyx_n_s_init, 453, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 453, __pyx_L1_error)

  /* "neuralcoref/document.pyx":463
 * 
 *     @staticmethod
 *     def load_embeddings_from_file(name):             # <<<<<<<<<<<<<<
 *         print("Loading embeddings from", name)
 *         embeddings = {}
 */
  __pyx_tuple__79 = PyTuple_Pack(9, __pyx_n_s_name_2, __pyx_n_s_embeddings, __pyx_n_s_voc_to_idx, __pyx_n_s_idx_to_voc, __pyx_n_s_mat, __pyx_n_s_average_mean, __pyx_n_s_f, __pyx_n_s_i, __pyx_n_s_line); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neuralcoref_document_pyx, __pyx_n_s_load_embeddings_from_file, 463, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 463, __pyx_L1_error)

  /* "neuralcoref/document.pyx":478
 * 
 *     @staticmethod
 *     def normalize_word(w):             # <<<<<<<<<<<<<<
 *         if w is None:
 *             return MISSING_WORD
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_n_s_w); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neuralcoref_document_pyx, __pyx_n_s_normalize_word, 478, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 478, __pyx_L1_error)

  /* "neuralcoref/document.pyx":483
 *         return re.sub(r"\d", u"0", w.lower_)
 * 
 *     def get_document_embedding(self, utterances_list):             # <<<<<<<<<<<<<<
 *         ''' Embedding for the document '''
 *     #    We could also use this: embed_vector = numpy.copy(self.average_mean)#numpy.zeros(self.shape)
 */
  __pyx_tuple__81 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_utterances_list, __pyx_n_s_embed_vector, __pyx_n_s_utt, __pyx_n_s__77, __pyx_n_s_utt_embed); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neuralcoref_document_pyx, __pyx_n_s_get_document_embedding, 483, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 483, __pyx_L1_error)

  /* "neuralcoref/document.pyx":493
 *         return embed_vector/max(len(utterances_list), 1)
 * 
 *     def get_stat_word(self, word):             # <<<<<<<<<<<<<<
 *         if word in self.static_embeddings:
 *             return word, self.static_embeddings.get(word)
 */
  __pyx_tuple__82 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_word); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neuralcoref_document_pyx, __pyx_n_s_get_stat_word, 493, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 493, __pyx_L1_error)

  /* "neuralcoref/document.pyx":499
 *             return UNKNOWN_WORD, self.fallback
 * 
 *     def get_word_embedding(self, word, static=False):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a single word (tuned if possible, otherwise static) '''
 *         norm_word = self.normalize_word(word)
 */
  __pyx_tuple__83 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_word, __pyx_n_s_static, __pyx_n_s_norm_word); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neuralcoref_document_pyx, __pyx_n_s_get_word_embedding, 499, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 499, __pyx_L1_error)
  __pyx_tuple__84 = PyTuple_Pack(1, ((PyObject *)Py_False)); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "neuralcoref/document.pyx":510
 *                 return self.get_stat_word(norm_word)
 * 
 *     def get_word_in_sentence(self, word_idx, sentence):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a word in a sentence '''
 *         if word_idx < sentence.start or word_idx >= sentence.end:
 */
  __pyx_tuple__85 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_word_idx, __pyx_n_s_sentence); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neuralcoref_document_pyx, __pyx_n_s_get_word_in_sentence, 510, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 510, __pyx_L1_error)

  /* "neuralcoref/document.pyx":516
 *         return self.get_word_embedding(sentence.doc[word_idx])
 * 
 *     def get_average_embedding(self, token_list):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a list of words '''
 *         embed_vector = numpy.zeros(self.shape, dtype='float32') #We could also use numpy.copy(self.average_mean)
 */
  __pyx_tuple__86 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_token_list, __pyx_n_s_embed_vector, __pyx_n_s_word_list, __pyx_n_s_tok, __pyx_n_s_word, __pyx_n_s_embed); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neuralcoref_document_pyx, __pyx_n_s_get_average_embedding, 516, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 516, __pyx_L1_error)

  /* "neuralcoref/document.pyx":527
 *         return word_list, (embed_vector/max(len(word_list), 1))
 * 
 *     def get_mention_embeddings(self, mention, doc_embedding):             # <<<<<<<<<<<<<<
 *         ''' Get span (averaged) and word (single) embeddings of a mention '''
 *         ms = mention.span
 */
  __pyx_tuple__87 = PyTuple_Pack(13, __pyx_n_s_self, __pyx_n_s_mention, __pyx_n_s_doc_embedding, __pyx_n_s_ms, __pyx_n_s_st, __pyx_n_s_ms_lefts, __pyx_n_s_ms_rights, __pyx_n_s_head_2, __pyx_n_s_spans, __pyx_n_s_words, __pyx_n_s_spans_embeddings_2, __pyx_n_s_words_embeddings_2, __pyx_n_s_em); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neuralcoref_document_pyx, __pyx_n_s_get_mention_embeddings, 527, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 527, __pyx_L1_error)

  /* "neuralcoref/document.pyx":794
 *         self.pairs_men = numpy.asarray(pairs_men, dtype=numpy.uint64)
 * 
 * def mention_detection_debug(sentence):             # <<<<<<<<<<<<<<
 *     print(u" Loading spacy model")
 *     try:
 */
  __pyx_tuple__88 = PyTuple_Pack(6, __pyx_n_s_sentence, __pyx_n_s_model, __pyx_n_s_nlp, __pyx_n_s_doc_2, __pyx_n_s_mentions, __pyx_n_s_mention); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neuralcoref_document_pyx, __pyx_n_s_mention_detection_debug, 794, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_500 = PyInt_FromLong(500); if (unlikely(!__pyx_int_500)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_11neuralcoref_8document_Mention = &__pyx_vtable_11neuralcoref_8document_Mention;
  __pyx_vtable_11neuralcoref_8document_Mention.heads_agree = (int (*)(struct __pyx_obj_11neuralcoref_8document_Mention *, struct __pyx_obj_11neuralcoref_8document_Mention *, int __pyx_skip_dispatch))__pyx_f_11neuralcoref_8document_7Mention_heads_agree;
  __pyx_vtable_11neuralcoref_8document_Mention.exact_match = (int (*)(struct __pyx_obj_11neuralcoref_8document_Mention *, struct __pyx_obj_11neuralcoref_8document_Mention *, int __pyx_skip_dispatch))__pyx_f_11neuralcoref_8document_7Mention_exact_match;
  __pyx_vtable_11neuralcoref_8document_Mention.relaxed_match = (int (*)(struct __pyx_obj_11neuralcoref_8document_Mention *, struct __pyx_obj_11neuralcoref_8document_Mention *, int __pyx_skip_dispatch))__pyx_f_11neuralcoref_8document_7Mention_relaxed_match;
  __pyx_vtable_11neuralcoref_8document_Mention.overlapping = (int (*)(struct __pyx_obj_11neuralcoref_8document_Mention *, struct __pyx_obj_11neuralcoref_8document_Mention *, int __pyx_skip_dispatch))__pyx_f_11neuralcoref_8document_7Mention_overlapping;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document_Mention) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document_Mention.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document_Mention.tp_dictoffset && __pyx_type_11neuralcoref_8document_Mention.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document_Mention.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_11neuralcoref_8document_Mention.tp_dict, __pyx_vtabptr_11neuralcoref_8document_Mention) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Mention", (PyObject *)&__pyx_type_11neuralcoref_8document_Mention) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11neuralcoref_8document_Mention) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  __pyx_ptype_11neuralcoref_8document_Mention = &__pyx_type_11neuralcoref_8document_Mention;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document_Document) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document_Document.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document_Document.tp_dictoffset && __pyx_type_11neuralcoref_8document_Document.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document_Document.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_11neuralcoref_8document_Document, "__len__"); if (unlikely(!wrapper)) __PYX_ERR(0, 565, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_11neuralcoref_8document_8Document_6__len__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_11neuralcoref_8document_8Document_6__len__.doc = __pyx_doc_11neuralcoref_8document_8Document_6__len__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_11neuralcoref_8document_8Document_6__len__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_11neuralcoref_8document_Document, "__getitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 565, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_11neuralcoref_8document_8Document_8__getitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_11neuralcoref_8document_8Document_8__getitem__.doc = __pyx_doc_11neuralcoref_8document_8Document_8__getitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_11neuralcoref_8document_8Document_8__getitem__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_11neuralcoref_8document_Document, "__iter__"); if (unlikely(!wrapper)) __PYX_ERR(0, 565, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_11neuralcoref_8document_8Document_10__iter__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_11neuralcoref_8document_8Document_10__iter__.doc = __pyx_doc_11neuralcoref_8document_8Document_10__iter__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_11neuralcoref_8document_8Document_10__iter__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "Document", (PyObject *)&__pyx_type_11neuralcoref_8document_Document) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11neuralcoref_8document_Document) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  __pyx_ptype_11neuralcoref_8document_Document = &__pyx_type_11neuralcoref_8document_Document;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups = &__pyx_type_11neuralcoref_8document___pyx_scope_struct____pyx_f_11neuralcoref_8document_get_hash_lookups;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_1_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_1_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_2_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_2_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_2_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_2_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_2_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_2_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_3_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_3_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_3_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_3_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_3_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_4_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_4_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_4_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_4_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_4_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_4_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_5_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_5_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_5_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_5_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_5_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_5_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_6_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_6_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_6_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_6_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_6_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_6_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_7_genexpr) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_7_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_7_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_7_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_7_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_7_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_7_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_8_genexpr) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_8_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_8_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_8_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_8_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_8_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_8_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_9_genexpr) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_9_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_9_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_9_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_9_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_9_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_9_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_10___pyx_f_11neuralcoref_8document_add_span;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_11_genexpr) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_11_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_11_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_11_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_11_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_11_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_11_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_12_genexpr) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_12_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_12_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_12_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_12_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_12_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_12_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans) < 0) __PYX_ERR(0, 278, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_13___pyx_f_11neuralcoref_8document_extract_mentions_spans;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_14_genexpr) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_14_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_14_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_14_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_14_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_14_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_14_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_15_genexpr) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_15_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_15_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_15_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_15_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_15_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_15_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type) < 0) __PYX_ERR(0, 342, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_16___pyx_f_11neuralcoref_8document_get_span_type;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_17_genexpr) < 0) __PYX_ERR(0, 347, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_17_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_17_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_17_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_17_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_17_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_17_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_18___get__) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_18___get__.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_18___get__.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_18___get__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_18___get__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_18___get__ = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_18___get__;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_19_genexpr) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_19_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_19_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_19_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_19_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_19_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_19_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_20___str__) < 0) __PYX_ERR(0, 616, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_20___str__.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_20___str__.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_20___str__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_20___str__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_20___str__ = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_20___str__;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_21_genexpr) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_21_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_21_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_21_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_21_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_21_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_21_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_22_genexpr) < 0) __PYX_ERR(0, 619, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_22_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_22_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_22_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_22_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_22_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_22_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_23___iter__) < 0) __PYX_ERR(0, 629, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_23___iter__.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_23___iter__.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_23___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_23___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_23___iter__ = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_23___iter__;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_24__process_mentions) < 0) __PYX_ERR(0, 675, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_24__process_mentions.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_24__process_mentions.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_24__process_mentions.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_24__process_mentions.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_24__process_mentions = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_24__process_mentions;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_25_genexpr) < 0) __PYX_ERR(0, 679, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_25_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_25_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_25_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_25_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_25_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_25_genexpr;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features) < 0) __PYX_ERR(0, 685, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_26_set_mentions_features;
  if (PyType_Ready(&__pyx_type_11neuralcoref_8document___pyx_scope_struct_27_genexpr) < 0) __PYX_ERR(0, 697, __pyx_L1_error)
  __pyx_type_11neuralcoref_8document___pyx_scope_struct_27_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11neuralcoref_8document___pyx_scope_struct_27_genexpr.tp_dictoffset && __pyx_type_11neuralcoref_8document___pyx_scope_struct_27_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11neuralcoref_8document___pyx_scope_struct_27_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_11neuralcoref_8document___pyx_scope_struct_27_genexpr = &__pyx_type_11neuralcoref_8document___pyx_scope_struct_27_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_ptype_5cymem_5cymem_Pool = __Pyx_ImportType("cymem.cymem", "Pool", sizeof(struct __pyx_obj_5cymem_5cymem_Pool), 1); if (unlikely(!__pyx_ptype_5cymem_5cymem_Pool)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_vtabptr_5cymem_5cymem_Pool = (struct __pyx_vtabstruct_5cymem_5cymem_Pool*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_Pool->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_Pool)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_ptype_5cymem_5cymem_Address = __Pyx_ImportType("cymem.cymem", "Address", sizeof(struct __pyx_obj_5cymem_5cymem_Address), 1); if (unlikely(!__pyx_ptype_5cymem_5cymem_Address)) __PYX_ERR(4, 11, __pyx_L1_error)
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(5, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(3, 164, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(3, 186, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(3, 190, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(3, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(3, 872, __pyx_L1_error)
  __pyx_ptype_7preshed_4maps_PreshMap = __Pyx_ImportType("preshed.maps", "PreshMap", sizeof(struct __pyx_obj_7preshed_4maps_PreshMap), 1); if (unlikely(!__pyx_ptype_7preshed_4maps_PreshMap)) __PYX_ERR(6, 36, __pyx_L1_error)
  __pyx_vtabptr_7preshed_4maps_PreshMap = (struct __pyx_vtabstruct_7preshed_4maps_PreshMap*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMap->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMap)) __PYX_ERR(6, 36, __pyx_L1_error)
  __pyx_ptype_7preshed_4maps_PreshMapArray = __Pyx_ImportType("preshed.maps", "PreshMapArray", sizeof(struct __pyx_obj_7preshed_4maps_PreshMapArray), 1); if (unlikely(!__pyx_ptype_7preshed_4maps_PreshMapArray)) __PYX_ERR(6, 44, __pyx_L1_error)
  __pyx_vtabptr_7preshed_4maps_PreshMapArray = (struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMapArray->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMapArray)) __PYX_ERR(6, 44, __pyx_L1_error)
  __pyx_ptype_7preshed_7counter_PreshCounter = __Pyx_ImportType("preshed.counter", "PreshCounter", sizeof(struct __pyx_obj_7preshed_7counter_PreshCounter), 1); if (unlikely(!__pyx_ptype_7preshed_7counter_PreshCounter)) __PYX_ERR(7, 13, __pyx_L1_error)
  __pyx_vtabptr_7preshed_7counter_PreshCounter = (struct __pyx_vtabstruct_7preshed_7counter_PreshCounter*)__Pyx_GetVtable(__pyx_ptype_7preshed_7counter_PreshCounter->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_7counter_PreshCounter)) __PYX_ERR(7, 13, __pyx_L1_error)
  __pyx_ptype_5spacy_7strings_StringStore = __Pyx_ImportType("spacy.strings", "StringStore", sizeof(struct __pyx_obj_5spacy_7strings_StringStore), 1); if (unlikely(!__pyx_ptype_5spacy_7strings_StringStore)) __PYX_ERR(8, 23, __pyx_L1_error)
  __pyx_vtabptr_5spacy_7strings_StringStore = (struct __pyx_vtabstruct_5spacy_7strings_StringStore*)__Pyx_GetVtable(__pyx_ptype_5spacy_7strings_StringStore->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_7strings_StringStore)) __PYX_ERR(8, 23, __pyx_L1_error)
  __pyx_ptype_5spacy_10morphology_Morphology = __Pyx_ImportType("spacy.morphology", "Morphology", sizeof(struct __pyx_obj_5spacy_10morphology_Morphology), 1); if (unlikely(!__pyx_ptype_5spacy_10morphology_Morphology)) __PYX_ERR(9, 25, __pyx_L1_error)
  __pyx_vtabptr_5spacy_10morphology_Morphology = (struct __pyx_vtabstruct_5spacy_10morphology_Morphology*)__Pyx_GetVtable(__pyx_ptype_5spacy_10morphology_Morphology->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_10morphology_Morphology)) __PYX_ERR(9, 25, __pyx_L1_error)
  __pyx_ptype_5spacy_5vocab_Vocab = __Pyx_ImportType("spacy.vocab", "Vocab", sizeof(struct __pyx_obj_5spacy_5vocab_Vocab), 1); if (unlikely(!__pyx_ptype_5spacy_5vocab_Vocab)) __PYX_ERR(10, 27, __pyx_L1_error)
  __pyx_vtabptr_5spacy_5vocab_Vocab = (struct __pyx_vtabstruct_5spacy_5vocab_Vocab*)__Pyx_GetVtable(__pyx_ptype_5spacy_5vocab_Vocab->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_5vocab_Vocab)) __PYX_ERR(10, 27, __pyx_L1_error)
  __pyx_ptype_5spacy_6tokens_3doc_Doc = __Pyx_ImportType("spacy.tokens.doc", "Doc", sizeof(struct __pyx_obj_5spacy_6tokens_3doc_Doc), 1); if (unlikely(!__pyx_ptype_5spacy_6tokens_3doc_Doc)) __PYX_ERR(11, 30, __pyx_L1_error)
  __pyx_vtabptr_5spacy_6tokens_3doc_Doc = (struct __pyx_vtabstruct_5spacy_6tokens_3doc_Doc*)__Pyx_GetVtable(__pyx_ptype_5spacy_6tokens_3doc_Doc->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_6tokens_3doc_Doc)) __PYX_ERR(11, 30, __pyx_L1_error)
  __pyx_ptype_5spacy_6tokens_4span_Span = __Pyx_ImportType("spacy.tokens.span", "Span", sizeof(struct __pyx_obj_5spacy_6tokens_4span_Span), 1); if (unlikely(!__pyx_ptype_5spacy_6tokens_4span_Span)) __PYX_ERR(12, 7, __pyx_L1_error)
  __pyx_vtabptr_5spacy_6tokens_4span_Span = (struct __pyx_vtabstruct_5spacy_6tokens_4span_Span*)__Pyx_GetVtable(__pyx_ptype_5spacy_6tokens_4span_Span->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_6tokens_4span_Span)) __PYX_ERR(12, 7, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("spacy.vocab"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "EMPTY_LEXEME", (void **)&__pyx_vp_5spacy_5vocab_EMPTY_LEXEME, "struct __pyx_t_5spacy_7structs_LexemeC") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("preshed.maps"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "map_get", (void (**)(void))&__pyx_f_7preshed_4maps_map_get, "void *(struct __pyx_t_7preshed_4maps_MapStruct const *, __pyx_t_7preshed_4maps_key_t const )") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "map_set", (void (**)(void))&__pyx_f_7preshed_4maps_map_set, "void (struct __pyx_obj_5cymem_5cymem_Pool *, struct __pyx_t_7preshed_4maps_MapStruct *, __pyx_t_7preshed_4maps_key_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "map_init", (void (**)(void))&__pyx_f_7preshed_4maps_map_init, "void (struct __pyx_obj_5cymem_5cymem_Pool *, struct __pyx_t_7preshed_4maps_MapStruct *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_ImportModule("murmurhash.mrmr"); if (!__pyx_t_2) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_2, "hash64", (void (**)(void))&__pyx_f_10murmurhash_4mrmr_hash64, "uint64_t (void *, int, uint64_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__)
    #define CYTHON_SMALL_CODE __attribute__((optimize("Os")))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initdocument(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initdocument(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_document(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_document(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_document(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_document(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("document", __pyx_methods, __pyx_k_data_models_and_pre_processing_f, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_neuralcoref__document) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "neuralcoref.document")) {
      if (unlikely(PyDict_SetItemString(modules, "neuralcoref.document", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_variable_import_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_document(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "neuralcoref/document.pyx":10
 * from __future__ import print_function
 * 
 * import re             # <<<<<<<<<<<<<<
 * import io
 * from six import string_types, integer_types
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_re, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":11
 * 
 * import re
 * import io             # <<<<<<<<<<<<<<
 * from six import string_types, integer_types
 * from libc.stdint cimport uint8_t, uint32_t, int32_t, uint64_t
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_io, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_io, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":12
 * import re
 * import io
 * from six import string_types, integer_types             # <<<<<<<<<<<<<<
 * from libc.stdint cimport uint8_t, uint32_t, int32_t, uint64_t
 * 
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_string_types);
  __Pyx_GIVEREF(__pyx_n_s_string_types);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_string_types);
  __Pyx_INCREF(__pyx_n_s_integer_types);
  __Pyx_GIVEREF(__pyx_n_s_integer_types);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_integer_types);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_six, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_string_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_types, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_integer_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_integer_types, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":15
 * from libc.stdint cimport uint8_t, uint32_t, int32_t, uint64_t
 * 
 * from neuralcoref.compat import unicode_             # <<<<<<<<<<<<<<
 * from neuralcoref.utils import encode_distance, parallel_process
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_unicode);
  __Pyx_GIVEREF(__pyx_n_s_unicode);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_unicode);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_neuralcoref_compat, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unicode, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":16
 * 
 * from neuralcoref.compat import unicode_
 * from neuralcoref.utils import encode_distance, parallel_process             # <<<<<<<<<<<<<<
 * 
 * try:
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_encode_distance);
  __Pyx_GIVEREF(__pyx_n_s_encode_distance);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_encode_distance);
  __Pyx_INCREF(__pyx_n_s_parallel_process);
  __Pyx_GIVEREF(__pyx_n_s_parallel_process);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_parallel_process);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_neuralcoref_utils, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_encode_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_encode_distance, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_parallel_process); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_parallel_process, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":18
 * from neuralcoref.utils import encode_distance, parallel_process
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip_longest as zip_longest
 * except ImportError: # will be 3.x series
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "neuralcoref/document.pyx":19
 * 
 * try:
 *     from itertools import izip_longest as zip_longest             # <<<<<<<<<<<<<<
 * except ImportError: # will be 3.x series
 *     from itertools import zip_longest
 */
      __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_izip_longest);
      __Pyx_GIVEREF(__pyx_n_s_izip_longest);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_izip_longest);
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_izip_longest); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_zip_longest, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "neuralcoref/document.pyx":18
 * from neuralcoref.utils import encode_distance, parallel_process
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip_longest as zip_longest
 * except ImportError: # will be 3.x series
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "neuralcoref/document.pyx":20
 * try:
 *     from itertools import izip_longest as zip_longest
 * except ImportError: # will be 3.x series             # <<<<<<<<<<<<<<
 *     from itertools import zip_longest
 * 
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("neuralcoref.document", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_7) < 0) __PYX_ERR(0, 20, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);

      /* "neuralcoref/document.pyx":21
 *     from itertools import izip_longest as zip_longest
 * except ImportError: # will be 3.x series
 *     from itertools import zip_longest             # <<<<<<<<<<<<<<
 * 
 * from cymem.cymem cimport Pool
 */
      __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 21, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_zip_longest);
      __Pyx_GIVEREF(__pyx_n_s_zip_longest);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_zip_longest);
      __pyx_t_9 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_8, -1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 21, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_ImportFrom(__pyx_t_9, __pyx_n_s_zip_longest); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 21, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_zip_longest, __pyx_t_8) < 0) __PYX_ERR(0, 21, __pyx_L4_except_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "neuralcoref/document.pyx":18
 * from neuralcoref.utils import encode_distance, parallel_process
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip_longest as zip_longest
 * except ImportError: # will be 3.x series
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L7_try_end:;
  }

  /* "neuralcoref/document.pyx":26
 * from cpython.exc cimport PyErr_CheckSignals
 * 
 * import spacy             # <<<<<<<<<<<<<<
 * from spacy.strings cimport StringStore
 * from spacy.tokens.span cimport Span
 */
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_spacy, 0, -1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_spacy, __pyx_t_7) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":32
 * from spacy.structs cimport TokenC
 * cimport numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * import numpy
 * 
 */
  __pyx_t_6 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 32, __pyx_L1_error)

  /* "neuralcoref/document.pyx":33
 * cimport numpy as np
 * np.import_array()
 * import numpy             # <<<<<<<<<<<<<<
 * 
 * #########################
 */
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_7) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":39
 * #########################
 * 
 * MENTION_TYPE = {"PRONOMINAL": 0, "NOMINAL": 1, "PROPER": 2, "LIST": 3}             # <<<<<<<<<<<<<<
 * MENTION_LABEL = {0: "PRONOMINAL", 1: "NOMINAL", 2: "PROPER", 3: "LIST"}
 * 
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_u_PRONOMINAL, __pyx_int_0) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_u_NOMINAL, __pyx_int_1) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_u_PROPER, __pyx_int_2) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_u_LIST, __pyx_int_3) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MENTION_TYPE, __pyx_t_7) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":40
 * 
 * MENTION_TYPE = {"PRONOMINAL": 0, "NOMINAL": 1, "PROPER": 2, "LIST": 3}
 * MENTION_LABEL = {0: "PRONOMINAL", 1: "NOMINAL", 2: "PROPER", 3: "LIST"}             # <<<<<<<<<<<<<<
 * 
 * NO_COREF_LIST = ["i", "me", "my", "you", "your"]
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_int_0, __pyx_n_u_PRONOMINAL) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_int_1, __pyx_n_u_NOMINAL) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_int_2, __pyx_n_u_PROPER) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_int_3, __pyx_n_u_LIST) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MENTION_LABEL, __pyx_t_7) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":42
 * MENTION_LABEL = {0: "PRONOMINAL", 1: "NOMINAL", 2: "PROPER", 3: "LIST"}
 * 
 * NO_COREF_LIST = ["i", "me", "my", "you", "your"]             # <<<<<<<<<<<<<<
 * KEEP_TAGS = ["NN", "NNP", "NNPS", "NNS", "PRP", "PRP$", "DT", "IN"]
 * PROPERS_TAGS = ["NN", "NNS", "NNP", "NNPS"]
 */
  __pyx_t_7 = PyList_New(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_u_i);
  __Pyx_GIVEREF(__pyx_n_u_i);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_u_i);
  __Pyx_INCREF(__pyx_n_u_me);
  __Pyx_GIVEREF(__pyx_n_u_me);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_u_me);
  __Pyx_INCREF(__pyx_n_u_my);
  __Pyx_GIVEREF(__pyx_n_u_my);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_u_my);
  __Pyx_INCREF(__pyx_n_u_you);
  __Pyx_GIVEREF(__pyx_n_u_you);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_n_u_you);
  __Pyx_INCREF(__pyx_n_u_your);
  __Pyx_GIVEREF(__pyx_n_u_your);
  PyList_SET_ITEM(__pyx_t_7, 4, __pyx_n_u_your);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NO_COREF_LIST, __pyx_t_7) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":43
 * 
 * NO_COREF_LIST = ["i", "me", "my", "you", "your"]
 * KEEP_TAGS = ["NN", "NNP", "NNPS", "NNS", "PRP", "PRP$", "DT", "IN"]             # <<<<<<<<<<<<<<
 * PROPERS_TAGS = ["NN", "NNS", "NNP", "NNPS"]
 * PRP_TAGS = ["PRP", "PRP$"]
 */
  __pyx_t_7 = PyList_New(8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_u_NN);
  __Pyx_GIVEREF(__pyx_n_u_NN);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_u_NN);
  __Pyx_INCREF(__pyx_n_u_NNP);
  __Pyx_GIVEREF(__pyx_n_u_NNP);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_u_NNP);
  __Pyx_INCREF(__pyx_n_u_NNPS);
  __Pyx_GIVEREF(__pyx_n_u_NNPS);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_u_NNPS);
  __Pyx_INCREF(__pyx_n_u_NNS);
  __Pyx_GIVEREF(__pyx_n_u_NNS);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_n_u_NNS);
  __Pyx_INCREF(__pyx_n_u_PRP);
  __Pyx_GIVEREF(__pyx_n_u_PRP);
  PyList_SET_ITEM(__pyx_t_7, 4, __pyx_n_u_PRP);
  __Pyx_INCREF(__pyx_kp_u_PRP_2);
  __Pyx_GIVEREF(__pyx_kp_u_PRP_2);
  PyList_SET_ITEM(__pyx_t_7, 5, __pyx_kp_u_PRP_2);
  __Pyx_INCREF(__pyx_n_u_DT);
  __Pyx_GIVEREF(__pyx_n_u_DT);
  PyList_SET_ITEM(__pyx_t_7, 6, __pyx_n_u_DT);
  __Pyx_INCREF(__pyx_n_u_IN);
  __Pyx_GIVEREF(__pyx_n_u_IN);
  PyList_SET_ITEM(__pyx_t_7, 7, __pyx_n_u_IN);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEEP_TAGS, __pyx_t_7) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":44
 * NO_COREF_LIST = ["i", "me", "my", "you", "your"]
 * KEEP_TAGS = ["NN", "NNP", "NNPS", "NNS", "PRP", "PRP$", "DT", "IN"]
 * PROPERS_TAGS = ["NN", "NNS", "NNP", "NNPS"]             # <<<<<<<<<<<<<<
 * PRP_TAGS = ["PRP", "PRP$"]
 * LEAVE_DEP = ["det", "compound", "appos"]
 */
  __pyx_t_7 = PyList_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_u_NN);
  __Pyx_GIVEREF(__pyx_n_u_NN);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_u_NN);
  __Pyx_INCREF(__pyx_n_u_NNS);
  __Pyx_GIVEREF(__pyx_n_u_NNS);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_u_NNS);
  __Pyx_INCREF(__pyx_n_u_NNP);
  __Pyx_GIVEREF(__pyx_n_u_NNP);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_u_NNP);
  __Pyx_INCREF(__pyx_n_u_NNPS);
  __Pyx_GIVEREF(__pyx_n_u_NNPS);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_n_u_NNPS);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PROPERS_TAGS, __pyx_t_7) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":45
 * KEEP_TAGS = ["NN", "NNP", "NNPS", "NNS", "PRP", "PRP$", "DT", "IN"]
 * PROPERS_TAGS = ["NN", "NNS", "NNP", "NNPS"]
 * PRP_TAGS = ["PRP", "PRP$"]             # <<<<<<<<<<<<<<
 * LEAVE_DEP = ["det", "compound", "appos"]
 * KEEP_DEP = ["nsubj", "dobj", "iobj", "pobj"]
 */
  __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_u_PRP);
  __Pyx_GIVEREF(__pyx_n_u_PRP);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_u_PRP);
  __Pyx_INCREF(__pyx_kp_u_PRP_2);
  __Pyx_GIVEREF(__pyx_kp_u_PRP_2);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_kp_u_PRP_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PRP_TAGS, __pyx_t_7) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":46
 * PROPERS_TAGS = ["NN", "NNS", "NNP", "NNPS"]
 * PRP_TAGS = ["PRP", "PRP$"]
 * LEAVE_DEP = ["det", "compound", "appos"]             # <<<<<<<<<<<<<<
 * KEEP_DEP = ["nsubj", "dobj", "iobj", "pobj"]
 * REMOVE_POS = ["CCONJ", "INTJ", "ADP"]
 */
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_u_det);
  __Pyx_GIVEREF(__pyx_n_u_det);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_u_det);
  __Pyx_INCREF(__pyx_n_u_compound);
  __Pyx_GIVEREF(__pyx_n_u_compound);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_u_compound);
  __Pyx_INCREF(__pyx_n_u_appos);
  __Pyx_GIVEREF(__pyx_n_u_appos);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_u_appos);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LEAVE_DEP, __pyx_t_7) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":47
 * PRP_TAGS = ["PRP", "PRP$"]
 * LEAVE_DEP = ["det", "compound", "appos"]
 * KEEP_DEP = ["nsubj", "dobj", "iobj", "pobj"]             # <<<<<<<<<<<<<<
 * REMOVE_POS = ["CCONJ", "INTJ", "ADP"]
 * LOWER_NOT_END = ["'s", ',', '.', '!', '?', ':', ';']
 */
  __pyx_t_7 = PyList_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_u_nsubj);
  __Pyx_GIVEREF(__pyx_n_u_nsubj);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_u_nsubj);
  __Pyx_INCREF(__pyx_n_u_dobj);
  __Pyx_GIVEREF(__pyx_n_u_dobj);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_u_dobj);
  __Pyx_INCREF(__pyx_n_u_iobj);
  __Pyx_GIVEREF(__pyx_n_u_iobj);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_u_iobj);
  __Pyx_INCREF(__pyx_n_u_pobj);
  __Pyx_GIVEREF(__pyx_n_u_pobj);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_n_u_pobj);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEEP_DEP, __pyx_t_7) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":48
 * LEAVE_DEP = ["det", "compound", "appos"]
 * KEEP_DEP = ["nsubj", "dobj", "iobj", "pobj"]
 * REMOVE_POS = ["CCONJ", "INTJ", "ADP"]             # <<<<<<<<<<<<<<
 * LOWER_NOT_END = ["'s", ',', '.', '!', '?', ':', ';']
 * ACCEPTED_ENTS = ["PERSON", "NORP", "FACILITY", "ORG", "GPE", "LOC", "PRODUCT", "EVENT", "WORK_OF_ART", "LANGUAGE"]
 */
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_u_CCONJ);
  __Pyx_GIVEREF(__pyx_n_u_CCONJ);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_u_CCONJ);
  __Pyx_INCREF(__pyx_n_u_INTJ);
  __Pyx_GIVEREF(__pyx_n_u_INTJ);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_u_INTJ);
  __Pyx_INCREF(__pyx_n_u_ADP);
  __Pyx_GIVEREF(__pyx_n_u_ADP);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_u_ADP);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_REMOVE_POS, __pyx_t_7) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":49
 * KEEP_DEP = ["nsubj", "dobj", "iobj", "pobj"]
 * REMOVE_POS = ["CCONJ", "INTJ", "ADP"]
 * LOWER_NOT_END = ["'s", ',', '.', '!', '?', ':', ';']             # <<<<<<<<<<<<<<
 * ACCEPTED_ENTS = ["PERSON", "NORP", "FACILITY", "ORG", "GPE", "LOC", "PRODUCT", "EVENT", "WORK_OF_ART", "LANGUAGE"]
 * WHITESPACE_PATTERN = r"\s+|_+"
 */
  __pyx_t_7 = PyList_New(7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_kp_u_s);
  __Pyx_GIVEREF(__pyx_kp_u_s);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_s);
  __Pyx_INCREF(__pyx_kp_u__30);
  __Pyx_GIVEREF(__pyx_kp_u__30);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_kp_u__30);
  __Pyx_INCREF(__pyx_kp_u__44);
  __Pyx_GIVEREF(__pyx_kp_u__44);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u__44);
  __Pyx_INCREF(__pyx_kp_u__45);
  __Pyx_GIVEREF(__pyx_kp_u__45);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_kp_u__45);
  __Pyx_INCREF(__pyx_kp_u__46);
  __Pyx_GIVEREF(__pyx_kp_u__46);
  PyList_SET_ITEM(__pyx_t_7, 4, __pyx_kp_u__46);
  __Pyx_INCREF(__pyx_kp_u__75);
  __Pyx_GIVEREF(__pyx_kp_u__75);
  PyList_SET_ITEM(__pyx_t_7, 5, __pyx_kp_u__75);
  __Pyx_INCREF(__pyx_kp_u__76);
  __Pyx_GIVEREF(__pyx_kp_u__76);
  PyList_SET_ITEM(__pyx_t_7, 6, __pyx_kp_u__76);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOWER_NOT_END, __pyx_t_7) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":50
 * REMOVE_POS = ["CCONJ", "INTJ", "ADP"]
 * LOWER_NOT_END = ["'s", ',', '.', '!', '?', ':', ';']
 * ACCEPTED_ENTS = ["PERSON", "NORP", "FACILITY", "ORG", "GPE", "LOC", "PRODUCT", "EVENT", "WORK_OF_ART", "LANGUAGE"]             # <<<<<<<<<<<<<<
 * WHITESPACE_PATTERN = r"\s+|_+"
 * UNKNOWN_WORD = "*UNK*"
 */
  __pyx_t_7 = PyList_New(10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_u_PERSON);
  __Pyx_GIVEREF(__pyx_n_u_PERSON);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_u_PERSON);
  __Pyx_INCREF(__pyx_n_u_NORP);
  __Pyx_GIVEREF(__pyx_n_u_NORP);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_u_NORP);
  __Pyx_INCREF(__pyx_n_u_FACILITY);
  __Pyx_GIVEREF(__pyx_n_u_FACILITY);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_u_FACILITY);
  __Pyx_INCREF(__pyx_n_u_ORG);
  __Pyx_GIVEREF(__pyx_n_u_ORG);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_n_u_ORG);
  __Pyx_INCREF(__pyx_n_u_GPE);
  __Pyx_GIVEREF(__pyx_n_u_GPE);
  PyList_SET_ITEM(__pyx_t_7, 4, __pyx_n_u_GPE);
  __Pyx_INCREF(__pyx_n_u_LOC);
  __Pyx_GIVEREF(__pyx_n_u_LOC);
  PyList_SET_ITEM(__pyx_t_7, 5, __pyx_n_u_LOC);
  __Pyx_INCREF(__pyx_n_u_PRODUCT);
  __Pyx_GIVEREF(__pyx_n_u_PRODUCT);
  PyList_SET_ITEM(__pyx_t_7, 6, __pyx_n_u_PRODUCT);
  __Pyx_INCREF(__pyx_n_u_EVENT);
  __Pyx_GIVEREF(__pyx_n_u_EVENT);
  PyList_SET_ITEM(__pyx_t_7, 7, __pyx_n_u_EVENT);
  __Pyx_INCREF(__pyx_n_u_WORK_OF_ART);
  __Pyx_GIVEREF(__pyx_n_u_WORK_OF_ART);
  PyList_SET_ITEM(__pyx_t_7, 8, __pyx_n_u_WORK_OF_ART);
  __Pyx_INCREF(__pyx_n_u_LANGUAGE);
  __Pyx_GIVEREF(__pyx_n_u_LANGUAGE);
  PyList_SET_ITEM(__pyx_t_7, 9, __pyx_n_u_LANGUAGE);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ACCEPTED_ENTS, __pyx_t_7) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":51
 * LOWER_NOT_END = ["'s", ',', '.', '!', '?', ':', ';']
 * ACCEPTED_ENTS = ["PERSON", "NORP", "FACILITY", "ORG", "GPE", "LOC", "PRODUCT", "EVENT", "WORK_OF_ART", "LANGUAGE"]
 * WHITESPACE_PATTERN = r"\s+|_+"             # <<<<<<<<<<<<<<
 * UNKNOWN_WORD = "*UNK*"
 * MISSING_WORD = "<missing>"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WHITESPACE_PATTERN, __pyx_kp_u_s_2) < 0) __PYX_ERR(0, 51, __pyx_L1_error)

  /* "neuralcoref/document.pyx":52
 * ACCEPTED_ENTS = ["PERSON", "NORP", "FACILITY", "ORG", "GPE", "LOC", "PRODUCT", "EVENT", "WORK_OF_ART", "LANGUAGE"]
 * WHITESPACE_PATTERN = r"\s+|_+"
 * UNKNOWN_WORD = "*UNK*"             # <<<<<<<<<<<<<<
 * MISSING_WORD = "<missing>"
 * MAX_ITER = 100
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UNKNOWN_WORD, __pyx_kp_u_UNK) < 0) __PYX_ERR(0, 52, __pyx_L1_error)

  /* "neuralcoref/document.pyx":53
 * WHITESPACE_PATTERN = r"\s+|_+"
 * UNKNOWN_WORD = "*UNK*"
 * MISSING_WORD = "<missing>"             # <<<<<<<<<<<<<<
 * MAX_ITER = 100
 * SPAN_FACTOR = 4
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MISSING_WORD, __pyx_kp_u_missing) < 0) __PYX_ERR(0, 53, __pyx_L1_error)

  /* "neuralcoref/document.pyx":54
 * UNKNOWN_WORD = "*UNK*"
 * MISSING_WORD = "<missing>"
 * MAX_ITER = 100             # <<<<<<<<<<<<<<
 * SPAN_FACTOR = 4
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAX_ITER, __pyx_int_100) < 0) __PYX_ERR(0, 54, __pyx_L1_error)

  /* "neuralcoref/document.pyx":55
 * MISSING_WORD = "<missing>"
 * MAX_ITER = 100
 * SPAN_FACTOR = 4             # <<<<<<<<<<<<<<
 * 
 * #########################
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SPAN_FACTOR, __pyx_int_4) < 0) __PYX_ERR(0, 55, __pyx_L1_error)

  /* "neuralcoref/document.pyx":449
 *                      and self.span.end > m2.span.start) else 0
 * 
 * class EmbeddingExtractor:             # <<<<<<<<<<<<<<
 *     '''
 *     Compute words embedding features for mentions
 */
  __pyx_t_7 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_EmbeddingExtractor, __pyx_n_s_EmbeddingExtractor, (PyObject *) NULL, __pyx_n_s_neuralcoref_document, __pyx_kp_s_Compute_words_embedding_feature); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "neuralcoref/document.pyx":453
 *     Compute words embedding features for mentions
 *     '''
 *     def __init__(self, pretrained_model_path):             # <<<<<<<<<<<<<<
 *         _, self.static_embeddings, self.stat_idx, self.stat_voc = self.load_embeddings_from_file(pretrained_model_path + "static_word")
 *         _, self.tuned_embeddings, self.tun_idx, self.tun_voc = self.load_embeddings_from_file(pretrained_model_path + "tuned_word")
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_1__init__, 0, __pyx_n_s_EmbeddingExtractor___init, NULL, __pyx_n_s_neuralcoref_document, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_init, __pyx_t_2) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":463
 * 
 *     @staticmethod
 *     def load_embeddings_from_file(name):             # <<<<<<<<<<<<<<
 *         print("Loading embeddings from", name)
 *         embeddings = {}
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_3load_embeddings_from_file, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_EmbeddingExtractor_load_embeddin, NULL, __pyx_n_s_neuralcoref_document, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "neuralcoref/document.pyx":462
 *         assert self.shape == shape2
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def load_embeddings_from_file(name):
 *         print("Loading embeddings from", name)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_load_embeddings_from_file, __pyx_t_1) < 0) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuralcoref/document.pyx":478
 * 
 *     @staticmethod
 *     def normalize_word(w):             # <<<<<<<<<<<<<<
 *         if w is None:
 *             return MISSING_WORD
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_5normalize_word, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_EmbeddingExtractor_normalize_wor, NULL, __pyx_n_s_neuralcoref_document, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "neuralcoref/document.pyx":477
 *         return average_mean, embeddings, voc_to_idx, idx_to_voc
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def normalize_word(w):
 *         if w is None:
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_normalize_word, __pyx_t_2) < 0) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":483
 *         return re.sub(r"\d", u"0", w.lower_)
 * 
 *     def get_document_embedding(self, utterances_list):             # <<<<<<<<<<<<<<
 *         ''' Embedding for the document '''
 *     #    We could also use this: embed_vector = numpy.copy(self.average_mean)#numpy.zeros(self.shape)
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_7get_document_embedding, 0, __pyx_n_s_EmbeddingExtractor_get_document, NULL, __pyx_n_s_neuralcoref_document, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_get_document_embedding, __pyx_t_2) < 0) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":493
 *         return embed_vector/max(len(utterances_list), 1)
 * 
 *     def get_stat_word(self, word):             # <<<<<<<<<<<<<<
 *         if word in self.static_embeddings:
 *             return word, self.static_embeddings.get(word)
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_9get_stat_word, 0, __pyx_n_s_EmbeddingExtractor_get_stat_word, NULL, __pyx_n_s_neuralcoref_document, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_get_stat_word, __pyx_t_2) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":499
 *             return UNKNOWN_WORD, self.fallback
 * 
 *     def get_word_embedding(self, word, static=False):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a single word (tuned if possible, otherwise static) '''
 *         norm_word = self.normalize_word(word)
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_11get_word_embedding, 0, __pyx_n_s_EmbeddingExtractor_get_word_embe, NULL, __pyx_n_s_neuralcoref_document, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__84);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_get_word_embedding, __pyx_t_2) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":510
 *                 return self.get_stat_word(norm_word)
 * 
 *     def get_word_in_sentence(self, word_idx, sentence):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a word in a sentence '''
 *         if word_idx < sentence.start or word_idx >= sentence.end:
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_13get_word_in_sentence, 0, __pyx_n_s_EmbeddingExtractor_get_word_in_s, NULL, __pyx_n_s_neuralcoref_document, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_get_word_in_sentence, __pyx_t_2) < 0) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":516
 *         return self.get_word_embedding(sentence.doc[word_idx])
 * 
 *     def get_average_embedding(self, token_list):             # <<<<<<<<<<<<<<
 *         ''' Embedding for a list of words '''
 *         embed_vector = numpy.zeros(self.shape, dtype='float32') #We could also use numpy.copy(self.average_mean)
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_15get_average_embedding, 0, __pyx_n_s_EmbeddingExtractor_get_average_e, NULL, __pyx_n_s_neuralcoref_document, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_get_average_embedding, __pyx_t_2) < 0) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":527
 *         return word_list, (embed_vector/max(len(word_list), 1))
 * 
 *     def get_mention_embeddings(self, mention, doc_embedding):             # <<<<<<<<<<<<<<
 *         ''' Get span (averaged) and word (single) embeddings of a mention '''
 *         ms = mention.span
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11neuralcoref_8document_18EmbeddingExtractor_17get_mention_embeddings, 0, __pyx_n_s_EmbeddingExtractor_get_mention_e, NULL, __pyx_n_s_neuralcoref_document, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_get_mention_embeddings, __pyx_t_2) < 0) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuralcoref/document.pyx":449
 *                      and self.span.end > m2.span.start) else 0
 * 
 * class EmbeddingExtractor:             # <<<<<<<<<<<<<<
 *     '''
 *     Compute words embedding features for mentions
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_EmbeddingExtractor, __pyx_empty_tuple, __pyx_t_7, NULL, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EmbeddingExtractor, __pyx_t_2) < 0) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":794
 *         self.pairs_men = numpy.asarray(pairs_men, dtype=numpy.uint64)
 * 
 * def mention_detection_debug(sentence):             # <<<<<<<<<<<<<<
 *     print(u" Loading spacy model")
 *     try:
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_11neuralcoref_8document_1mention_detection_debug, NULL, __pyx_n_s_neuralcoref_document); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mention_detection_debug, __pyx_t_7) < 0) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "neuralcoref/document.pyx":1
 * # coding: utf8             # <<<<<<<<<<<<<<
 * # cython: profile=True
 * # cython: infer_types=True
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "../../../../../../miniconda3/envs/nc/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init neuralcoref.document", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init neuralcoref.document");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
      __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;
    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;
    py_code = PyCode_New(
        0,
        #if PY_MAJOR_VERSION >= 3
        0,
        #endif
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return py_code;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* None */
    static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* PyCFunctionFastCall */
    #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
    #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* ExtTypeTest */
    static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* IsLittleEndian */
    static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
    static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
      static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((unsigned)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* GetItemInt */
      static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
      #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* BytesEquals */
      static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
      static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
      static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
      static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyObjectCallNoArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* pyfrozenset_new */
        static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if (likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
        static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* SliceObject */
        static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* RaiseException */
        #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* DictGetItem */
        #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseArgTupleInvalid */
        static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
        static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
        static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
        static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectSetAttrStr */
        #if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* SaveResetException */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A2
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
        #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = local_type;
    tstate->exc_state.exc_value = local_value;
    tstate->exc_state.exc_traceback = local_tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyIntBinop */
          #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyObjectCallMethod1 */
          static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
    result = __Pyx__PyObject_CallMethod1(method, arg);
    Py_DECREF(method);
    return result;
}

/* append */
          static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* FetchCommonType */
          static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
          #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* UnpackUnboundCMethod */
              static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
              #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
              #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
              static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* None */
              static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyErrExceptionMatches */
              #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* RaiseNoneIterError */
              static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* PyObject_GenericGetAttrNoDict */
              #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
              #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
              static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
              static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* GetVTable */
              static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
              static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
              static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
              static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
              static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc_3, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
              #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
              static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
              #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


              /* CIntFromPyVerify */
              #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5spacy_15parts_of_speech_univ_pos_t(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t value) {
    const enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t neg_one = (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) -1, const_zero = (enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t),
                                     little, !is_unsigned);
    }
}

/* Declarations */
              #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
              #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
              #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
              #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
              static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
              #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SwapException */
              #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = *type;
    tstate->exc_state.exc_value = *value;
    tstate->exc_state.exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CoroutineBase */
              #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    if (self->exc_type) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
        __Pyx_ExceptionSave(&self->exc_type, &self->exc_value, &self->exc_traceback);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self) {
    if (likely(self->exc_traceback)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                  static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                  #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* VoidPtrImport */
                  #ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
                  #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
                  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
